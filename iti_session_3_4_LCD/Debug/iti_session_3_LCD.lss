
iti_session_3_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003596  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00003596  0000360a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000023b8  00000000  00000000  00003718  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f94  00000000  00000000  00005ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00006a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d3  00000000  00000000  00006be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000200f  00000000  00000000  00006db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001170  00000000  00000000  00008dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001001  00000000  00000000  00009f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000af38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c1  00000000  00000000  0000b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000b399  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bc47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <main>
      7a:	0c 94 c9 1a 	jmp	0x3592	; 0x3592 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 92 05 	call	0xb24	; 0xb24 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 10 18 	jmp	0x3020	; 0x3020 <__epilogue_restores__+0x20>

000007ea <__floatunsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x10>
     7f6:	7b 01       	movw	r14, r22
     7f8:	8c 01       	movw	r16, r24
     7fa:	61 15       	cp	r22, r1
     7fc:	71 05       	cpc	r23, r1
     7fe:	81 05       	cpc	r24, r1
     800:	91 05       	cpc	r25, r1
     802:	19 f4       	brne	.+6      	; 0x80a <__floatunsisf+0x20>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
     808:	60 c0       	rjmp	.+192    	; 0x8ca <__stack+0x6b>
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	c8 2e       	mov	r12, r24
     812:	d1 2c       	mov	r13, r1
     814:	dc 82       	std	Y+4, r13	; 0x04
     816:	cb 82       	std	Y+3, r12	; 0x03
     818:	ed 82       	std	Y+5, r14	; 0x05
     81a:	fe 82       	std	Y+6, r15	; 0x06
     81c:	0f 83       	std	Y+7, r16	; 0x07
     81e:	18 87       	std	Y+8, r17	; 0x08
     820:	c8 01       	movw	r24, r16
     822:	b7 01       	movw	r22, r14
     824:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__clzsi2>
     828:	fc 01       	movw	r30, r24
     82a:	31 97       	sbiw	r30, 0x01	; 1
     82c:	f7 ff       	sbrs	r31, 7
     82e:	3b c0       	rjmp	.+118    	; 0x8a6 <__stack+0x47>
     830:	22 27       	eor	r18, r18
     832:	33 27       	eor	r19, r19
     834:	2e 1b       	sub	r18, r30
     836:	3f 0b       	sbc	r19, r31
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	02 2e       	mov	r0, r18
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatunsisf+0x5e>
     840:	d6 94       	lsr	r13
     842:	c7 94       	ror	r12
     844:	b7 94       	ror	r11
     846:	a7 94       	ror	r10
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatunsisf+0x56>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	aa 1f       	adc	r26, r26
     864:	bb 1f       	adc	r27, r27
     866:	2a 95       	dec	r18
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0x74>
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	a1 09       	sbc	r26, r1
     86e:	b1 09       	sbc	r27, r1
     870:	8e 21       	and	r24, r14
     872:	9f 21       	and	r25, r15
     874:	a0 23       	and	r26, r16
     876:	b1 23       	and	r27, r17
     878:	00 97       	sbiw	r24, 0x00	; 0
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	21 f0       	breq	.+8      	; 0x888 <__stack+0x29>
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	4a 29       	or	r20, r10
     88a:	5b 29       	or	r21, r11
     88c:	6c 29       	or	r22, r12
     88e:	7d 29       	or	r23, r13
     890:	4d 83       	std	Y+5, r20	; 0x05
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	6f 83       	std	Y+7, r22	; 0x07
     896:	78 87       	std	Y+8, r23	; 0x08
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8e 1b       	sub	r24, r30
     89e:	9f 0b       	sbc	r25, r31
     8a0:	9c 83       	std	Y+4, r25	; 0x04
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <__stack+0x6b>
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	81 f0       	breq	.+32     	; 0x8ca <__stack+0x6b>
     8aa:	0e 2e       	mov	r0, r30
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	ee 0c       	add	r14, r14
     8b0:	ff 1c       	adc	r15, r15
     8b2:	00 1f       	adc	r16, r16
     8b4:	11 1f       	adc	r17, r17
     8b6:	0a 94       	dec	r0
     8b8:	d2 f7       	brpl	.-12     	; 0x8ae <__stack+0x4f>
     8ba:	ed 82       	std	Y+5, r14	; 0x05
     8bc:	fe 82       	std	Y+6, r15	; 0x06
     8be:	0f 83       	std	Y+7, r16	; 0x07
     8c0:	18 87       	std	Y+8, r17	; 0x08
     8c2:	ce 1a       	sub	r12, r30
     8c4:	df 0a       	sbc	r13, r31
     8c6:	dc 82       	std	Y+4, r13	; 0x04
     8c8:	cb 82       	std	Y+3, r12	; 0x03
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 bd 04 	call	0x97a	; 0x97a <__pack_f>
     8d4:	28 96       	adiw	r28, 0x08	; 8
     8d6:	ea e0       	ldi	r30, 0x0A	; 10
     8d8:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x10>

000008dc <__clzsi2>:
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	7b 01       	movw	r14, r22
     8e6:	8c 01       	movw	r16, r24
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	e8 16       	cp	r14, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	f8 06       	cpc	r15, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 07       	cpc	r16, r24
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	18 07       	cpc	r17, r24
     8f8:	88 f4       	brcc	.+34     	; 0x91c <__clzsi2+0x40>
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	e8 16       	cp	r14, r24
     8fe:	f1 04       	cpc	r15, r1
     900:	01 05       	cpc	r16, r1
     902:	11 05       	cpc	r17, r1
     904:	31 f0       	breq	.+12     	; 0x912 <__clzsi2+0x36>
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x36>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	17 c0       	rjmp	.+46     	; 0x940 <__clzsi2+0x64>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	12 c0       	rjmp	.+36     	; 0x940 <__clzsi2+0x64>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	e8 16       	cp	r14, r24
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	f8 06       	cpc	r15, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 07       	cpc	r16, r24
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	18 07       	cpc	r17, r24
     92c:	28 f0       	brcs	.+10     	; 0x938 <__clzsi2+0x5c>
     92e:	88 e1       	ldi	r24, 0x18	; 24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	04 c0       	rjmp	.+8      	; 0x940 <__clzsi2+0x64>
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	20 e2       	ldi	r18, 0x20	; 32
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	28 1b       	sub	r18, r24
     94a:	39 0b       	sbc	r19, r25
     94c:	4a 0b       	sbc	r20, r26
     94e:	5b 0b       	sbc	r21, r27
     950:	04 c0       	rjmp	.+8      	; 0x95a <__clzsi2+0x7e>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	8a 95       	dec	r24
     95c:	d2 f7       	brpl	.-12     	; 0x952 <__clzsi2+0x76>
     95e:	f7 01       	movw	r30, r14
     960:	e5 59       	subi	r30, 0x95	; 149
     962:	ff 4f       	sbci	r31, 0xFF	; 255
     964:	80 81       	ld	r24, Z
     966:	28 1b       	sub	r18, r24
     968:	31 09       	sbc	r19, r1
     96a:	41 09       	sbc	r20, r1
     96c:	51 09       	sbc	r21, r1
     96e:	c9 01       	movw	r24, r18
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <__pack_f>:
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	fc 01       	movw	r30, r24
     986:	e4 80       	ldd	r14, Z+4	; 0x04
     988:	f5 80       	ldd	r15, Z+5	; 0x05
     98a:	06 81       	ldd	r16, Z+6	; 0x06
     98c:	17 81       	ldd	r17, Z+7	; 0x07
     98e:	d1 80       	ldd	r13, Z+1	; 0x01
     990:	80 81       	ld	r24, Z
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	48 f4       	brcc	.+18     	; 0x9a8 <__pack_f+0x2e>
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	a0 e1       	ldi	r26, 0x10	; 16
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e8 2a       	or	r14, r24
     9a0:	f9 2a       	or	r15, r25
     9a2:	0a 2b       	or	r16, r26
     9a4:	1b 2b       	or	r17, r27
     9a6:	a5 c0       	rjmp	.+330    	; 0xaf2 <__pack_f+0x178>
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	09 f4       	brne	.+2      	; 0x9ae <__pack_f+0x34>
     9ac:	9f c0       	rjmp	.+318    	; 0xaec <__pack_f+0x172>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	21 f4       	brne	.+8      	; 0x9ba <__pack_f+0x40>
     9b2:	ee 24       	eor	r14, r14
     9b4:	ff 24       	eor	r15, r15
     9b6:	87 01       	movw	r16, r14
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__pack_f+0x4a>
     9ba:	e1 14       	cp	r14, r1
     9bc:	f1 04       	cpc	r15, r1
     9be:	01 05       	cpc	r16, r1
     9c0:	11 05       	cpc	r17, r1
     9c2:	19 f4       	brne	.+6      	; 0x9ca <__pack_f+0x50>
     9c4:	e0 e0       	ldi	r30, 0x00	; 0
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	96 c0       	rjmp	.+300    	; 0xaf6 <__pack_f+0x17c>
     9ca:	62 81       	ldd	r22, Z+2	; 0x02
     9cc:	73 81       	ldd	r23, Z+3	; 0x03
     9ce:	9f ef       	ldi	r25, 0xFF	; 255
     9d0:	62 38       	cpi	r22, 0x82	; 130
     9d2:	79 07       	cpc	r23, r25
     9d4:	0c f0       	brlt	.+2      	; 0x9d8 <__pack_f+0x5e>
     9d6:	5b c0       	rjmp	.+182    	; 0xa8e <__pack_f+0x114>
     9d8:	22 e8       	ldi	r18, 0x82	; 130
     9da:	3f ef       	ldi	r19, 0xFF	; 255
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	2a 31       	cpi	r18, 0x1A	; 26
     9e2:	31 05       	cpc	r19, r1
     9e4:	2c f0       	brlt	.+10     	; 0x9f0 <__pack_f+0x76>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	2a c0       	rjmp	.+84     	; 0xa44 <__pack_f+0xca>
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	02 2e       	mov	r0, r18
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <__pack_f+0x86>
     9f8:	76 95       	lsr	r23
     9fa:	67 95       	ror	r22
     9fc:	57 95       	ror	r21
     9fe:	47 95       	ror	r20
     a00:	0a 94       	dec	r0
     a02:	d2 f7       	brpl	.-12     	; 0x9f8 <__pack_f+0x7e>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x9c>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	aa 1f       	adc	r26, r26
     a14:	bb 1f       	adc	r27, r27
     a16:	2a 95       	dec	r18
     a18:	d2 f7       	brpl	.-12     	; 0xa0e <__pack_f+0x94>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	a1 09       	sbc	r26, r1
     a1e:	b1 09       	sbc	r27, r1
     a20:	8e 21       	and	r24, r14
     a22:	9f 21       	and	r25, r15
     a24:	a0 23       	and	r26, r16
     a26:	b1 23       	and	r27, r17
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	a1 05       	cpc	r26, r1
     a2c:	b1 05       	cpc	r27, r1
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__pack_f+0xbe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	9a 01       	movw	r18, r20
     a3a:	ab 01       	movw	r20, r22
     a3c:	28 2b       	or	r18, r24
     a3e:	39 2b       	or	r19, r25
     a40:	4a 2b       	or	r20, r26
     a42:	5b 2b       	or	r21, r27
     a44:	da 01       	movw	r26, r20
     a46:	c9 01       	movw	r24, r18
     a48:	8f 77       	andi	r24, 0x7F	; 127
     a4a:	90 70       	andi	r25, 0x00	; 0
     a4c:	a0 70       	andi	r26, 0x00	; 0
     a4e:	b0 70       	andi	r27, 0x00	; 0
     a50:	80 34       	cpi	r24, 0x40	; 64
     a52:	91 05       	cpc	r25, r1
     a54:	a1 05       	cpc	r26, r1
     a56:	b1 05       	cpc	r27, r1
     a58:	39 f4       	brne	.+14     	; 0xa68 <__pack_f+0xee>
     a5a:	27 ff       	sbrs	r18, 7
     a5c:	09 c0       	rjmp	.+18     	; 0xa70 <__pack_f+0xf6>
     a5e:	20 5c       	subi	r18, 0xC0	; 192
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	4f 4f       	sbci	r20, 0xFF	; 255
     a64:	5f 4f       	sbci	r21, 0xFF	; 255
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0xf6>
     a68:	21 5c       	subi	r18, 0xC1	; 193
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	4f 4f       	sbci	r20, 0xFF	; 255
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	20 30       	cpi	r18, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	3a 07       	cpc	r19, r26
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	4a 07       	cpc	r20, r26
     a7e:	a0 e4       	ldi	r26, 0x40	; 64
     a80:	5a 07       	cpc	r21, r26
     a82:	10 f0       	brcs	.+4      	; 0xa88 <__pack_f+0x10e>
     a84:	e1 e0       	ldi	r30, 0x01	; 1
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	79 01       	movw	r14, r18
     a8a:	8a 01       	movw	r16, r20
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <__pack_f+0x162>
     a8e:	60 38       	cpi	r22, 0x80	; 128
     a90:	71 05       	cpc	r23, r1
     a92:	64 f5       	brge	.+88     	; 0xaec <__pack_f+0x172>
     a94:	fb 01       	movw	r30, r22
     a96:	e1 58       	subi	r30, 0x81	; 129
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	d8 01       	movw	r26, r16
     a9c:	c7 01       	movw	r24, r14
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	90 70       	andi	r25, 0x00	; 0
     aa2:	a0 70       	andi	r26, 0x00	; 0
     aa4:	b0 70       	andi	r27, 0x00	; 0
     aa6:	80 34       	cpi	r24, 0x40	; 64
     aa8:	91 05       	cpc	r25, r1
     aaa:	a1 05       	cpc	r26, r1
     aac:	b1 05       	cpc	r27, r1
     aae:	39 f4       	brne	.+14     	; 0xabe <__pack_f+0x144>
     ab0:	e7 fe       	sbrs	r14, 7
     ab2:	0d c0       	rjmp	.+26     	; 0xace <__pack_f+0x154>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__pack_f+0x14c>
     abe:	8f e3       	ldi	r24, 0x3F	; 63
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e8 0e       	add	r14, r24
     ac8:	f9 1e       	adc	r15, r25
     aca:	0a 1f       	adc	r16, r26
     acc:	1b 1f       	adc	r17, r27
     ace:	17 ff       	sbrs	r17, 7
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <__pack_f+0x162>
     ad2:	16 95       	lsr	r17
     ad4:	07 95       	ror	r16
     ad6:	f7 94       	ror	r15
     ad8:	e7 94       	ror	r14
     ada:	31 96       	adiw	r30, 0x01	; 1
     adc:	87 e0       	ldi	r24, 0x07	; 7
     ade:	16 95       	lsr	r17
     ae0:	07 95       	ror	r16
     ae2:	f7 94       	ror	r15
     ae4:	e7 94       	ror	r14
     ae6:	8a 95       	dec	r24
     ae8:	d1 f7       	brne	.-12     	; 0xade <__pack_f+0x164>
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x17c>
     aec:	ee 24       	eor	r14, r14
     aee:	ff 24       	eor	r15, r15
     af0:	87 01       	movw	r16, r14
     af2:	ef ef       	ldi	r30, 0xFF	; 255
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	6e 2f       	mov	r22, r30
     af8:	67 95       	ror	r22
     afa:	66 27       	eor	r22, r22
     afc:	67 95       	ror	r22
     afe:	90 2f       	mov	r25, r16
     b00:	9f 77       	andi	r25, 0x7F	; 127
     b02:	d7 94       	ror	r13
     b04:	dd 24       	eor	r13, r13
     b06:	d7 94       	ror	r13
     b08:	8e 2f       	mov	r24, r30
     b0a:	86 95       	lsr	r24
     b0c:	49 2f       	mov	r20, r25
     b0e:	46 2b       	or	r20, r22
     b10:	58 2f       	mov	r21, r24
     b12:	5d 29       	or	r21, r13
     b14:	b7 01       	movw	r22, r14
     b16:	ca 01       	movw	r24, r20
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	08 95       	ret

00000b24 <__unpack_f>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	40 81       	ld	r20, Z
     b2a:	51 81       	ldd	r21, Z+1	; 0x01
     b2c:	22 81       	ldd	r18, Z+2	; 0x02
     b2e:	62 2f       	mov	r22, r18
     b30:	6f 77       	andi	r22, 0x7F	; 127
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	22 1f       	adc	r18, r18
     b36:	22 27       	eor	r18, r18
     b38:	22 1f       	adc	r18, r18
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	89 2f       	mov	r24, r25
     b3e:	88 0f       	add	r24, r24
     b40:	82 2b       	or	r24, r18
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	99 1f       	adc	r25, r25
     b48:	99 27       	eor	r25, r25
     b4a:	99 1f       	adc	r25, r25
     b4c:	11 96       	adiw	r26, 0x01	; 1
     b4e:	9c 93       	st	X, r25
     b50:	11 97       	sbiw	r26, 0x01	; 1
     b52:	21 15       	cp	r18, r1
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f5       	brne	.+106    	; 0xbc2 <__unpack_f+0x9e>
     b58:	41 15       	cp	r20, r1
     b5a:	51 05       	cpc	r21, r1
     b5c:	61 05       	cpc	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	11 f4       	brne	.+4      	; 0xb66 <__unpack_f+0x42>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	37 c0       	rjmp	.+110    	; 0xbd4 <__unpack_f+0xb0>
     b66:	82 e8       	ldi	r24, 0x82	; 130
     b68:	9f ef       	ldi	r25, 0xFF	; 255
     b6a:	13 96       	adiw	r26, 0x03	; 3
     b6c:	9c 93       	st	X, r25
     b6e:	8e 93       	st	-X, r24
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	9a 01       	movw	r18, r20
     b74:	ab 01       	movw	r20, r22
     b76:	67 e0       	ldi	r22, 0x07	; 7
     b78:	22 0f       	add	r18, r18
     b7a:	33 1f       	adc	r19, r19
     b7c:	44 1f       	adc	r20, r20
     b7e:	55 1f       	adc	r21, r21
     b80:	6a 95       	dec	r22
     b82:	d1 f7       	brne	.-12     	; 0xb78 <__unpack_f+0x54>
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	8c 93       	st	X, r24
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <__unpack_f+0x80>
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	44 1f       	adc	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8d 91       	ld	r24, X+
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	20 30       	cpi	r18, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	38 07       	cpc	r19, r24
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	48 07       	cpc	r20, r24
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	58 07       	cpc	r21, r24
     bb2:	58 f3       	brcs	.-42     	; 0xb8a <__unpack_f+0x66>
     bb4:	14 96       	adiw	r26, 0x04	; 4
     bb6:	2d 93       	st	X+, r18
     bb8:	3d 93       	st	X+, r19
     bba:	4d 93       	st	X+, r20
     bbc:	5c 93       	st	X, r21
     bbe:	17 97       	sbiw	r26, 0x07	; 7
     bc0:	08 95       	ret
     bc2:	2f 3f       	cpi	r18, 0xFF	; 255
     bc4:	31 05       	cpc	r19, r1
     bc6:	79 f4       	brne	.+30     	; 0xbe6 <__unpack_f+0xc2>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__unpack_f+0xb4>
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	8c 93       	st	X, r24
     bd6:	08 95       	ret
     bd8:	64 ff       	sbrs	r22, 4
     bda:	03 c0       	rjmp	.+6      	; 0xbe2 <__unpack_f+0xbe>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
     be0:	12 c0       	rjmp	.+36     	; 0xc06 <__unpack_f+0xe2>
     be2:	1c 92       	st	X, r1
     be4:	10 c0       	rjmp	.+32     	; 0xc06 <__unpack_f+0xe2>
     be6:	2f 57       	subi	r18, 0x7F	; 127
     be8:	30 40       	sbci	r19, 0x00	; 0
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	3c 93       	st	X, r19
     bee:	2e 93       	st	-X, r18
     bf0:	12 97       	sbiw	r26, 0x02	; 2
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	8c 93       	st	X, r24
     bf6:	87 e0       	ldi	r24, 0x07	; 7
     bf8:	44 0f       	add	r20, r20
     bfa:	55 1f       	adc	r21, r21
     bfc:	66 1f       	adc	r22, r22
     bfe:	77 1f       	adc	r23, r23
     c00:	8a 95       	dec	r24
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <__unpack_f+0xd4>
     c04:	70 64       	ori	r23, 0x40	; 64
     c06:	14 96       	adiw	r26, 0x04	; 4
     c08:	4d 93       	st	X+, r20
     c0a:	5d 93       	st	X+, r21
     c0c:	6d 93       	st	X+, r22
     c0e:	7c 93       	st	X, r23
     c10:	17 97       	sbiw	r26, 0x07	; 7
     c12:	08 95       	ret

00000c14 <__fpcmp_parts_f>:
     c14:	1f 93       	push	r17
     c16:	dc 01       	movw	r26, r24
     c18:	fb 01       	movw	r30, r22
     c1a:	9c 91       	ld	r25, X
     c1c:	92 30       	cpi	r25, 0x02	; 2
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__fpcmp_parts_f+0xe>
     c20:	47 c0       	rjmp	.+142    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c22:	80 81       	ld	r24, Z
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	08 f4       	brcc	.+2      	; 0xc2a <__fpcmp_parts_f+0x16>
     c28:	43 c0       	rjmp	.+134    	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c2a:	94 30       	cpi	r25, 0x04	; 4
     c2c:	51 f4       	brne	.+20     	; 0xc42 <__fpcmp_parts_f+0x2e>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	99 f5       	brne	.+102    	; 0xc9c <__fpcmp_parts_f+0x88>
     c36:	81 81       	ldd	r24, Z+1	; 0x01
     c38:	68 2f       	mov	r22, r24
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	61 1b       	sub	r22, r17
     c3e:	71 09       	sbc	r23, r1
     c40:	3f c0       	rjmp	.+126    	; 0xcc0 <__fpcmp_parts_f+0xac>
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	21 f0       	breq	.+8      	; 0xc4e <__fpcmp_parts_f+0x3a>
     c46:	92 30       	cpi	r25, 0x02	; 2
     c48:	31 f4       	brne	.+12     	; 0xc56 <__fpcmp_parts_f+0x42>
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	b9 f1       	breq	.+110    	; 0xcbc <__fpcmp_parts_f+0xa8>
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	88 23       	and	r24, r24
     c52:	89 f1       	breq	.+98     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     c54:	2d c0       	rjmp	.+90     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     c56:	11 96       	adiw	r26, 0x01	; 1
     c58:	1c 91       	ld	r17, X
     c5a:	11 97       	sbiw	r26, 0x01	; 1
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	f1 f0       	breq	.+60     	; 0xc9c <__fpcmp_parts_f+0x88>
     c60:	81 81       	ldd	r24, Z+1	; 0x01
     c62:	18 17       	cp	r17, r24
     c64:	d9 f4       	brne	.+54     	; 0xc9c <__fpcmp_parts_f+0x88>
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	13 97       	sbiw	r26, 0x03	; 3
     c6e:	82 81       	ldd	r24, Z+2	; 0x02
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	94 f0       	brlt	.+36     	; 0xc9c <__fpcmp_parts_f+0x88>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	bc f0       	brlt	.+46     	; 0xcac <__fpcmp_parts_f+0x98>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	8d 91       	ld	r24, X+
     c82:	9d 91       	ld	r25, X+
     c84:	0d 90       	ld	r0, X+
     c86:	bc 91       	ld	r27, X
     c88:	a0 2d       	mov	r26, r0
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	28 17       	cp	r18, r24
     c94:	39 07       	cpc	r19, r25
     c96:	4a 07       	cpc	r20, r26
     c98:	5b 07       	cpc	r21, r27
     c9a:	18 f4       	brcc	.+6      	; 0xca2 <__fpcmp_parts_f+0x8e>
     c9c:	11 23       	and	r17, r17
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <__fpcmp_parts_f+0x9c>
     ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <__fpcmp_parts_f+0xa2>
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	a4 07       	cpc	r26, r20
     ca8:	b5 07       	cpc	r27, r21
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fpcmp_parts_f+0xa8>
     cac:	11 23       	and	r17, r17
     cae:	19 f0       	breq	.+6      	; 0xcb6 <__fpcmp_parts_f+0xa2>
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__fpcmp_parts_f+0xac>
     cb6:	6f ef       	ldi	r22, 0xFF	; 255
     cb8:	7f ef       	ldi	r23, 0xFF	; 255
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <__fpcmp_parts_f+0xac>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	cb 01       	movw	r24, r22
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret

00000cc6 <LCD_VidPulseEnable>:
#include "LCD.h"



void LCD_VidPulseEnable(void)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	6c 97       	sbiw	r28, 0x1c	; 28
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	62 e0       	ldi	r22, 0x02	; 2
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	0e 94 86 14 	call	0x290c	; 0x290c <DIO_VidSetPinValue>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	a0 e8       	ldi	r26, 0x80	; 128
     cea:	bf e3       	ldi	r27, 0x3F	; 63
     cec:	89 8f       	std	Y+25, r24	; 0x19
     cee:	9a 8f       	std	Y+26, r25	; 0x1a
     cf0:	ab 8f       	std	Y+27, r26	; 0x1b
     cf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf4:	69 8d       	ldd	r22, Y+25	; 0x19
     cf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	4a ef       	ldi	r20, 0xFA	; 250
     d02:	54 e4       	ldi	r21, 0x44	; 68
     d04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	8d 8b       	std	Y+21, r24	; 0x15
     d0e:	9e 8b       	std	Y+22, r25	; 0x16
     d10:	af 8b       	std	Y+23, r26	; 0x17
     d12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d14:	6d 89       	ldd	r22, Y+21	; 0x15
     d16:	7e 89       	ldd	r23, Y+22	; 0x16
     d18:	8f 89       	ldd	r24, Y+23	; 0x17
     d1a:	98 8d       	ldd	r25, Y+24	; 0x18
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e8       	ldi	r20, 0x80	; 128
     d22:	5f e3       	ldi	r21, 0x3F	; 63
     d24:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d28:	88 23       	and	r24, r24
     d2a:	2c f4       	brge	.+10     	; 0xd36 <LCD_VidPulseEnable+0x70>
		__ticks = 1;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	9c 8b       	std	Y+20, r25	; 0x14
     d32:	8b 8b       	std	Y+19, r24	; 0x13
     d34:	3f c0       	rjmp	.+126    	; 0xdb4 <LCD_VidPulseEnable+0xee>
	else if (__tmp > 65535)
     d36:	6d 89       	ldd	r22, Y+21	; 0x15
     d38:	7e 89       	ldd	r23, Y+22	; 0x16
     d3a:	8f 89       	ldd	r24, Y+23	; 0x17
     d3c:	98 8d       	ldd	r25, Y+24	; 0x18
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	3f ef       	ldi	r19, 0xFF	; 255
     d42:	4f e7       	ldi	r20, 0x7F	; 127
     d44:	57 e4       	ldi	r21, 0x47	; 71
     d46:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d4a:	18 16       	cp	r1, r24
     d4c:	4c f5       	brge	.+82     	; 0xda0 <LCD_VidPulseEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4e:	69 8d       	ldd	r22, Y+25	; 0x19
     d50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e2       	ldi	r20, 0x20	; 32
     d5c:	51 e4       	ldi	r21, 0x41	; 65
     d5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	bc 01       	movw	r22, r24
     d68:	cd 01       	movw	r24, r26
     d6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	9c 8b       	std	Y+20, r25	; 0x14
     d74:	8b 8b       	std	Y+19, r24	; 0x13
     d76:	0f c0       	rjmp	.+30     	; 0xd96 <LCD_VidPulseEnable+0xd0>
     d78:	88 ec       	ldi	r24, 0xC8	; 200
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	9a 8b       	std	Y+18, r25	; 0x12
     d7e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d80:	89 89       	ldd	r24, Y+17	; 0x11
     d82:	9a 89       	ldd	r25, Y+18	; 0x12
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	f1 f7       	brne	.-4      	; 0xd84 <LCD_VidPulseEnable+0xbe>
     d88:	9a 8b       	std	Y+18, r25	; 0x12
     d8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8c:	8b 89       	ldd	r24, Y+19	; 0x13
     d8e:	9c 89       	ldd	r25, Y+20	; 0x14
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	9c 8b       	std	Y+20, r25	; 0x14
     d94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d96:	8b 89       	ldd	r24, Y+19	; 0x13
     d98:	9c 89       	ldd	r25, Y+20	; 0x14
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	69 f7       	brne	.-38     	; 0xd78 <LCD_VidPulseEnable+0xb2>
     d9e:	14 c0       	rjmp	.+40     	; 0xdc8 <LCD_VidPulseEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da0:	6d 89       	ldd	r22, Y+21	; 0x15
     da2:	7e 89       	ldd	r23, Y+22	; 0x16
     da4:	8f 89       	ldd	r24, Y+23	; 0x17
     da6:	98 8d       	ldd	r25, Y+24	; 0x18
     da8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	9c 8b       	std	Y+20, r25	; 0x14
     db2:	8b 8b       	std	Y+19, r24	; 0x13
     db4:	8b 89       	ldd	r24, Y+19	; 0x13
     db6:	9c 89       	ldd	r25, Y+20	; 0x14
     db8:	98 8b       	std	Y+16, r25	; 0x10
     dba:	8f 87       	std	Y+15, r24	; 0x0f
     dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbe:	98 89       	ldd	r25, Y+16	; 0x10
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <LCD_VidPulseEnable+0xfa>
     dc4:	98 8b       	std	Y+16, r25	; 0x10
     dc6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_VidSetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
     dc8:	83 e0       	ldi	r24, 0x03	; 3
     dca:	62 e0       	ldi	r22, 0x02	; 2
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	0e 94 86 14 	call	0x290c	; 0x290c <DIO_VidSetPinValue>
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e8       	ldi	r26, 0x80	; 128
     dd8:	bf e3       	ldi	r27, 0x3F	; 63
     dda:	8b 87       	std	Y+11, r24	; 0x0b
     ddc:	9c 87       	std	Y+12, r25	; 0x0c
     dde:	ad 87       	std	Y+13, r26	; 0x0d
     de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6b 85       	ldd	r22, Y+11	; 0x0b
     de4:	7c 85       	ldd	r23, Y+12	; 0x0c
     de6:	8d 85       	ldd	r24, Y+13	; 0x0d
     de8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8f 83       	std	Y+7, r24	; 0x07
     dfc:	98 87       	std	Y+8, r25	; 0x08
     dfe:	a9 87       	std	Y+9, r26	; 0x09
     e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e02:	6f 81       	ldd	r22, Y+7	; 0x07
     e04:	78 85       	ldd	r23, Y+8	; 0x08
     e06:	89 85       	ldd	r24, Y+9	; 0x09
     e08:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <LCD_VidPulseEnable+0x15e>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9e 83       	std	Y+6, r25	; 0x06
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <LCD_VidPulseEnable+0x1dc>
	else if (__tmp > 65535)
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <LCD_VidPulseEnable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9e 83       	std	Y+6, r25	; 0x06
     e62:	8d 83       	std	Y+5, r24	; 0x05
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <LCD_VidPulseEnable+0x1be>
     e66:	88 ec       	ldi	r24, 0xC8	; 200
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <LCD_VidPulseEnable+0x1ac>
     e76:	9c 83       	std	Y+4, r25	; 0x04
     e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <LCD_VidPulseEnable+0x1a0>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <LCD_VidPulseEnable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	8d 81       	ldd	r24, Y+5	; 0x05
     ea4:	9e 81       	ldd	r25, Y+6	; 0x06
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <LCD_VidPulseEnable+0x1e8>
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
     eb6:	6c 96       	adiw	r28, 0x1c	; 28
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <LCD_VidSendCommand>:


void LCD_VidSendCommand(u8 LOC_u8command)
{
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	c8 54       	subi	r28, 0x48	; 72
     ed6:	d0 40       	sbci	r29, 0x00	; 0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	fe 01       	movw	r30, r28
     ee4:	e8 5b       	subi	r30, 0xB8	; 184
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	80 83       	st	Z, r24
	u8 mode = MODE;
     eea:	fe 01       	movw	r30, r28
     eec:	e9 5b       	subi	r30, 0xB9	; 185
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	80 83       	st	Z, r24

	if(mode == 8)
     ef4:	fe 01       	movw	r30, r28
     ef6:	e9 5b       	subi	r30, 0xB9	; 185
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	80 81       	ld	r24, Z
     efc:	88 30       	cpi	r24, 0x08	; 8
     efe:	09 f0       	breq	.+2      	; 0xf02 <LCD_VidSendCommand+0x3a>
     f00:	0b c1       	rjmp	.+534    	; 0x1118 <LCD_VidSendCommand+0x250>
	{
		DIO_VidSetPinValue(LCD_CTRL_PORT,RS,0); /* Instruction Mode RS=0 */
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	0e 94 86 14 	call	0x290c	; 0x290c <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);/* write data to LCD so RW=0 */
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	0e 94 86 14 	call	0x290c	; 0x290c <DIO_VidSetPinValue>
     f16:	fe 01       	movw	r30, r28
     f18:	ed 5b       	subi	r30, 0xBD	; 189
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	a0 e8       	ldi	r26, 0x80	; 128
     f22:	bf e3       	ldi	r27, 0x3F	; 63
     f24:	80 83       	st	Z, r24
     f26:	91 83       	std	Z+1, r25	; 0x01
     f28:	a2 83       	std	Z+2, r26	; 0x02
     f2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2c:	8e 01       	movw	r16, r28
     f2e:	01 5c       	subi	r16, 0xC1	; 193
     f30:	1f 4f       	sbci	r17, 0xFF	; 255
     f32:	fe 01       	movw	r30, r28
     f34:	ed 5b       	subi	r30, 0xBD	; 189
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	60 81       	ld	r22, Z
     f3a:	71 81       	ldd	r23, Z+1	; 0x01
     f3c:	82 81       	ldd	r24, Z+2	; 0x02
     f3e:	93 81       	ldd	r25, Z+3	; 0x03
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	4a ef       	ldi	r20, 0xFA	; 250
     f46:	54 e4       	ldi	r21, 0x44	; 68
     f48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	f8 01       	movw	r30, r16
     f52:	80 83       	st	Z, r24
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	a2 83       	std	Z+2, r26	; 0x02
     f58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f5a:	fe 01       	movw	r30, r28
     f5c:	ff 96       	adiw	r30, 0x3f	; 63
     f5e:	60 81       	ld	r22, Z
     f60:	71 81       	ldd	r23, Z+1	; 0x01
     f62:	82 81       	ldd	r24, Z+2	; 0x02
     f64:	93 81       	ldd	r25, Z+3	; 0x03
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e8       	ldi	r20, 0x80	; 128
     f6c:	5f e3       	ldi	r21, 0x3F	; 63
     f6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f72:	88 23       	and	r24, r24
     f74:	2c f4       	brge	.+10     	; 0xf80 <LCD_VidSendCommand+0xb8>
		__ticks = 1;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9e af       	std	Y+62, r25	; 0x3e
     f7c:	8d af       	std	Y+61, r24	; 0x3d
     f7e:	46 c0       	rjmp	.+140    	; 0x100c <LCD_VidSendCommand+0x144>
	else if (__tmp > 65535)
     f80:	fe 01       	movw	r30, r28
     f82:	ff 96       	adiw	r30, 0x3f	; 63
     f84:	60 81       	ld	r22, Z
     f86:	71 81       	ldd	r23, Z+1	; 0x01
     f88:	82 81       	ldd	r24, Z+2	; 0x02
     f8a:	93 81       	ldd	r25, Z+3	; 0x03
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	3f ef       	ldi	r19, 0xFF	; 255
     f90:	4f e7       	ldi	r20, 0x7F	; 127
     f92:	57 e4       	ldi	r21, 0x47	; 71
     f94:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f98:	18 16       	cp	r1, r24
     f9a:	64 f5       	brge	.+88     	; 0xff4 <LCD_VidSendCommand+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f9c:	fe 01       	movw	r30, r28
     f9e:	ed 5b       	subi	r30, 0xBD	; 189
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	60 81       	ld	r22, Z
     fa4:	71 81       	ldd	r23, Z+1	; 0x01
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e2       	ldi	r20, 0x20	; 32
     fb0:	51 e4       	ldi	r21, 0x41	; 65
     fb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	9e af       	std	Y+62, r25	; 0x3e
     fc8:	8d af       	std	Y+61, r24	; 0x3d
     fca:	0f c0       	rjmp	.+30     	; 0xfea <LCD_VidSendCommand+0x122>
     fcc:	88 ec       	ldi	r24, 0xC8	; 200
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9c af       	std	Y+60, r25	; 0x3c
     fd2:	8b af       	std	Y+59, r24	; 0x3b
     fd4:	8b ad       	ldd	r24, Y+59	; 0x3b
     fd6:	9c ad       	ldd	r25, Y+60	; 0x3c
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <LCD_VidSendCommand+0x110>
     fdc:	9c af       	std	Y+60, r25	; 0x3c
     fde:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe0:	8d ad       	ldd	r24, Y+61	; 0x3d
     fe2:	9e ad       	ldd	r25, Y+62	; 0x3e
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	9e af       	std	Y+62, r25	; 0x3e
     fe8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fea:	8d ad       	ldd	r24, Y+61	; 0x3d
     fec:	9e ad       	ldd	r25, Y+62	; 0x3e
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	69 f7       	brne	.-38     	; 0xfcc <LCD_VidSendCommand+0x104>
     ff2:	16 c0       	rjmp	.+44     	; 0x1020 <LCD_VidSendCommand+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff4:	fe 01       	movw	r30, r28
     ff6:	ff 96       	adiw	r30, 0x3f	; 63
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9e af       	std	Y+62, r25	; 0x3e
    100a:	8d af       	std	Y+61, r24	; 0x3d
    100c:	8d ad       	ldd	r24, Y+61	; 0x3d
    100e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1010:	9a af       	std	Y+58, r25	; 0x3a
    1012:	89 af       	std	Y+57, r24	; 0x39
    1014:	89 ad       	ldd	r24, Y+57	; 0x39
    1016:	9a ad       	ldd	r25, Y+58	; 0x3a
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <LCD_VidSendCommand+0x150>
    101c:	9a af       	std	Y+58, r25	; 0x3a
    101e:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		DIO_VidSetPortValue(LCD_DATA_PORT,LOC_u8command); /* out the required command to the data bus D0 --> D7 */
    1020:	fe 01       	movw	r30, r28
    1022:	e8 5b       	subi	r30, 0xB8	; 184
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	83 e0       	ldi	r24, 0x03	; 3
    1028:	60 81       	ld	r22, Z
    102a:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <DIO_VidSetPortValue>
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a0 e8       	ldi	r26, 0x80	; 128
    1034:	bf e3       	ldi	r27, 0x3F	; 63
    1036:	8d ab       	std	Y+53, r24	; 0x35
    1038:	9e ab       	std	Y+54, r25	; 0x36
    103a:	af ab       	std	Y+55, r26	; 0x37
    103c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103e:	6d a9       	ldd	r22, Y+53	; 0x35
    1040:	7e a9       	ldd	r23, Y+54	; 0x36
    1042:	8f a9       	ldd	r24, Y+55	; 0x37
    1044:	98 ad       	ldd	r25, Y+56	; 0x38
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	4a ef       	ldi	r20, 0xFA	; 250
    104c:	54 e4       	ldi	r21, 0x44	; 68
    104e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	89 ab       	std	Y+49, r24	; 0x31
    1058:	9a ab       	std	Y+50, r25	; 0x32
    105a:	ab ab       	std	Y+51, r26	; 0x33
    105c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    105e:	69 a9       	ldd	r22, Y+49	; 0x31
    1060:	7a a9       	ldd	r23, Y+50	; 0x32
    1062:	8b a9       	ldd	r24, Y+51	; 0x33
    1064:	9c a9       	ldd	r25, Y+52	; 0x34
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e8       	ldi	r20, 0x80	; 128
    106c:	5f e3       	ldi	r21, 0x3F	; 63
    106e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1072:	88 23       	and	r24, r24
    1074:	2c f4       	brge	.+10     	; 0x1080 <LCD_VidSendCommand+0x1b8>
		__ticks = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	98 ab       	std	Y+48, r25	; 0x30
    107c:	8f a7       	std	Y+47, r24	; 0x2f
    107e:	3f c0       	rjmp	.+126    	; 0x10fe <LCD_VidSendCommand+0x236>
	else if (__tmp > 65535)
    1080:	69 a9       	ldd	r22, Y+49	; 0x31
    1082:	7a a9       	ldd	r23, Y+50	; 0x32
    1084:	8b a9       	ldd	r24, Y+51	; 0x33
    1086:	9c a9       	ldd	r25, Y+52	; 0x34
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	3f ef       	ldi	r19, 0xFF	; 255
    108c:	4f e7       	ldi	r20, 0x7F	; 127
    108e:	57 e4       	ldi	r21, 0x47	; 71
    1090:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1094:	18 16       	cp	r1, r24
    1096:	4c f5       	brge	.+82     	; 0x10ea <LCD_VidSendCommand+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1098:	6d a9       	ldd	r22, Y+53	; 0x35
    109a:	7e a9       	ldd	r23, Y+54	; 0x36
    109c:	8f a9       	ldd	r24, Y+55	; 0x37
    109e:	98 ad       	ldd	r25, Y+56	; 0x38
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	98 ab       	std	Y+48, r25	; 0x30
    10be:	8f a7       	std	Y+47, r24	; 0x2f
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <LCD_VidSendCommand+0x218>
    10c2:	88 ec       	ldi	r24, 0xC8	; 200
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9e a7       	std	Y+46, r25	; 0x2e
    10c8:	8d a7       	std	Y+45, r24	; 0x2d
    10ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    10cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <LCD_VidSendCommand+0x206>
    10d2:	9e a7       	std	Y+46, r25	; 0x2e
    10d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    10d8:	98 a9       	ldd	r25, Y+48	; 0x30
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	98 ab       	std	Y+48, r25	; 0x30
    10de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    10e2:	98 a9       	ldd	r25, Y+48	; 0x30
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	69 f7       	brne	.-38     	; 0x10c2 <LCD_VidSendCommand+0x1fa>
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <LCD_VidSendCommand+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ea:	69 a9       	ldd	r22, Y+49	; 0x31
    10ec:	7a a9       	ldd	r23, Y+50	; 0x32
    10ee:	8b a9       	ldd	r24, Y+51	; 0x33
    10f0:	9c a9       	ldd	r25, Y+52	; 0x34
    10f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	98 ab       	std	Y+48, r25	; 0x30
    10fc:	8f a7       	std	Y+47, r24	; 0x2f
    10fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1100:	98 a9       	ldd	r25, Y+48	; 0x30
    1102:	9c a7       	std	Y+44, r25	; 0x2c
    1104:	8b a7       	std	Y+43, r24	; 0x2b
    1106:	8b a5       	ldd	r24, Y+43	; 0x2b
    1108:	9c a5       	ldd	r25, Y+44	; 0x2c
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <LCD_VidSendCommand+0x242>
    110e:	9c a7       	std	Y+44, r25	; 0x2c
    1110:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);

		LCD_VidPulseEnable();
    1112:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCD_VidPulseEnable>
    1116:	81 c1       	rjmp	.+770    	; 0x141a <LCD_VidSendCommand+0x552>
	}
	else if(mode == 4)
    1118:	fe 01       	movw	r30, r28
    111a:	e9 5b       	subi	r30, 0xB9	; 185
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	80 81       	ld	r24, Z
    1120:	84 30       	cpi	r24, 0x04	; 4
    1122:	09 f0       	breq	.+2      	; 0x1126 <LCD_VidSendCommand+0x25e>
    1124:	7a c1       	rjmp	.+756    	; 0x141a <LCD_VidSendCommand+0x552>
	{
		DIO_VidSetPinValue(LCD_CTRL_PORT,RS,0); /* Instruction Mode RS=0 */
    1126:	83 e0       	ldi	r24, 0x03	; 3
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	0e 94 86 14 	call	0x290c	; 0x290c <DIO_VidSetPinValue>
		DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);/* write data to LCD so RW=0 */
    1130:	83 e0       	ldi	r24, 0x03	; 3
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	0e 94 86 14 	call	0x290c	; 0x290c <DIO_VidSetPinValue>
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a0 e8       	ldi	r26, 0x80	; 128
    1140:	bf e3       	ldi	r27, 0x3F	; 63
    1142:	8f a3       	std	Y+39, r24	; 0x27
    1144:	98 a7       	std	Y+40, r25	; 0x28
    1146:	a9 a7       	std	Y+41, r26	; 0x29
    1148:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114a:	6f a1       	ldd	r22, Y+39	; 0x27
    114c:	78 a5       	ldd	r23, Y+40	; 0x28
    114e:	89 a5       	ldd	r24, Y+41	; 0x29
    1150:	9a a5       	ldd	r25, Y+42	; 0x2a
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	4a ef       	ldi	r20, 0xFA	; 250
    1158:	54 e4       	ldi	r21, 0x44	; 68
    115a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	8b a3       	std	Y+35, r24	; 0x23
    1164:	9c a3       	std	Y+36, r25	; 0x24
    1166:	ad a3       	std	Y+37, r26	; 0x25
    1168:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    116a:	6b a1       	ldd	r22, Y+35	; 0x23
    116c:	7c a1       	ldd	r23, Y+36	; 0x24
    116e:	8d a1       	ldd	r24, Y+37	; 0x25
    1170:	9e a1       	ldd	r25, Y+38	; 0x26
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	40 e8       	ldi	r20, 0x80	; 128
    1178:	5f e3       	ldi	r21, 0x3F	; 63
    117a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    117e:	88 23       	and	r24, r24
    1180:	2c f4       	brge	.+10     	; 0x118c <LCD_VidSendCommand+0x2c4>
		__ticks = 1;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	9a a3       	std	Y+34, r25	; 0x22
    1188:	89 a3       	std	Y+33, r24	; 0x21
    118a:	3f c0       	rjmp	.+126    	; 0x120a <LCD_VidSendCommand+0x342>
	else if (__tmp > 65535)
    118c:	6b a1       	ldd	r22, Y+35	; 0x23
    118e:	7c a1       	ldd	r23, Y+36	; 0x24
    1190:	8d a1       	ldd	r24, Y+37	; 0x25
    1192:	9e a1       	ldd	r25, Y+38	; 0x26
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	3f ef       	ldi	r19, 0xFF	; 255
    1198:	4f e7       	ldi	r20, 0x7F	; 127
    119a:	57 e4       	ldi	r21, 0x47	; 71
    119c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11a0:	18 16       	cp	r1, r24
    11a2:	4c f5       	brge	.+82     	; 0x11f6 <LCD_VidSendCommand+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a4:	6f a1       	ldd	r22, Y+39	; 0x27
    11a6:	78 a5       	ldd	r23, Y+40	; 0x28
    11a8:	89 a5       	ldd	r24, Y+41	; 0x29
    11aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e2       	ldi	r20, 0x20	; 32
    11b2:	51 e4       	ldi	r21, 0x41	; 65
    11b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	bc 01       	movw	r22, r24
    11be:	cd 01       	movw	r24, r26
    11c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	9a a3       	std	Y+34, r25	; 0x22
    11ca:	89 a3       	std	Y+33, r24	; 0x21
    11cc:	0f c0       	rjmp	.+30     	; 0x11ec <LCD_VidSendCommand+0x324>
    11ce:	88 ec       	ldi	r24, 0xC8	; 200
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	98 a3       	std	Y+32, r25	; 0x20
    11d4:	8f 8f       	std	Y+31, r24	; 0x1f
    11d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11d8:	98 a1       	ldd	r25, Y+32	; 0x20
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <LCD_VidSendCommand+0x312>
    11de:	98 a3       	std	Y+32, r25	; 0x20
    11e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e2:	89 a1       	ldd	r24, Y+33	; 0x21
    11e4:	9a a1       	ldd	r25, Y+34	; 0x22
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	9a a3       	std	Y+34, r25	; 0x22
    11ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ec:	89 a1       	ldd	r24, Y+33	; 0x21
    11ee:	9a a1       	ldd	r25, Y+34	; 0x22
    11f0:	00 97       	sbiw	r24, 0x00	; 0
    11f2:	69 f7       	brne	.-38     	; 0x11ce <LCD_VidSendCommand+0x306>
    11f4:	14 c0       	rjmp	.+40     	; 0x121e <LCD_VidSendCommand+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f6:	6b a1       	ldd	r22, Y+35	; 0x23
    11f8:	7c a1       	ldd	r23, Y+36	; 0x24
    11fa:	8d a1       	ldd	r24, Y+37	; 0x25
    11fc:	9e a1       	ldd	r25, Y+38	; 0x26
    11fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	9a a3       	std	Y+34, r25	; 0x22
    1208:	89 a3       	std	Y+33, r24	; 0x21
    120a:	89 a1       	ldd	r24, Y+33	; 0x21
    120c:	9a a1       	ldd	r25, Y+34	; 0x22
    120e:	9e 8f       	std	Y+30, r25	; 0x1e
    1210:	8d 8f       	std	Y+29, r24	; 0x1d
    1212:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1214:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	f1 f7       	brne	.-4      	; 0x1216 <LCD_VidSendCommand+0x34e>
    121a:	9e 8f       	std	Y+30, r25	; 0x1e
    121c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		//send MOST SIGNIFICANT 4-bits
		DIO_VidInsPortValue(LCD_DATA_PORT,LOC_u8command>>4,4,4); /* out the required command to the data bus D0 --> D7 */
    121e:	fe 01       	movw	r30, r28
    1220:	e8 5b       	subi	r30, 0xB8	; 184
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	80 81       	ld	r24, Z
    1226:	98 2f       	mov	r25, r24
    1228:	92 95       	swap	r25
    122a:	9f 70       	andi	r25, 0x0F	; 15
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	69 2f       	mov	r22, r25
    1230:	44 e0       	ldi	r20, 0x04	; 4
    1232:	24 e0       	ldi	r18, 0x04	; 4
    1234:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <DIO_VidInsPortValue>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	a0 e8       	ldi	r26, 0x80	; 128
    123e:	bf e3       	ldi	r27, 0x3F	; 63
    1240:	89 8f       	std	Y+25, r24	; 0x19
    1242:	9a 8f       	std	Y+26, r25	; 0x1a
    1244:	ab 8f       	std	Y+27, r26	; 0x1b
    1246:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1248:	69 8d       	ldd	r22, Y+25	; 0x19
    124a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    124c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    124e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	4a ef       	ldi	r20, 0xFA	; 250
    1256:	54 e4       	ldi	r21, 0x44	; 68
    1258:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	8d 8b       	std	Y+21, r24	; 0x15
    1262:	9e 8b       	std	Y+22, r25	; 0x16
    1264:	af 8b       	std	Y+23, r26	; 0x17
    1266:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1268:	6d 89       	ldd	r22, Y+21	; 0x15
    126a:	7e 89       	ldd	r23, Y+22	; 0x16
    126c:	8f 89       	ldd	r24, Y+23	; 0x17
    126e:	98 8d       	ldd	r25, Y+24	; 0x18
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e8       	ldi	r20, 0x80	; 128
    1276:	5f e3       	ldi	r21, 0x3F	; 63
    1278:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    127c:	88 23       	and	r24, r24
    127e:	2c f4       	brge	.+10     	; 0x128a <LCD_VidSendCommand+0x3c2>
		__ticks = 1;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	9c 8b       	std	Y+20, r25	; 0x14
    1286:	8b 8b       	std	Y+19, r24	; 0x13
    1288:	3f c0       	rjmp	.+126    	; 0x1308 <LCD_VidSendCommand+0x440>
	else if (__tmp > 65535)
    128a:	6d 89       	ldd	r22, Y+21	; 0x15
    128c:	7e 89       	ldd	r23, Y+22	; 0x16
    128e:	8f 89       	ldd	r24, Y+23	; 0x17
    1290:	98 8d       	ldd	r25, Y+24	; 0x18
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	3f ef       	ldi	r19, 0xFF	; 255
    1296:	4f e7       	ldi	r20, 0x7F	; 127
    1298:	57 e4       	ldi	r21, 0x47	; 71
    129a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    129e:	18 16       	cp	r1, r24
    12a0:	4c f5       	brge	.+82     	; 0x12f4 <LCD_VidSendCommand+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a2:	69 8d       	ldd	r22, Y+25	; 0x19
    12a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e2       	ldi	r20, 0x20	; 32
    12b0:	51 e4       	ldi	r21, 0x41	; 65
    12b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	bc 01       	movw	r22, r24
    12bc:	cd 01       	movw	r24, r26
    12be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	9c 8b       	std	Y+20, r25	; 0x14
    12c8:	8b 8b       	std	Y+19, r24	; 0x13
    12ca:	0f c0       	rjmp	.+30     	; 0x12ea <LCD_VidSendCommand+0x422>
    12cc:	88 ec       	ldi	r24, 0xC8	; 200
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	9a 8b       	std	Y+18, r25	; 0x12
    12d2:	89 8b       	std	Y+17, r24	; 0x11
    12d4:	89 89       	ldd	r24, Y+17	; 0x11
    12d6:	9a 89       	ldd	r25, Y+18	; 0x12
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <LCD_VidSendCommand+0x410>
    12dc:	9a 8b       	std	Y+18, r25	; 0x12
    12de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e0:	8b 89       	ldd	r24, Y+19	; 0x13
    12e2:	9c 89       	ldd	r25, Y+20	; 0x14
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	9c 8b       	std	Y+20, r25	; 0x14
    12e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ea:	8b 89       	ldd	r24, Y+19	; 0x13
    12ec:	9c 89       	ldd	r25, Y+20	; 0x14
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	69 f7       	brne	.-38     	; 0x12cc <LCD_VidSendCommand+0x404>
    12f2:	14 c0       	rjmp	.+40     	; 0x131c <LCD_VidSendCommand+0x454>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f4:	6d 89       	ldd	r22, Y+21	; 0x15
    12f6:	7e 89       	ldd	r23, Y+22	; 0x16
    12f8:	8f 89       	ldd	r24, Y+23	; 0x17
    12fa:	98 8d       	ldd	r25, Y+24	; 0x18
    12fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9c 8b       	std	Y+20, r25	; 0x14
    1306:	8b 8b       	std	Y+19, r24	; 0x13
    1308:	8b 89       	ldd	r24, Y+19	; 0x13
    130a:	9c 89       	ldd	r25, Y+20	; 0x14
    130c:	98 8b       	std	Y+16, r25	; 0x10
    130e:	8f 87       	std	Y+15, r24	; 0x0f
    1310:	8f 85       	ldd	r24, Y+15	; 0x0f
    1312:	98 89       	ldd	r25, Y+16	; 0x10
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <LCD_VidSendCommand+0x44c>
    1318:	98 8b       	std	Y+16, r25	; 0x10
    131a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		LCD_VidPulseEnable();
    131c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCD_VidPulseEnable>

		//send LEAST SIGNIFICANT 4-bits
		DIO_VidInsPortValue(LCD_DATA_PORT,LOC_u8command,4,4); /* out the required command to the data bus D0 --> D7 */
    1320:	fe 01       	movw	r30, r28
    1322:	e8 5b       	subi	r30, 0xB8	; 184
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	60 81       	ld	r22, Z
    132a:	44 e0       	ldi	r20, 0x04	; 4
    132c:	24 e0       	ldi	r18, 0x04	; 4
    132e:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <DIO_VidInsPortValue>
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	a0 e8       	ldi	r26, 0x80	; 128
    1338:	bf e3       	ldi	r27, 0x3F	; 63
    133a:	8b 87       	std	Y+11, r24	; 0x0b
    133c:	9c 87       	std	Y+12, r25	; 0x0c
    133e:	ad 87       	std	Y+13, r26	; 0x0d
    1340:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1342:	6b 85       	ldd	r22, Y+11	; 0x0b
    1344:	7c 85       	ldd	r23, Y+12	; 0x0c
    1346:	8d 85       	ldd	r24, Y+13	; 0x0d
    1348:	9e 85       	ldd	r25, Y+14	; 0x0e
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	4a ef       	ldi	r20, 0xFA	; 250
    1350:	54 e4       	ldi	r21, 0x44	; 68
    1352:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	8f 83       	std	Y+7, r24	; 0x07
    135c:	98 87       	std	Y+8, r25	; 0x08
    135e:	a9 87       	std	Y+9, r26	; 0x09
    1360:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1362:	6f 81       	ldd	r22, Y+7	; 0x07
    1364:	78 85       	ldd	r23, Y+8	; 0x08
    1366:	89 85       	ldd	r24, Y+9	; 0x09
    1368:	9a 85       	ldd	r25, Y+10	; 0x0a
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	5f e3       	ldi	r21, 0x3F	; 63
    1372:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1376:	88 23       	and	r24, r24
    1378:	2c f4       	brge	.+10     	; 0x1384 <LCD_VidSendCommand+0x4bc>
		__ticks = 1;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9e 83       	std	Y+6, r25	; 0x06
    1380:	8d 83       	std	Y+5, r24	; 0x05
    1382:	3f c0       	rjmp	.+126    	; 0x1402 <LCD_VidSendCommand+0x53a>
	else if (__tmp > 65535)
    1384:	6f 81       	ldd	r22, Y+7	; 0x07
    1386:	78 85       	ldd	r23, Y+8	; 0x08
    1388:	89 85       	ldd	r24, Y+9	; 0x09
    138a:	9a 85       	ldd	r25, Y+10	; 0x0a
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	3f ef       	ldi	r19, 0xFF	; 255
    1390:	4f e7       	ldi	r20, 0x7F	; 127
    1392:	57 e4       	ldi	r21, 0x47	; 71
    1394:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1398:	18 16       	cp	r1, r24
    139a:	4c f5       	brge	.+82     	; 0x13ee <LCD_VidSendCommand+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139c:	6b 85       	ldd	r22, Y+11	; 0x0b
    139e:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 e2       	ldi	r20, 0x20	; 32
    13aa:	51 e4       	ldi	r21, 0x41	; 65
    13ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	bc 01       	movw	r22, r24
    13b6:	cd 01       	movw	r24, r26
    13b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	0f c0       	rjmp	.+30     	; 0x13e4 <LCD_VidSendCommand+0x51c>
    13c6:	88 ec       	ldi	r24, 0xC8	; 200
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	9c 83       	std	Y+4, r25	; 0x04
    13cc:	8b 83       	std	Y+3, r24	; 0x03
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	f1 f7       	brne	.-4      	; 0x13d2 <LCD_VidSendCommand+0x50a>
    13d6:	9c 83       	std	Y+4, r25	; 0x04
    13d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	9e 83       	std	Y+6, r25	; 0x06
    13e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	9e 81       	ldd	r25, Y+6	; 0x06
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	69 f7       	brne	.-38     	; 0x13c6 <LCD_VidSendCommand+0x4fe>
    13ec:	14 c0       	rjmp	.+40     	; 0x1416 <LCD_VidSendCommand+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ee:	6f 81       	ldd	r22, Y+7	; 0x07
    13f0:	78 85       	ldd	r23, Y+8	; 0x08
    13f2:	89 85       	ldd	r24, Y+9	; 0x09
    13f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	8d 83       	std	Y+5, r24	; 0x05
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	9a 83       	std	Y+2, r25	; 0x02
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <LCD_VidSendCommand+0x546>
    1412:	9a 83       	std	Y+2, r25	; 0x02
    1414:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_VidPulseEnable();
    1416:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCD_VidPulseEnable>
	}



}
    141a:	c8 5b       	subi	r28, 0xB8	; 184
    141c:	df 4f       	sbci	r29, 0xFF	; 255
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <LCD_VidSendChar>:

void LCD_VidSendChar(u8 LOC_u8data)
{
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	c8 54       	subi	r28, 0x48	; 72
    1440:	d0 40       	sbci	r29, 0x00	; 0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	fe 01       	movw	r30, r28
    144e:	e8 5b       	subi	r30, 0xB8	; 184
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 83       	st	Z, r24
	u8 mode = MODE;
    1454:	fe 01       	movw	r30, r28
    1456:	e9 5b       	subi	r30, 0xB9	; 185
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	84 e0       	ldi	r24, 0x04	; 4
    145c:	80 83       	st	Z, r24

		if(mode == 8)
    145e:	fe 01       	movw	r30, r28
    1460:	e9 5b       	subi	r30, 0xB9	; 185
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	80 81       	ld	r24, Z
    1466:	88 30       	cpi	r24, 0x08	; 8
    1468:	09 f0       	breq	.+2      	; 0x146c <LCD_VidSendChar+0x3a>
    146a:	0b c1       	rjmp	.+534    	; 0x1682 <LCD_VidSendChar+0x250>
		{
			DIO_VidSetPinValue(LCD_CTRL_PORT,RS,1); /* Instruction Mode RS=0 */
    146c:	83 e0       	ldi	r24, 0x03	; 3
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	41 e0       	ldi	r20, 0x01	; 1
    1472:	0e 94 86 14 	call	0x290c	; 0x290c <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);/* write data to LCD so RW=0 */
    1476:	83 e0       	ldi	r24, 0x03	; 3
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	0e 94 86 14 	call	0x290c	; 0x290c <DIO_VidSetPinValue>
    1480:	fe 01       	movw	r30, r28
    1482:	ed 5b       	subi	r30, 0xBD	; 189
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a0 e8       	ldi	r26, 0x80	; 128
    148c:	bf e3       	ldi	r27, 0x3F	; 63
    148e:	80 83       	st	Z, r24
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	a2 83       	std	Z+2, r26	; 0x02
    1494:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1496:	8e 01       	movw	r16, r28
    1498:	01 5c       	subi	r16, 0xC1	; 193
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	fe 01       	movw	r30, r28
    149e:	ed 5b       	subi	r30, 0xBD	; 189
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	60 81       	ld	r22, Z
    14a4:	71 81       	ldd	r23, Z+1	; 0x01
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	4a ef       	ldi	r20, 0xFA	; 250
    14b0:	54 e4       	ldi	r21, 0x44	; 68
    14b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	f8 01       	movw	r30, r16
    14bc:	80 83       	st	Z, r24
    14be:	91 83       	std	Z+1, r25	; 0x01
    14c0:	a2 83       	std	Z+2, r26	; 0x02
    14c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14c4:	fe 01       	movw	r30, r28
    14c6:	ff 96       	adiw	r30, 0x3f	; 63
    14c8:	60 81       	ld	r22, Z
    14ca:	71 81       	ldd	r23, Z+1	; 0x01
    14cc:	82 81       	ldd	r24, Z+2	; 0x02
    14ce:	93 81       	ldd	r25, Z+3	; 0x03
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	40 e8       	ldi	r20, 0x80	; 128
    14d6:	5f e3       	ldi	r21, 0x3F	; 63
    14d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14dc:	88 23       	and	r24, r24
    14de:	2c f4       	brge	.+10     	; 0x14ea <LCD_VidSendChar+0xb8>
		__ticks = 1;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	9e af       	std	Y+62, r25	; 0x3e
    14e6:	8d af       	std	Y+61, r24	; 0x3d
    14e8:	46 c0       	rjmp	.+140    	; 0x1576 <LCD_VidSendChar+0x144>
	else if (__tmp > 65535)
    14ea:	fe 01       	movw	r30, r28
    14ec:	ff 96       	adiw	r30, 0x3f	; 63
    14ee:	60 81       	ld	r22, Z
    14f0:	71 81       	ldd	r23, Z+1	; 0x01
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	93 81       	ldd	r25, Z+3	; 0x03
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	3f ef       	ldi	r19, 0xFF	; 255
    14fa:	4f e7       	ldi	r20, 0x7F	; 127
    14fc:	57 e4       	ldi	r21, 0x47	; 71
    14fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1502:	18 16       	cp	r1, r24
    1504:	64 f5       	brge	.+88     	; 0x155e <LCD_VidSendChar+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1506:	fe 01       	movw	r30, r28
    1508:	ed 5b       	subi	r30, 0xBD	; 189
    150a:	ff 4f       	sbci	r31, 0xFF	; 255
    150c:	60 81       	ld	r22, Z
    150e:	71 81       	ldd	r23, Z+1	; 0x01
    1510:	82 81       	ldd	r24, Z+2	; 0x02
    1512:	93 81       	ldd	r25, Z+3	; 0x03
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	9e af       	std	Y+62, r25	; 0x3e
    1532:	8d af       	std	Y+61, r24	; 0x3d
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <LCD_VidSendChar+0x122>
    1536:	88 ec       	ldi	r24, 0xC8	; 200
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9c af       	std	Y+60, r25	; 0x3c
    153c:	8b af       	std	Y+59, r24	; 0x3b
    153e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1540:	9c ad       	ldd	r25, Y+60	; 0x3c
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_VidSendChar+0x110>
    1546:	9c af       	std	Y+60, r25	; 0x3c
    1548:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	8d ad       	ldd	r24, Y+61	; 0x3d
    154c:	9e ad       	ldd	r25, Y+62	; 0x3e
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	9e af       	std	Y+62, r25	; 0x3e
    1552:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1554:	8d ad       	ldd	r24, Y+61	; 0x3d
    1556:	9e ad       	ldd	r25, Y+62	; 0x3e
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	69 f7       	brne	.-38     	; 0x1536 <LCD_VidSendChar+0x104>
    155c:	16 c0       	rjmp	.+44     	; 0x158a <LCD_VidSendChar+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155e:	fe 01       	movw	r30, r28
    1560:	ff 96       	adiw	r30, 0x3f	; 63
    1562:	60 81       	ld	r22, Z
    1564:	71 81       	ldd	r23, Z+1	; 0x01
    1566:	82 81       	ldd	r24, Z+2	; 0x02
    1568:	93 81       	ldd	r25, Z+3	; 0x03
    156a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	9e af       	std	Y+62, r25	; 0x3e
    1574:	8d af       	std	Y+61, r24	; 0x3d
    1576:	8d ad       	ldd	r24, Y+61	; 0x3d
    1578:	9e ad       	ldd	r25, Y+62	; 0x3e
    157a:	9a af       	std	Y+58, r25	; 0x3a
    157c:	89 af       	std	Y+57, r24	; 0x39
    157e:	89 ad       	ldd	r24, Y+57	; 0x39
    1580:	9a ad       	ldd	r25, Y+58	; 0x3a
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <LCD_VidSendChar+0x150>
    1586:	9a af       	std	Y+58, r25	; 0x3a
    1588:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1);

			DIO_VidSetPortValue(LCD_DATA_PORT,LOC_u8data); /* out the required command to the data bus D0 --> D7 */
    158a:	fe 01       	movw	r30, r28
    158c:	e8 5b       	subi	r30, 0xB8	; 184
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	60 81       	ld	r22, Z
    1594:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <DIO_VidSetPortValue>
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a0 e8       	ldi	r26, 0x80	; 128
    159e:	bf e3       	ldi	r27, 0x3F	; 63
    15a0:	8d ab       	std	Y+53, r24	; 0x35
    15a2:	9e ab       	std	Y+54, r25	; 0x36
    15a4:	af ab       	std	Y+55, r26	; 0x37
    15a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a8:	6d a9       	ldd	r22, Y+53	; 0x35
    15aa:	7e a9       	ldd	r23, Y+54	; 0x36
    15ac:	8f a9       	ldd	r24, Y+55	; 0x37
    15ae:	98 ad       	ldd	r25, Y+56	; 0x38
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	4a ef       	ldi	r20, 0xFA	; 250
    15b6:	54 e4       	ldi	r21, 0x44	; 68
    15b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	89 ab       	std	Y+49, r24	; 0x31
    15c2:	9a ab       	std	Y+50, r25	; 0x32
    15c4:	ab ab       	std	Y+51, r26	; 0x33
    15c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15c8:	69 a9       	ldd	r22, Y+49	; 0x31
    15ca:	7a a9       	ldd	r23, Y+50	; 0x32
    15cc:	8b a9       	ldd	r24, Y+51	; 0x33
    15ce:	9c a9       	ldd	r25, Y+52	; 0x34
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e8       	ldi	r20, 0x80	; 128
    15d6:	5f e3       	ldi	r21, 0x3F	; 63
    15d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15dc:	88 23       	and	r24, r24
    15de:	2c f4       	brge	.+10     	; 0x15ea <LCD_VidSendChar+0x1b8>
		__ticks = 1;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	98 ab       	std	Y+48, r25	; 0x30
    15e6:	8f a7       	std	Y+47, r24	; 0x2f
    15e8:	3f c0       	rjmp	.+126    	; 0x1668 <LCD_VidSendChar+0x236>
	else if (__tmp > 65535)
    15ea:	69 a9       	ldd	r22, Y+49	; 0x31
    15ec:	7a a9       	ldd	r23, Y+50	; 0x32
    15ee:	8b a9       	ldd	r24, Y+51	; 0x33
    15f0:	9c a9       	ldd	r25, Y+52	; 0x34
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	3f ef       	ldi	r19, 0xFF	; 255
    15f6:	4f e7       	ldi	r20, 0x7F	; 127
    15f8:	57 e4       	ldi	r21, 0x47	; 71
    15fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15fe:	18 16       	cp	r1, r24
    1600:	4c f5       	brge	.+82     	; 0x1654 <LCD_VidSendChar+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1602:	6d a9       	ldd	r22, Y+53	; 0x35
    1604:	7e a9       	ldd	r23, Y+54	; 0x36
    1606:	8f a9       	ldd	r24, Y+55	; 0x37
    1608:	98 ad       	ldd	r25, Y+56	; 0x38
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e2       	ldi	r20, 0x20	; 32
    1610:	51 e4       	ldi	r21, 0x41	; 65
    1612:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	bc 01       	movw	r22, r24
    161c:	cd 01       	movw	r24, r26
    161e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	98 ab       	std	Y+48, r25	; 0x30
    1628:	8f a7       	std	Y+47, r24	; 0x2f
    162a:	0f c0       	rjmp	.+30     	; 0x164a <LCD_VidSendChar+0x218>
    162c:	88 ec       	ldi	r24, 0xC8	; 200
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	9e a7       	std	Y+46, r25	; 0x2e
    1632:	8d a7       	std	Y+45, r24	; 0x2d
    1634:	8d a5       	ldd	r24, Y+45	; 0x2d
    1636:	9e a5       	ldd	r25, Y+46	; 0x2e
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <LCD_VidSendChar+0x206>
    163c:	9e a7       	std	Y+46, r25	; 0x2e
    163e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1640:	8f a5       	ldd	r24, Y+47	; 0x2f
    1642:	98 a9       	ldd	r25, Y+48	; 0x30
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	98 ab       	std	Y+48, r25	; 0x30
    1648:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164a:	8f a5       	ldd	r24, Y+47	; 0x2f
    164c:	98 a9       	ldd	r25, Y+48	; 0x30
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	69 f7       	brne	.-38     	; 0x162c <LCD_VidSendChar+0x1fa>
    1652:	14 c0       	rjmp	.+40     	; 0x167c <LCD_VidSendChar+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1654:	69 a9       	ldd	r22, Y+49	; 0x31
    1656:	7a a9       	ldd	r23, Y+50	; 0x32
    1658:	8b a9       	ldd	r24, Y+51	; 0x33
    165a:	9c a9       	ldd	r25, Y+52	; 0x34
    165c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	98 ab       	std	Y+48, r25	; 0x30
    1666:	8f a7       	std	Y+47, r24	; 0x2f
    1668:	8f a5       	ldd	r24, Y+47	; 0x2f
    166a:	98 a9       	ldd	r25, Y+48	; 0x30
    166c:	9c a7       	std	Y+44, r25	; 0x2c
    166e:	8b a7       	std	Y+43, r24	; 0x2b
    1670:	8b a5       	ldd	r24, Y+43	; 0x2b
    1672:	9c a5       	ldd	r25, Y+44	; 0x2c
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <LCD_VidSendChar+0x242>
    1678:	9c a7       	std	Y+44, r25	; 0x2c
    167a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);

			LCD_VidPulseEnable();
    167c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCD_VidPulseEnable>
    1680:	81 c1       	rjmp	.+770    	; 0x1984 <LCD_VidSendChar+0x552>
		}
		else if(mode == 4)
    1682:	fe 01       	movw	r30, r28
    1684:	e9 5b       	subi	r30, 0xB9	; 185
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	80 81       	ld	r24, Z
    168a:	84 30       	cpi	r24, 0x04	; 4
    168c:	09 f0       	breq	.+2      	; 0x1690 <LCD_VidSendChar+0x25e>
    168e:	7a c1       	rjmp	.+756    	; 0x1984 <LCD_VidSendChar+0x552>
		{
			DIO_VidSetPinValue(LCD_CTRL_PORT,RS,1); /* Instruction Mode RS=0 */
    1690:	83 e0       	ldi	r24, 0x03	; 3
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	41 e0       	ldi	r20, 0x01	; 1
    1696:	0e 94 86 14 	call	0x290c	; 0x290c <DIO_VidSetPinValue>
			DIO_VidSetPinValue(LCD_CTRL_PORT,RW,0);/* write data to LCD so RW=0 */
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	61 e0       	ldi	r22, 0x01	; 1
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	0e 94 86 14 	call	0x290c	; 0x290c <DIO_VidSetPinValue>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	a0 e8       	ldi	r26, 0x80	; 128
    16aa:	bf e3       	ldi	r27, 0x3F	; 63
    16ac:	8f a3       	std	Y+39, r24	; 0x27
    16ae:	98 a7       	std	Y+40, r25	; 0x28
    16b0:	a9 a7       	std	Y+41, r26	; 0x29
    16b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b4:	6f a1       	ldd	r22, Y+39	; 0x27
    16b6:	78 a5       	ldd	r23, Y+40	; 0x28
    16b8:	89 a5       	ldd	r24, Y+41	; 0x29
    16ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	4a ef       	ldi	r20, 0xFA	; 250
    16c2:	54 e4       	ldi	r21, 0x44	; 68
    16c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8b a3       	std	Y+35, r24	; 0x23
    16ce:	9c a3       	std	Y+36, r25	; 0x24
    16d0:	ad a3       	std	Y+37, r26	; 0x25
    16d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16d4:	6b a1       	ldd	r22, Y+35	; 0x23
    16d6:	7c a1       	ldd	r23, Y+36	; 0x24
    16d8:	8d a1       	ldd	r24, Y+37	; 0x25
    16da:	9e a1       	ldd	r25, Y+38	; 0x26
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16e8:	88 23       	and	r24, r24
    16ea:	2c f4       	brge	.+10     	; 0x16f6 <LCD_VidSendChar+0x2c4>
		__ticks = 1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9a a3       	std	Y+34, r25	; 0x22
    16f2:	89 a3       	std	Y+33, r24	; 0x21
    16f4:	3f c0       	rjmp	.+126    	; 0x1774 <LCD_VidSendChar+0x342>
	else if (__tmp > 65535)
    16f6:	6b a1       	ldd	r22, Y+35	; 0x23
    16f8:	7c a1       	ldd	r23, Y+36	; 0x24
    16fa:	8d a1       	ldd	r24, Y+37	; 0x25
    16fc:	9e a1       	ldd	r25, Y+38	; 0x26
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	4f e7       	ldi	r20, 0x7F	; 127
    1704:	57 e4       	ldi	r21, 0x47	; 71
    1706:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    170a:	18 16       	cp	r1, r24
    170c:	4c f5       	brge	.+82     	; 0x1760 <LCD_VidSendChar+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170e:	6f a1       	ldd	r22, Y+39	; 0x27
    1710:	78 a5       	ldd	r23, Y+40	; 0x28
    1712:	89 a5       	ldd	r24, Y+41	; 0x29
    1714:	9a a5       	ldd	r25, Y+42	; 0x2a
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e2       	ldi	r20, 0x20	; 32
    171c:	51 e4       	ldi	r21, 0x41	; 65
    171e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	9a a3       	std	Y+34, r25	; 0x22
    1734:	89 a3       	std	Y+33, r24	; 0x21
    1736:	0f c0       	rjmp	.+30     	; 0x1756 <LCD_VidSendChar+0x324>
    1738:	88 ec       	ldi	r24, 0xC8	; 200
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	98 a3       	std	Y+32, r25	; 0x20
    173e:	8f 8f       	std	Y+31, r24	; 0x1f
    1740:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1742:	98 a1       	ldd	r25, Y+32	; 0x20
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <LCD_VidSendChar+0x312>
    1748:	98 a3       	std	Y+32, r25	; 0x20
    174a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174c:	89 a1       	ldd	r24, Y+33	; 0x21
    174e:	9a a1       	ldd	r25, Y+34	; 0x22
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	9a a3       	std	Y+34, r25	; 0x22
    1754:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1756:	89 a1       	ldd	r24, Y+33	; 0x21
    1758:	9a a1       	ldd	r25, Y+34	; 0x22
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	69 f7       	brne	.-38     	; 0x1738 <LCD_VidSendChar+0x306>
    175e:	14 c0       	rjmp	.+40     	; 0x1788 <LCD_VidSendChar+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1760:	6b a1       	ldd	r22, Y+35	; 0x23
    1762:	7c a1       	ldd	r23, Y+36	; 0x24
    1764:	8d a1       	ldd	r24, Y+37	; 0x25
    1766:	9e a1       	ldd	r25, Y+38	; 0x26
    1768:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	9a a3       	std	Y+34, r25	; 0x22
    1772:	89 a3       	std	Y+33, r24	; 0x21
    1774:	89 a1       	ldd	r24, Y+33	; 0x21
    1776:	9a a1       	ldd	r25, Y+34	; 0x22
    1778:	9e 8f       	std	Y+30, r25	; 0x1e
    177a:	8d 8f       	std	Y+29, r24	; 0x1d
    177c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    177e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <LCD_VidSendChar+0x34e>
    1784:	9e 8f       	std	Y+30, r25	; 0x1e
    1786:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);

			//send MOST SIGNIFICANT 4-bits
			DIO_VidInsPortValue(LCD_DATA_PORT,LOC_u8data>>4,4,4); /* out the required command to the data bus D0 --> D7 */
    1788:	fe 01       	movw	r30, r28
    178a:	e8 5b       	subi	r30, 0xB8	; 184
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	80 81       	ld	r24, Z
    1790:	98 2f       	mov	r25, r24
    1792:	92 95       	swap	r25
    1794:	9f 70       	andi	r25, 0x0F	; 15
    1796:	83 e0       	ldi	r24, 0x03	; 3
    1798:	69 2f       	mov	r22, r25
    179a:	44 e0       	ldi	r20, 0x04	; 4
    179c:	24 e0       	ldi	r18, 0x04	; 4
    179e:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <DIO_VidInsPortValue>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a0 e8       	ldi	r26, 0x80	; 128
    17a8:	bf e3       	ldi	r27, 0x3F	; 63
    17aa:	89 8f       	std	Y+25, r24	; 0x19
    17ac:	9a 8f       	std	Y+26, r25	; 0x1a
    17ae:	ab 8f       	std	Y+27, r26	; 0x1b
    17b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b2:	69 8d       	ldd	r22, Y+25	; 0x19
    17b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	4a ef       	ldi	r20, 0xFA	; 250
    17c0:	54 e4       	ldi	r21, 0x44	; 68
    17c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	8d 8b       	std	Y+21, r24	; 0x15
    17cc:	9e 8b       	std	Y+22, r25	; 0x16
    17ce:	af 8b       	std	Y+23, r26	; 0x17
    17d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17d2:	6d 89       	ldd	r22, Y+21	; 0x15
    17d4:	7e 89       	ldd	r23, Y+22	; 0x16
    17d6:	8f 89       	ldd	r24, Y+23	; 0x17
    17d8:	98 8d       	ldd	r25, Y+24	; 0x18
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e8       	ldi	r20, 0x80	; 128
    17e0:	5f e3       	ldi	r21, 0x3F	; 63
    17e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17e6:	88 23       	and	r24, r24
    17e8:	2c f4       	brge	.+10     	; 0x17f4 <LCD_VidSendChar+0x3c2>
		__ticks = 1;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	9c 8b       	std	Y+20, r25	; 0x14
    17f0:	8b 8b       	std	Y+19, r24	; 0x13
    17f2:	3f c0       	rjmp	.+126    	; 0x1872 <LCD_VidSendChar+0x440>
	else if (__tmp > 65535)
    17f4:	6d 89       	ldd	r22, Y+21	; 0x15
    17f6:	7e 89       	ldd	r23, Y+22	; 0x16
    17f8:	8f 89       	ldd	r24, Y+23	; 0x17
    17fa:	98 8d       	ldd	r25, Y+24	; 0x18
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	3f ef       	ldi	r19, 0xFF	; 255
    1800:	4f e7       	ldi	r20, 0x7F	; 127
    1802:	57 e4       	ldi	r21, 0x47	; 71
    1804:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1808:	18 16       	cp	r1, r24
    180a:	4c f5       	brge	.+82     	; 0x185e <LCD_VidSendChar+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180c:	69 8d       	ldd	r22, Y+25	; 0x19
    180e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1810:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1812:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e2       	ldi	r20, 0x20	; 32
    181a:	51 e4       	ldi	r21, 0x41	; 65
    181c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	bc 01       	movw	r22, r24
    1826:	cd 01       	movw	r24, r26
    1828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9c 8b       	std	Y+20, r25	; 0x14
    1832:	8b 8b       	std	Y+19, r24	; 0x13
    1834:	0f c0       	rjmp	.+30     	; 0x1854 <LCD_VidSendChar+0x422>
    1836:	88 ec       	ldi	r24, 0xC8	; 200
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	9a 8b       	std	Y+18, r25	; 0x12
    183c:	89 8b       	std	Y+17, r24	; 0x11
    183e:	89 89       	ldd	r24, Y+17	; 0x11
    1840:	9a 89       	ldd	r25, Y+18	; 0x12
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <LCD_VidSendChar+0x410>
    1846:	9a 8b       	std	Y+18, r25	; 0x12
    1848:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184a:	8b 89       	ldd	r24, Y+19	; 0x13
    184c:	9c 89       	ldd	r25, Y+20	; 0x14
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	9c 8b       	std	Y+20, r25	; 0x14
    1852:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1854:	8b 89       	ldd	r24, Y+19	; 0x13
    1856:	9c 89       	ldd	r25, Y+20	; 0x14
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	69 f7       	brne	.-38     	; 0x1836 <LCD_VidSendChar+0x404>
    185c:	14 c0       	rjmp	.+40     	; 0x1886 <LCD_VidSendChar+0x454>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185e:	6d 89       	ldd	r22, Y+21	; 0x15
    1860:	7e 89       	ldd	r23, Y+22	; 0x16
    1862:	8f 89       	ldd	r24, Y+23	; 0x17
    1864:	98 8d       	ldd	r25, Y+24	; 0x18
    1866:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9c 8b       	std	Y+20, r25	; 0x14
    1870:	8b 8b       	std	Y+19, r24	; 0x13
    1872:	8b 89       	ldd	r24, Y+19	; 0x13
    1874:	9c 89       	ldd	r25, Y+20	; 0x14
    1876:	98 8b       	std	Y+16, r25	; 0x10
    1878:	8f 87       	std	Y+15, r24	; 0x0f
    187a:	8f 85       	ldd	r24, Y+15	; 0x0f
    187c:	98 89       	ldd	r25, Y+16	; 0x10
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <LCD_VidSendChar+0x44c>
    1882:	98 8b       	std	Y+16, r25	; 0x10
    1884:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1);
			LCD_VidPulseEnable();
    1886:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCD_VidPulseEnable>

			//send LEAST SIGNIFICANT 4-bits
			DIO_VidInsPortValue(LCD_DATA_PORT,LOC_u8data,4,4); /* out the required command to the data bus D0 --> D7 */
    188a:	fe 01       	movw	r30, r28
    188c:	e8 5b       	subi	r30, 0xB8	; 184
    188e:	ff 4f       	sbci	r31, 0xFF	; 255
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	60 81       	ld	r22, Z
    1894:	44 e0       	ldi	r20, 0x04	; 4
    1896:	24 e0       	ldi	r18, 0x04	; 4
    1898:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <DIO_VidInsPortValue>
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a0 e8       	ldi	r26, 0x80	; 128
    18a2:	bf e3       	ldi	r27, 0x3F	; 63
    18a4:	8b 87       	std	Y+11, r24	; 0x0b
    18a6:	9c 87       	std	Y+12, r25	; 0x0c
    18a8:	ad 87       	std	Y+13, r26	; 0x0d
    18aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	4a ef       	ldi	r20, 0xFA	; 250
    18ba:	54 e4       	ldi	r21, 0x44	; 68
    18bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	8f 83       	std	Y+7, r24	; 0x07
    18c6:	98 87       	std	Y+8, r25	; 0x08
    18c8:	a9 87       	std	Y+9, r26	; 0x09
    18ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18cc:	6f 81       	ldd	r22, Y+7	; 0x07
    18ce:	78 85       	ldd	r23, Y+8	; 0x08
    18d0:	89 85       	ldd	r24, Y+9	; 0x09
    18d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 e8       	ldi	r20, 0x80	; 128
    18da:	5f e3       	ldi	r21, 0x3F	; 63
    18dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18e0:	88 23       	and	r24, r24
    18e2:	2c f4       	brge	.+10     	; 0x18ee <LCD_VidSendChar+0x4bc>
		__ticks = 1;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9e 83       	std	Y+6, r25	; 0x06
    18ea:	8d 83       	std	Y+5, r24	; 0x05
    18ec:	3f c0       	rjmp	.+126    	; 0x196c <LCD_VidSendChar+0x53a>
	else if (__tmp > 65535)
    18ee:	6f 81       	ldd	r22, Y+7	; 0x07
    18f0:	78 85       	ldd	r23, Y+8	; 0x08
    18f2:	89 85       	ldd	r24, Y+9	; 0x09
    18f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	3f ef       	ldi	r19, 0xFF	; 255
    18fa:	4f e7       	ldi	r20, 0x7F	; 127
    18fc:	57 e4       	ldi	r21, 0x47	; 71
    18fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1902:	18 16       	cp	r1, r24
    1904:	4c f5       	brge	.+82     	; 0x1958 <LCD_VidSendChar+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1906:	6b 85       	ldd	r22, Y+11	; 0x0b
    1908:	7c 85       	ldd	r23, Y+12	; 0x0c
    190a:	8d 85       	ldd	r24, Y+13	; 0x0d
    190c:	9e 85       	ldd	r25, Y+14	; 0x0e
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e2       	ldi	r20, 0x20	; 32
    1914:	51 e4       	ldi	r21, 0x41	; 65
    1916:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	9e 83       	std	Y+6, r25	; 0x06
    192c:	8d 83       	std	Y+5, r24	; 0x05
    192e:	0f c0       	rjmp	.+30     	; 0x194e <LCD_VidSendChar+0x51c>
    1930:	88 ec       	ldi	r24, 0xC8	; 200
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9c 83       	std	Y+4, r25	; 0x04
    1936:	8b 83       	std	Y+3, r24	; 0x03
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_VidSendChar+0x50a>
    1940:	9c 83       	std	Y+4, r25	; 0x04
    1942:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	9e 83       	std	Y+6, r25	; 0x06
    194c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194e:	8d 81       	ldd	r24, Y+5	; 0x05
    1950:	9e 81       	ldd	r25, Y+6	; 0x06
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	69 f7       	brne	.-38     	; 0x1930 <LCD_VidSendChar+0x4fe>
    1956:	14 c0       	rjmp	.+40     	; 0x1980 <LCD_VidSendChar+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1958:	6f 81       	ldd	r22, Y+7	; 0x07
    195a:	78 85       	ldd	r23, Y+8	; 0x08
    195c:	89 85       	ldd	r24, Y+9	; 0x09
    195e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1960:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	9e 83       	std	Y+6, r25	; 0x06
    196a:	8d 83       	std	Y+5, r24	; 0x05
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
    196e:	9e 81       	ldd	r25, Y+6	; 0x06
    1970:	9a 83       	std	Y+2, r25	; 0x02
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <LCD_VidSendChar+0x546>
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
			LCD_VidPulseEnable();
    1980:	0e 94 63 06 	call	0xcc6	; 0xcc6 <LCD_VidPulseEnable>
}



}
    1984:	c8 5b       	subi	r28, 0xB8	; 184
    1986:	df 4f       	sbci	r29, 0xFF	; 255
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	08 95       	ret

0000199c <LCD_VidInit>:

void LCD_VidInit(void)
{
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	c5 55       	subi	r28, 0x55	; 85
    19aa:	d0 40       	sbci	r29, 0x00	; 0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
	u8 mode = MODE ;
    19b6:	fe 01       	movw	r30, r28
    19b8:	eb 5a       	subi	r30, 0xAB	; 171
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	84 e0       	ldi	r24, 0x04	; 4
    19be:	80 83       	st	Z, r24
    19c0:	fe 01       	movw	r30, r28
    19c2:	ef 5a       	subi	r30, 0xAF	; 175
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	a8 e4       	ldi	r26, 0x48	; 72
    19cc:	b2 e4       	ldi	r27, 0x42	; 66
    19ce:	80 83       	st	Z, r24
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	a2 83       	std	Z+2, r26	; 0x02
    19d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d6:	8e 01       	movw	r16, r28
    19d8:	03 5b       	subi	r16, 0xB3	; 179
    19da:	1f 4f       	sbci	r17, 0xFF	; 255
    19dc:	fe 01       	movw	r30, r28
    19de:	ef 5a       	subi	r30, 0xAF	; 175
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	60 81       	ld	r22, Z
    19e4:	71 81       	ldd	r23, Z+1	; 0x01
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a ef       	ldi	r20, 0xFA	; 250
    19f0:	54 e4       	ldi	r21, 0x44	; 68
    19f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	f8 01       	movw	r30, r16
    19fc:	80 83       	st	Z, r24
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	a2 83       	std	Z+2, r26	; 0x02
    1a02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a04:	fe 01       	movw	r30, r28
    1a06:	e3 5b       	subi	r30, 0xB3	; 179
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	60 81       	ld	r22, Z
    1a0c:	71 81       	ldd	r23, Z+1	; 0x01
    1a0e:	82 81       	ldd	r24, Z+2	; 0x02
    1a10:	93 81       	ldd	r25, Z+3	; 0x03
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e8       	ldi	r20, 0x80	; 128
    1a18:	5f e3       	ldi	r21, 0x3F	; 63
    1a1a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a1e:	88 23       	and	r24, r24
    1a20:	44 f4       	brge	.+16     	; 0x1a32 <LCD_VidInit+0x96>
		__ticks = 1;
    1a22:	fe 01       	movw	r30, r28
    1a24:	e5 5b       	subi	r30, 0xB5	; 181
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	80 83       	st	Z, r24
    1a30:	64 c0       	rjmp	.+200    	; 0x1afa <LCD_VidInit+0x15e>
	else if (__tmp > 65535)
    1a32:	fe 01       	movw	r30, r28
    1a34:	e3 5b       	subi	r30, 0xB3	; 179
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	3f ef       	ldi	r19, 0xFF	; 255
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	57 e4       	ldi	r21, 0x47	; 71
    1a48:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	0c f0       	brlt	.+2      	; 0x1a52 <LCD_VidInit+0xb6>
    1a50:	43 c0       	rjmp	.+134    	; 0x1ad8 <LCD_VidInit+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a52:	fe 01       	movw	r30, r28
    1a54:	ef 5a       	subi	r30, 0xAF	; 175
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e2       	ldi	r20, 0x20	; 32
    1a66:	51 e4       	ldi	r21, 0x41	; 65
    1a68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8e 01       	movw	r16, r28
    1a72:	05 5b       	subi	r16, 0xB5	; 181
    1a74:	1f 4f       	sbci	r17, 0xFF	; 255
    1a76:	bc 01       	movw	r22, r24
    1a78:	cd 01       	movw	r24, r26
    1a7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	f8 01       	movw	r30, r16
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
    1a88:	1f c0       	rjmp	.+62     	; 0x1ac8 <LCD_VidInit+0x12c>
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e7 5b       	subi	r30, 0xB7	; 183
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	88 ec       	ldi	r24, 0xC8	; 200
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	80 83       	st	Z, r24
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e7 5b       	subi	r30, 0xB7	; 183
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 81       	ld	r24, Z
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <LCD_VidInit+0x106>
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e7 5b       	subi	r30, 0xB7	; 183
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	de 01       	movw	r26, r28
    1ab2:	a5 5b       	subi	r26, 0xB5	; 181
    1ab4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e5 5b       	subi	r30, 0xB5	; 181
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	11 96       	adiw	r26, 0x01	; 1
    1ac4:	9c 93       	st	X, r25
    1ac6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e5 5b       	subi	r30, 0xB5	; 181
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 81       	ld	r24, Z
    1ad0:	91 81       	ldd	r25, Z+1	; 0x01
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	d1 f6       	brne	.-76     	; 0x1a8a <LCD_VidInit+0xee>
    1ad6:	27 c0       	rjmp	.+78     	; 0x1b26 <LCD_VidInit+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad8:	8e 01       	movw	r16, r28
    1ada:	05 5b       	subi	r16, 0xB5	; 181
    1adc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e3 5b       	subi	r30, 0xB3	; 179
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	f8 01       	movw	r30, r16
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	80 83       	st	Z, r24
    1afa:	de 01       	movw	r26, r28
    1afc:	a9 5b       	subi	r26, 0xB9	; 185
    1afe:	bf 4f       	sbci	r27, 0xFF	; 255
    1b00:	fe 01       	movw	r30, r28
    1b02:	e5 5b       	subi	r30, 0xB5	; 181
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	8d 93       	st	X+, r24
    1b0c:	9c 93       	st	X, r25
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e9 5b       	subi	r30, 0xB9	; 185
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	80 81       	ld	r24, Z
    1b16:	91 81       	ldd	r25, Z+1	; 0x01
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <LCD_VidInit+0x17c>
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	e9 5b       	subi	r30, 0xB9	; 185
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	80 83       	st	Z, r24
	_delay_ms(50) ;
	 /* Configure the control pins(E,RS,RW) as output pins */
	DIO_VidSetPinDirection(LCD_CTRL_PORT,RS,1);
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	0e 94 86 13 	call	0x270c	; 0x270c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CTRL_PORT,RW,1);
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	61 e0       	ldi	r22, 0x01	; 1
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 86 13 	call	0x270c	; 0x270c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_CTRL_PORT,EN,1);
    1b3a:	83 e0       	ldi	r24, 0x03	; 3
    1b3c:	62 e0       	ldi	r22, 0x02	; 2
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 86 13 	call	0x270c	; 0x270c <DIO_VidSetPinDirection>
    1b44:	fe 01       	movw	r30, r28
    1b46:	ed 5b       	subi	r30, 0xBD	; 189
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	a0 e8       	ldi	r26, 0x80	; 128
    1b50:	bf e3       	ldi	r27, 0x3F	; 63
    1b52:	80 83       	st	Z, r24
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	a2 83       	std	Z+2, r26	; 0x02
    1b58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5a:	8e 01       	movw	r16, r28
    1b5c:	01 5c       	subi	r16, 0xC1	; 193
    1b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b60:	fe 01       	movw	r30, r28
    1b62:	ed 5b       	subi	r30, 0xBD	; 189
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	60 81       	ld	r22, Z
    1b68:	71 81       	ldd	r23, Z+1	; 0x01
    1b6a:	82 81       	ldd	r24, Z+2	; 0x02
    1b6c:	93 81       	ldd	r25, Z+3	; 0x03
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	4a ef       	ldi	r20, 0xFA	; 250
    1b74:	54 e4       	ldi	r21, 0x44	; 68
    1b76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	f8 01       	movw	r30, r16
    1b80:	80 83       	st	Z, r24
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	a2 83       	std	Z+2, r26	; 0x02
    1b86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b88:	fe 01       	movw	r30, r28
    1b8a:	ff 96       	adiw	r30, 0x3f	; 63
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e8       	ldi	r20, 0x80	; 128
    1b9a:	5f e3       	ldi	r21, 0x3F	; 63
    1b9c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ba0:	88 23       	and	r24, r24
    1ba2:	2c f4       	brge	.+10     	; 0x1bae <LCD_VidInit+0x212>
		__ticks = 1;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9e af       	std	Y+62, r25	; 0x3e
    1baa:	8d af       	std	Y+61, r24	; 0x3d
    1bac:	46 c0       	rjmp	.+140    	; 0x1c3a <LCD_VidInit+0x29e>
	else if (__tmp > 65535)
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ff 96       	adiw	r30, 0x3f	; 63
    1bb2:	60 81       	ld	r22, Z
    1bb4:	71 81       	ldd	r23, Z+1	; 0x01
    1bb6:	82 81       	ldd	r24, Z+2	; 0x02
    1bb8:	93 81       	ldd	r25, Z+3	; 0x03
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	3f ef       	ldi	r19, 0xFF	; 255
    1bbe:	4f e7       	ldi	r20, 0x7F	; 127
    1bc0:	57 e4       	ldi	r21, 0x47	; 71
    1bc2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bc6:	18 16       	cp	r1, r24
    1bc8:	64 f5       	brge	.+88     	; 0x1c22 <LCD_VidInit+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bca:	fe 01       	movw	r30, r28
    1bcc:	ed 5b       	subi	r30, 0xBD	; 189
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	60 81       	ld	r22, Z
    1bd2:	71 81       	ldd	r23, Z+1	; 0x01
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e2       	ldi	r20, 0x20	; 32
    1bde:	51 e4       	ldi	r21, 0x41	; 65
    1be0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9e af       	std	Y+62, r25	; 0x3e
    1bf6:	8d af       	std	Y+61, r24	; 0x3d
    1bf8:	0f c0       	rjmp	.+30     	; 0x1c18 <LCD_VidInit+0x27c>
    1bfa:	88 ec       	ldi	r24, 0xC8	; 200
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	9c af       	std	Y+60, r25	; 0x3c
    1c00:	8b af       	std	Y+59, r24	; 0x3b
    1c02:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c04:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <LCD_VidInit+0x26a>
    1c0a:	9c af       	std	Y+60, r25	; 0x3c
    1c0c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c10:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	9e af       	std	Y+62, r25	; 0x3e
    1c16:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c18:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	69 f7       	brne	.-38     	; 0x1bfa <LCD_VidInit+0x25e>
    1c20:	16 c0       	rjmp	.+44     	; 0x1c4e <LCD_VidInit+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c22:	fe 01       	movw	r30, r28
    1c24:	ff 96       	adiw	r30, 0x3f	; 63
    1c26:	60 81       	ld	r22, Z
    1c28:	71 81       	ldd	r23, Z+1	; 0x01
    1c2a:	82 81       	ldd	r24, Z+2	; 0x02
    1c2c:	93 81       	ldd	r25, Z+3	; 0x03
    1c2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9e af       	std	Y+62, r25	; 0x3e
    1c38:	8d af       	std	Y+61, r24	; 0x3d
    1c3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c3e:	9a af       	std	Y+58, r25	; 0x3a
    1c40:	89 af       	std	Y+57, r24	; 0x39
    1c42:	89 ad       	ldd	r24, Y+57	; 0x39
    1c44:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <LCD_VidInit+0x2aa>
    1c4a:	9a af       	std	Y+58, r25	; 0x3a
    1c4c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);

	if(mode == 8)
    1c4e:	fe 01       	movw	r30, r28
    1c50:	eb 5a       	subi	r30, 0xAB	; 171
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	80 81       	ld	r24, Z
    1c56:	88 30       	cpi	r24, 0x08	; 8
    1c58:	09 f0       	breq	.+2      	; 0x1c5c <LCD_VidInit+0x2c0>
    1c5a:	67 c1       	rjmp	.+718    	; 0x1f2a <LCD_VidInit+0x58e>
	{
		DIO_VidSetPortDirection(LCD_DATA_PORT,0xFF); /* Configure the data port as output port */
    1c5c:	83 e0       	ldi	r24, 0x03	; 3
    1c5e:	6f ef       	ldi	r22, 0xFF	; 255
    1c60:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <DIO_VidSetPortDirection>
		LCD_VidSendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1c64:	88 e3       	ldi	r24, 0x38	; 56
    1c66:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a0 e8       	ldi	r26, 0x80	; 128
    1c70:	bf e3       	ldi	r27, 0x3F	; 63
    1c72:	8d ab       	std	Y+53, r24	; 0x35
    1c74:	9e ab       	std	Y+54, r25	; 0x36
    1c76:	af ab       	std	Y+55, r26	; 0x37
    1c78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c7c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c7e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c80:	98 ad       	ldd	r25, Y+56	; 0x38
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	4a ef       	ldi	r20, 0xFA	; 250
    1c88:	54 e4       	ldi	r21, 0x44	; 68
    1c8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	89 ab       	std	Y+49, r24	; 0x31
    1c94:	9a ab       	std	Y+50, r25	; 0x32
    1c96:	ab ab       	std	Y+51, r26	; 0x33
    1c98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e8       	ldi	r20, 0x80	; 128
    1ca8:	5f e3       	ldi	r21, 0x3F	; 63
    1caa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cae:	88 23       	and	r24, r24
    1cb0:	2c f4       	brge	.+10     	; 0x1cbc <LCD_VidInit+0x320>
		__ticks = 1;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	98 ab       	std	Y+48, r25	; 0x30
    1cb8:	8f a7       	std	Y+47, r24	; 0x2f
    1cba:	3f c0       	rjmp	.+126    	; 0x1d3a <LCD_VidInit+0x39e>
	else if (__tmp > 65535)
    1cbc:	69 a9       	ldd	r22, Y+49	; 0x31
    1cbe:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc0:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc2:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	3f ef       	ldi	r19, 0xFF	; 255
    1cc8:	4f e7       	ldi	r20, 0x7F	; 127
    1cca:	57 e4       	ldi	r21, 0x47	; 71
    1ccc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cd0:	18 16       	cp	r1, r24
    1cd2:	4c f5       	brge	.+82     	; 0x1d26 <LCD_VidInit+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd4:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd6:	7e a9       	ldd	r23, Y+54	; 0x36
    1cd8:	8f a9       	ldd	r24, Y+55	; 0x37
    1cda:	98 ad       	ldd	r25, Y+56	; 0x38
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e2       	ldi	r20, 0x20	; 32
    1ce2:	51 e4       	ldi	r21, 0x41	; 65
    1ce4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	98 ab       	std	Y+48, r25	; 0x30
    1cfa:	8f a7       	std	Y+47, r24	; 0x2f
    1cfc:	0f c0       	rjmp	.+30     	; 0x1d1c <LCD_VidInit+0x380>
    1cfe:	88 ec       	ldi	r24, 0xC8	; 200
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9e a7       	std	Y+46, r25	; 0x2e
    1d04:	8d a7       	std	Y+45, r24	; 0x2d
    1d06:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d08:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <LCD_VidInit+0x36e>
    1d0e:	9e a7       	std	Y+46, r25	; 0x2e
    1d10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d14:	98 a9       	ldd	r25, Y+48	; 0x30
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	98 ab       	std	Y+48, r25	; 0x30
    1d1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	69 f7       	brne	.-38     	; 0x1cfe <LCD_VidInit+0x362>
    1d24:	14 c0       	rjmp	.+40     	; 0x1d4e <LCD_VidInit+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d26:	69 a9       	ldd	r22, Y+49	; 0x31
    1d28:	7a a9       	ldd	r23, Y+50	; 0x32
    1d2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	98 ab       	std	Y+48, r25	; 0x30
    1d38:	8f a7       	std	Y+47, r24	; 0x2f
    1d3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3e:	9c a7       	std	Y+44, r25	; 0x2c
    1d40:	8b a7       	std	Y+43, r24	; 0x2b
    1d42:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d44:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <LCD_VidInit+0x3aa>
    1d4a:	9c a7       	std	Y+44, r25	; 0x2c
    1d4c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		LCD_VidSendCommand(DIPLAY_ON); /* cursor off */
    1d4e:	8e e0       	ldi	r24, 0x0E	; 14
    1d50:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 e8       	ldi	r26, 0x80	; 128
    1d5a:	bf e3       	ldi	r27, 0x3F	; 63
    1d5c:	8f a3       	std	Y+39, r24	; 0x27
    1d5e:	98 a7       	std	Y+40, r25	; 0x28
    1d60:	a9 a7       	std	Y+41, r26	; 0x29
    1d62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	6f a1       	ldd	r22, Y+39	; 0x27
    1d66:	78 a5       	ldd	r23, Y+40	; 0x28
    1d68:	89 a5       	ldd	r24, Y+41	; 0x29
    1d6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a ef       	ldi	r20, 0xFA	; 250
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8b a3       	std	Y+35, r24	; 0x23
    1d7e:	9c a3       	std	Y+36, r25	; 0x24
    1d80:	ad a3       	std	Y+37, r26	; 0x25
    1d82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d84:	6b a1       	ldd	r22, Y+35	; 0x23
    1d86:	7c a1       	ldd	r23, Y+36	; 0x24
    1d88:	8d a1       	ldd	r24, Y+37	; 0x25
    1d8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <LCD_VidInit+0x40a>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9a a3       	std	Y+34, r25	; 0x22
    1da2:	89 a3       	std	Y+33, r24	; 0x21
    1da4:	3f c0       	rjmp	.+126    	; 0x1e24 <LCD_VidInit+0x488>
	else if (__tmp > 65535)
    1da6:	6b a1       	ldd	r22, Y+35	; 0x23
    1da8:	7c a1       	ldd	r23, Y+36	; 0x24
    1daa:	8d a1       	ldd	r24, Y+37	; 0x25
    1dac:	9e a1       	ldd	r25, Y+38	; 0x26
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	4c f5       	brge	.+82     	; 0x1e10 <LCD_VidInit+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	6f a1       	ldd	r22, Y+39	; 0x27
    1dc0:	78 a5       	ldd	r23, Y+40	; 0x28
    1dc2:	89 a5       	ldd	r24, Y+41	; 0x29
    1dc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9a a3       	std	Y+34, r25	; 0x22
    1de4:	89 a3       	std	Y+33, r24	; 0x21
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <LCD_VidInit+0x46a>
    1de8:	88 ec       	ldi	r24, 0xC8	; 200
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	98 a3       	std	Y+32, r25	; 0x20
    1dee:	8f 8f       	std	Y+31, r24	; 0x1f
    1df0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1df2:	98 a1       	ldd	r25, Y+32	; 0x20
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_VidInit+0x458>
    1df8:	98 a3       	std	Y+32, r25	; 0x20
    1dfa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	89 a1       	ldd	r24, Y+33	; 0x21
    1dfe:	9a a1       	ldd	r25, Y+34	; 0x22
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	9a a3       	std	Y+34, r25	; 0x22
    1e04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	89 a1       	ldd	r24, Y+33	; 0x21
    1e08:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <LCD_VidInit+0x44c>
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <LCD_VidInit+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	6b a1       	ldd	r22, Y+35	; 0x23
    1e12:	7c a1       	ldd	r23, Y+36	; 0x24
    1e14:	8d a1       	ldd	r24, Y+37	; 0x25
    1e16:	9e a1       	ldd	r25, Y+38	; 0x26
    1e18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9a a3       	std	Y+34, r25	; 0x22
    1e22:	89 a3       	std	Y+33, r24	; 0x21
    1e24:	89 a1       	ldd	r24, Y+33	; 0x21
    1e26:	9a a1       	ldd	r25, Y+34	; 0x22
    1e28:	9e 8f       	std	Y+30, r25	; 0x1e
    1e2a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_VidInit+0x494>
    1e34:	9e 8f       	std	Y+30, r25	; 0x1e
    1e36:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		LCD_VidSendCommand(0x07); //Entry mode set-see page(17)
    1e38:	87 e0       	ldi	r24, 0x07	; 7
    1e3a:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>
		LCD_VidSendCommand(CLEAR_DISPLAY); /* clear LCD at the beginning */
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	a0 e8       	ldi	r26, 0x80	; 128
    1e4a:	bf e3       	ldi	r27, 0x3F	; 63
    1e4c:	89 8f       	std	Y+25, r24	; 0x19
    1e4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e50:	ab 8f       	std	Y+27, r26	; 0x1b
    1e52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e54:	69 8d       	ldd	r22, Y+25	; 0x19
    1e56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	4a ef       	ldi	r20, 0xFA	; 250
    1e62:	54 e4       	ldi	r21, 0x44	; 68
    1e64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	8d 8b       	std	Y+21, r24	; 0x15
    1e6e:	9e 8b       	std	Y+22, r25	; 0x16
    1e70:	af 8b       	std	Y+23, r26	; 0x17
    1e72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e74:	6d 89       	ldd	r22, Y+21	; 0x15
    1e76:	7e 89       	ldd	r23, Y+22	; 0x16
    1e78:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e8       	ldi	r20, 0x80	; 128
    1e82:	5f e3       	ldi	r21, 0x3F	; 63
    1e84:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e88:	88 23       	and	r24, r24
    1e8a:	2c f4       	brge	.+10     	; 0x1e96 <LCD_VidInit+0x4fa>
		__ticks = 1;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9c 8b       	std	Y+20, r25	; 0x14
    1e92:	8b 8b       	std	Y+19, r24	; 0x13
    1e94:	3f c0       	rjmp	.+126    	; 0x1f14 <LCD_VidInit+0x578>
	else if (__tmp > 65535)
    1e96:	6d 89       	ldd	r22, Y+21	; 0x15
    1e98:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	3f ef       	ldi	r19, 0xFF	; 255
    1ea2:	4f e7       	ldi	r20, 0x7F	; 127
    1ea4:	57 e4       	ldi	r21, 0x47	; 71
    1ea6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eaa:	18 16       	cp	r1, r24
    1eac:	4c f5       	brge	.+82     	; 0x1f00 <LCD_VidInit+0x564>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eae:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e2       	ldi	r20, 0x20	; 32
    1ebc:	51 e4       	ldi	r21, 0x41	; 65
    1ebe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	bc 01       	movw	r22, r24
    1ec8:	cd 01       	movw	r24, r26
    1eca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	9c 8b       	std	Y+20, r25	; 0x14
    1ed4:	8b 8b       	std	Y+19, r24	; 0x13
    1ed6:	0f c0       	rjmp	.+30     	; 0x1ef6 <LCD_VidInit+0x55a>
    1ed8:	88 ec       	ldi	r24, 0xC8	; 200
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	9a 8b       	std	Y+18, r25	; 0x12
    1ede:	89 8b       	std	Y+17, r24	; 0x11
    1ee0:	89 89       	ldd	r24, Y+17	; 0x11
    1ee2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	f1 f7       	brne	.-4      	; 0x1ee4 <LCD_VidInit+0x548>
    1ee8:	9a 8b       	std	Y+18, r25	; 0x12
    1eea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eec:	8b 89       	ldd	r24, Y+19	; 0x13
    1eee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	9c 8b       	std	Y+20, r25	; 0x14
    1ef4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	69 f7       	brne	.-38     	; 0x1ed8 <LCD_VidInit+0x53c>
    1efe:	b4 c0       	rjmp	.+360    	; 0x2068 <LCD_VidInit+0x6cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f00:	6d 89       	ldd	r22, Y+21	; 0x15
    1f02:	7e 89       	ldd	r23, Y+22	; 0x16
    1f04:	8f 89       	ldd	r24, Y+23	; 0x17
    1f06:	98 8d       	ldd	r25, Y+24	; 0x18
    1f08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	9c 8b       	std	Y+20, r25	; 0x14
    1f12:	8b 8b       	std	Y+19, r24	; 0x13
    1f14:	8b 89       	ldd	r24, Y+19	; 0x13
    1f16:	9c 89       	ldd	r25, Y+20	; 0x14
    1f18:	98 8b       	std	Y+16, r25	; 0x10
    1f1a:	8f 87       	std	Y+15, r24	; 0x0f
    1f1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f1e:	98 89       	ldd	r25, Y+16	; 0x10
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <LCD_VidInit+0x584>
    1f24:	98 8b       	std	Y+16, r25	; 0x10
    1f26:	8f 87       	std	Y+15, r24	; 0x0f
    1f28:	9f c0       	rjmp	.+318    	; 0x2068 <LCD_VidInit+0x6cc>
		_delay_ms(1);
	}
	else if(mode == 4)
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	eb 5a       	subi	r30, 0xAB	; 171
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	80 81       	ld	r24, Z
    1f32:	84 30       	cpi	r24, 0x04	; 4
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <LCD_VidInit+0x59c>
    1f36:	98 c0       	rjmp	.+304    	; 0x2068 <LCD_VidInit+0x6cc>
	{
		// set only PORT 4~7 pins as outputs
		 /* Configure the data port as output port */

			DIO_VidSetPinDirection(LCD_DATA_PORT,4,1);
    1f38:	83 e0       	ldi	r24, 0x03	; 3
    1f3a:	64 e0       	ldi	r22, 0x04	; 4
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	0e 94 86 13 	call	0x270c	; 0x270c <DIO_VidSetPinDirection>
			DIO_VidSetPinDirection(LCD_DATA_PORT,5,1);
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	65 e0       	ldi	r22, 0x05	; 5
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 86 13 	call	0x270c	; 0x270c <DIO_VidSetPinDirection>
			DIO_VidSetPinDirection(LCD_DATA_PORT,6,1);
    1f4c:	83 e0       	ldi	r24, 0x03	; 3
    1f4e:	66 e0       	ldi	r22, 0x06	; 6
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	0e 94 86 13 	call	0x270c	; 0x270c <DIO_VidSetPinDirection>
			DIO_VidSetPinDirection(LCD_DATA_PORT,7,1);
    1f56:	83 e0       	ldi	r24, 0x03	; 3
    1f58:	67 e0       	ldi	r22, 0x07	; 7
    1f5a:	41 e0       	ldi	r20, 0x01	; 1
    1f5c:	0e 94 86 13 	call	0x270c	; 0x270c <DIO_VidSetPinDirection>


		/* FUNCTION SET */
		//send 0010 twice with delay in between
		LCD_VidSendCommand(0x02);
    1f60:	82 e0       	ldi	r24, 0x02	; 2
    1f62:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>

		//send N,F flags
		LCD_VidSendCommand(0x28);
    1f66:	88 e2       	ldi	r24, 0x28	; 40
    1f68:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>
		/* END OF FUNCTION SET */


		/* DISPLAY ON/OFF */
		//send 0000 once with a delay, then send 1(D)(C)(B) flags
		LCD_VidSendCommand(0x0C);
    1f6c:	8c e0       	ldi	r24, 0x0C	; 12
    1f6e:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>
		/* END OF DISPLAY ON/OFF*/



		/* ENTRY MODE SET*/
		LCD_VidSendCommand(0x06);
    1f72:	86 e0       	ldi	r24, 0x06	; 6
    1f74:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>
		//_delay_ms(1);
		/* END OF ENTRY MODE SET*/

		LCD_VidSendCommand(0x80);
    1f78:	80 e8       	ldi	r24, 0x80	; 128
    1f7a:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>

		/* DISPLAY CLEAR */
		LCD_VidSendCommand(CLEAR_DISPLAY);
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	a0 e0       	ldi	r26, 0x00	; 0
    1f8a:	b0 e4       	ldi	r27, 0x40	; 64
    1f8c:	8b 87       	std	Y+11, r24	; 0x0b
    1f8e:	9c 87       	std	Y+12, r25	; 0x0c
    1f90:	ad 87       	std	Y+13, r26	; 0x0d
    1f92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	4a ef       	ldi	r20, 0xFA	; 250
    1fa2:	54 e4       	ldi	r21, 0x44	; 68
    1fa4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	8f 83       	std	Y+7, r24	; 0x07
    1fae:	98 87       	std	Y+8, r25	; 0x08
    1fb0:	a9 87       	std	Y+9, r26	; 0x09
    1fb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb6:	78 85       	ldd	r23, Y+8	; 0x08
    1fb8:	89 85       	ldd	r24, Y+9	; 0x09
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e8       	ldi	r20, 0x80	; 128
    1fc2:	5f e3       	ldi	r21, 0x3F	; 63
    1fc4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	2c f4       	brge	.+10     	; 0x1fd6 <LCD_VidInit+0x63a>
		__ticks = 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	9e 83       	std	Y+6, r25	; 0x06
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
    1fd4:	3f c0       	rjmp	.+126    	; 0x2054 <LCD_VidInit+0x6b8>
	else if (__tmp > 65535)
    1fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd8:	78 85       	ldd	r23, Y+8	; 0x08
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	3f ef       	ldi	r19, 0xFF	; 255
    1fe2:	4f e7       	ldi	r20, 0x7F	; 127
    1fe4:	57 e4       	ldi	r21, 0x47	; 71
    1fe6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fea:	18 16       	cp	r1, r24
    1fec:	4c f5       	brge	.+82     	; 0x2040 <LCD_VidInit+0x6a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e2       	ldi	r20, 0x20	; 32
    1ffc:	51 e4       	ldi	r21, 0x41	; 65
    1ffe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	9e 83       	std	Y+6, r25	; 0x06
    2014:	8d 83       	std	Y+5, r24	; 0x05
    2016:	0f c0       	rjmp	.+30     	; 0x2036 <LCD_VidInit+0x69a>
    2018:	88 ec       	ldi	r24, 0xC8	; 200
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <LCD_VidInit+0x688>
    2028:	9c 83       	std	Y+4, r25	; 0x04
    202a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202c:	8d 81       	ldd	r24, Y+5	; 0x05
    202e:	9e 81       	ldd	r25, Y+6	; 0x06
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	9e 83       	std	Y+6, r25	; 0x06
    2034:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2036:	8d 81       	ldd	r24, Y+5	; 0x05
    2038:	9e 81       	ldd	r25, Y+6	; 0x06
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	69 f7       	brne	.-38     	; 0x2018 <LCD_VidInit+0x67c>
    203e:	14 c0       	rjmp	.+40     	; 0x2068 <LCD_VidInit+0x6cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2040:	6f 81       	ldd	r22, Y+7	; 0x07
    2042:	78 85       	ldd	r23, Y+8	; 0x08
    2044:	89 85       	ldd	r24, Y+9	; 0x09
    2046:	9a 85       	ldd	r25, Y+10	; 0x0a
    2048:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_VidInit+0x6c4>
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01
	}




}
    2068:	cb 5a       	subi	r28, 0xAB	; 171
    206a:	df 4f       	sbci	r29, 0xFF	; 255
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	1f 91       	pop	r17
    207c:	0f 91       	pop	r16
    207e:	08 95       	ret

00002080 <LCD_VidPrintString>:

void LCD_VidPrintString(char* the_string)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	00 d0       	rcall	.+0      	; 0x2086 <LCD_VidPrintString+0x6>
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	0a c0       	rjmp	.+20     	; 0x20a4 <LCD_VidPrintString+0x24>
	while((*the_string) != '\0')
	{
		LCD_VidSendChar(*the_string) ;
    2090:	e9 81       	ldd	r30, Y+1	; 0x01
    2092:	fa 81       	ldd	r31, Y+2	; 0x02
    2094:	80 81       	ld	r24, Z
    2096:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_VidSendChar>
		the_string++;
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	01 96       	adiw	r24, 0x01	; 1
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01

}

void LCD_VidPrintString(char* the_string)
{
	while((*the_string) != '\0')
    20a4:	e9 81       	ldd	r30, Y+1	; 0x01
    20a6:	fa 81       	ldd	r31, Y+2	; 0x02
    20a8:	80 81       	ld	r24, Z
    20aa:	88 23       	and	r24, r24
    20ac:	89 f7       	brne	.-30     	; 0x2090 <LCD_VidPrintString+0x10>
	{
		LCD_VidSendChar(*the_string) ;
		the_string++;
	}
}
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <LCD_VidPrintNum>:

void LCD_VidPrintNum(u32 num)
{
    20b8:	ef 92       	push	r14
    20ba:	ff 92       	push	r15
    20bc:	0f 93       	push	r16
    20be:	1f 93       	push	r17
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	2c 97       	sbiw	r28, 0x0c	; 12
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	6f 83       	std	Y+7, r22	; 0x07
    20d6:	78 87       	std	Y+8, r23	; 0x08
    20d8:	89 87       	std	Y+9, r24	; 0x09
    20da:	9a 87       	std	Y+10, r25	; 0x0a
	u32 buffer_size = snprintf(NULL,0,"%d",num);
	char buffer[buffer_size+1];
	snprintf(buffer,sizeof(buffer),"%d",num);
	LCD_VidPrintString(buffer);
}
    20dc:	0d b7       	in	r16, 0x3d	; 61
    20de:	1e b7       	in	r17, 0x3e	; 62
		the_string++;
	}
}

void LCD_VidPrintNum(u32 num)
{
    20e0:	8d b7       	in	r24, 0x3d	; 61
    20e2:	9e b7       	in	r25, 0x3e	; 62
    20e4:	7c 01       	movw	r14, r24
	u32 buffer_size = snprintf(NULL,0,"%d",num);
    20e6:	2d b7       	in	r18, 0x3d	; 61
    20e8:	3e b7       	in	r19, 0x3e	; 62
    20ea:	2a 50       	subi	r18, 0x0A	; 10
    20ec:	30 40       	sbci	r19, 0x00	; 0
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	3e bf       	out	0x3e, r19	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	2d bf       	out	0x3d, r18	; 61
    20f8:	ed b7       	in	r30, 0x3d	; 61
    20fa:	fe b7       	in	r31, 0x3e	; 62
    20fc:	31 96       	adiw	r30, 0x01	; 1
    20fe:	11 82       	std	Z+1, r1	; 0x01
    2100:	10 82       	st	Z, r1
    2102:	13 82       	std	Z+3, r1	; 0x03
    2104:	12 82       	std	Z+2, r1	; 0x02
    2106:	80 e6       	ldi	r24, 0x60	; 96
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	95 83       	std	Z+5, r25	; 0x05
    210c:	84 83       	std	Z+4, r24	; 0x04
    210e:	8f 81       	ldd	r24, Y+7	; 0x07
    2110:	98 85       	ldd	r25, Y+8	; 0x08
    2112:	a9 85       	ldd	r26, Y+9	; 0x09
    2114:	ba 85       	ldd	r27, Y+10	; 0x0a
    2116:	86 83       	std	Z+6, r24	; 0x06
    2118:	97 83       	std	Z+7, r25	; 0x07
    211a:	a0 87       	std	Z+8, r26	; 0x08
    211c:	b1 87       	std	Z+9, r27	; 0x09
    211e:	0e 94 1b 18 	call	0x3036	; 0x3036 <snprintf>
    2122:	4d b7       	in	r20, 0x3d	; 61
    2124:	5e b7       	in	r21, 0x3e	; 62
    2126:	46 5f       	subi	r20, 0xF6	; 246
    2128:	5f 4f       	sbci	r21, 0xFF	; 255
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	5e bf       	out	0x3e, r21	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	4d bf       	out	0x3d, r20	; 61
    2134:	aa 27       	eor	r26, r26
    2136:	97 fd       	sbrc	r25, 7
    2138:	a0 95       	com	r26
    213a:	ba 2f       	mov	r27, r26
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	9a 83       	std	Y+2, r25	; 0x02
    2140:	ab 83       	std	Y+3, r26	; 0x03
    2142:	bc 83       	std	Y+4, r27	; 0x04
	char buffer[buffer_size+1];
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	ab 81       	ldd	r26, Y+3	; 0x03
    214a:	bc 81       	ldd	r27, Y+4	; 0x04
    214c:	9c 01       	movw	r18, r24
    214e:	ad 01       	movw	r20, r26
    2150:	2f 5f       	subi	r18, 0xFF	; 255
    2152:	3f 4f       	sbci	r19, 0xFF	; 255
    2154:	4f 4f       	sbci	r20, 0xFF	; 255
    2156:	5f 4f       	sbci	r21, 0xFF	; 255
    2158:	c9 01       	movw	r24, r18
    215a:	6d b7       	in	r22, 0x3d	; 61
    215c:	7e b7       	in	r23, 0x3e	; 62
    215e:	68 1b       	sub	r22, r24
    2160:	79 0b       	sbc	r23, r25
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	7e bf       	out	0x3e, r23	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	6d bf       	out	0x3d, r22	; 61
    216c:	8d b7       	in	r24, 0x3d	; 61
    216e:	9e b7       	in	r25, 0x3e	; 62
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	9c 87       	std	Y+12, r25	; 0x0c
    2174:	8b 87       	std	Y+11, r24	; 0x0b
    2176:	8b 85       	ldd	r24, Y+11	; 0x0b
    2178:	9c 85       	ldd	r25, Y+12	; 0x0c
    217a:	00 96       	adiw	r24, 0x00	; 0
    217c:	9c 87       	std	Y+12, r25	; 0x0c
    217e:	8b 87       	std	Y+11, r24	; 0x0b
    2180:	6b 85       	ldd	r22, Y+11	; 0x0b
    2182:	7c 85       	ldd	r23, Y+12	; 0x0c
    2184:	7e 83       	std	Y+6, r23	; 0x06
    2186:	6d 83       	std	Y+5, r22	; 0x05
	snprintf(buffer,sizeof(buffer),"%d",num);
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	4d b7       	in	r20, 0x3d	; 61
    218e:	5e b7       	in	r21, 0x3e	; 62
    2190:	4a 50       	subi	r20, 0x0A	; 10
    2192:	50 40       	sbci	r21, 0x00	; 0
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	5e bf       	out	0x3e, r21	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	4d bf       	out	0x3d, r20	; 61
    219e:	ed b7       	in	r30, 0x3d	; 61
    21a0:	fe b7       	in	r31, 0x3e	; 62
    21a2:	31 96       	adiw	r30, 0x01	; 1
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
    21a8:	33 83       	std	Z+3, r19	; 0x03
    21aa:	22 83       	std	Z+2, r18	; 0x02
    21ac:	80 e6       	ldi	r24, 0x60	; 96
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	95 83       	std	Z+5, r25	; 0x05
    21b2:	84 83       	std	Z+4, r24	; 0x04
    21b4:	8f 81       	ldd	r24, Y+7	; 0x07
    21b6:	98 85       	ldd	r25, Y+8	; 0x08
    21b8:	a9 85       	ldd	r26, Y+9	; 0x09
    21ba:	ba 85       	ldd	r27, Y+10	; 0x0a
    21bc:	86 83       	std	Z+6, r24	; 0x06
    21be:	97 83       	std	Z+7, r25	; 0x07
    21c0:	a0 87       	std	Z+8, r26	; 0x08
    21c2:	b1 87       	std	Z+9, r27	; 0x09
    21c4:	0e 94 1b 18 	call	0x3036	; 0x3036 <snprintf>
    21c8:	6d b7       	in	r22, 0x3d	; 61
    21ca:	7e b7       	in	r23, 0x3e	; 62
    21cc:	66 5f       	subi	r22, 0xF6	; 246
    21ce:	7f 4f       	sbci	r23, 0xFF	; 255
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	7e bf       	out	0x3e, r23	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	6d bf       	out	0x3d, r22	; 61
	LCD_VidPrintString(buffer);
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_VidPrintString>
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	fe be       	out	0x3e, r15	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	ed be       	out	0x3d, r14	; 61
}
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	1e bf       	out	0x3e, r17	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	0d bf       	out	0x3d, r16	; 61
    21f6:	2c 96       	adiw	r28, 0x0c	; 12
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	1f 91       	pop	r17
    2208:	0f 91       	pop	r16
    220a:	ff 90       	pop	r15
    220c:	ef 90       	pop	r14
    220e:	08 95       	ret

00002210 <LCD_VidSetCursorPosition>:

void LCD_VidSetCursorPosition(u8 line_pos, u8 line_no)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	00 d0       	rcall	.+0      	; 0x2216 <LCD_VidSetCursorPosition+0x6>
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	6a 83       	std	Y+2, r22	; 0x02
	if((line_no%2) == 0)
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	88 2f       	mov	r24, r24
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	81 70       	andi	r24, 0x01	; 1
    2226:	90 70       	andi	r25, 0x00	; 0
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	31 f4       	brne	.+12     	; 0x2238 <LCD_VidSetCursorPosition+0x28>
	{
		LCD_VidSendCommand(DISPLAY_ORG + (line_pos%16) );
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	8f 70       	andi	r24, 0x0F	; 15
    2230:	80 58       	subi	r24, 0x80	; 128
    2232:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>
    2236:	05 c0       	rjmp	.+10     	; 0x2242 <LCD_VidSetCursorPosition+0x32>
	}
	else
	{
		LCD_VidSendCommand(DISPLAY_ORG + (line_pos%16) + 64 );
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	8f 70       	andi	r24, 0x0F	; 15
    223c:	80 54       	subi	r24, 0x40	; 64
    223e:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>
	}
}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <LCD_VidScrollDisplay>:


void LCD_VidScrollDisplay(u8 amount ,u8 right_left, u8 delay)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	a3 97       	sbiw	r28, 0x23	; 35
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	de bf       	out	0x3e, r29	; 62
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	cd bf       	out	0x3d, r28	; 61
    2260:	89 a3       	std	Y+33, r24	; 0x21
    2262:	6a a3       	std	Y+34, r22	; 0x22
    2264:	4b a3       	std	Y+35, r20	; 0x23
	if(right_left == RIGHT)
    2266:	8a a1       	ldd	r24, Y+34	; 0x22
    2268:	81 30       	cpi	r24, 0x01	; 1
    226a:	09 f0       	breq	.+2      	; 0x226e <LCD_VidScrollDisplay+0x22>
    226c:	92 c0       	rjmp	.+292    	; 0x2392 <LCD_VidScrollDisplay+0x146>
	{
		for(int i=0; i<amount; i++)
    226e:	18 a2       	std	Y+32, r1	; 0x20
    2270:	1f 8e       	std	Y+31, r1	; 0x1f
    2272:	85 c0       	rjmp	.+266    	; 0x237e <LCD_VidScrollDisplay+0x132>
		{
			LCD_VidSendCommand(SCROLL_RIGHT);
    2274:	8c e1       	ldi	r24, 0x1C	; 28
    2276:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>

			if(delay != 0)
    227a:	8b a1       	ldd	r24, Y+35	; 0x23
    227c:	88 23       	and	r24, r24
    227e:	09 f4       	brne	.+2      	; 0x2282 <LCD_VidScrollDisplay+0x36>
    2280:	79 c0       	rjmp	.+242    	; 0x2374 <LCD_VidScrollDisplay+0x128>
			{
				_delay_ms(delay);
    2282:	8b a1       	ldd	r24, Y+35	; 0x23
    2284:	88 2f       	mov	r24, r24
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	a0 e0       	ldi	r26, 0x00	; 0
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	89 8f       	std	Y+25, r24	; 0x19
    229a:	9a 8f       	std	Y+26, r25	; 0x1a
    229c:	ab 8f       	std	Y+27, r26	; 0x1b
    229e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a0:	69 8d       	ldd	r22, Y+25	; 0x19
    22a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	4a ef       	ldi	r20, 0xFA	; 250
    22ae:	54 e4       	ldi	r21, 0x44	; 68
    22b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	8d 8b       	std	Y+21, r24	; 0x15
    22ba:	9e 8b       	std	Y+22, r25	; 0x16
    22bc:	af 8b       	std	Y+23, r26	; 0x17
    22be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22c0:	6d 89       	ldd	r22, Y+21	; 0x15
    22c2:	7e 89       	ldd	r23, Y+22	; 0x16
    22c4:	8f 89       	ldd	r24, Y+23	; 0x17
    22c6:	98 8d       	ldd	r25, Y+24	; 0x18
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e8       	ldi	r20, 0x80	; 128
    22ce:	5f e3       	ldi	r21, 0x3F	; 63
    22d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22d4:	88 23       	and	r24, r24
    22d6:	2c f4       	brge	.+10     	; 0x22e2 <LCD_VidScrollDisplay+0x96>
		__ticks = 1;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	9c 8b       	std	Y+20, r25	; 0x14
    22de:	8b 8b       	std	Y+19, r24	; 0x13
    22e0:	3f c0       	rjmp	.+126    	; 0x2360 <LCD_VidScrollDisplay+0x114>
	else if (__tmp > 65535)
    22e2:	6d 89       	ldd	r22, Y+21	; 0x15
    22e4:	7e 89       	ldd	r23, Y+22	; 0x16
    22e6:	8f 89       	ldd	r24, Y+23	; 0x17
    22e8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	3f ef       	ldi	r19, 0xFF	; 255
    22ee:	4f e7       	ldi	r20, 0x7F	; 127
    22f0:	57 e4       	ldi	r21, 0x47	; 71
    22f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22f6:	18 16       	cp	r1, r24
    22f8:	4c f5       	brge	.+82     	; 0x234c <LCD_VidScrollDisplay+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fa:	69 8d       	ldd	r22, Y+25	; 0x19
    22fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2300:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e2       	ldi	r20, 0x20	; 32
    2308:	51 e4       	ldi	r21, 0x41	; 65
    230a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	bc 01       	movw	r22, r24
    2314:	cd 01       	movw	r24, r26
    2316:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9c 8b       	std	Y+20, r25	; 0x14
    2320:	8b 8b       	std	Y+19, r24	; 0x13
    2322:	0f c0       	rjmp	.+30     	; 0x2342 <LCD_VidScrollDisplay+0xf6>
    2324:	88 ec       	ldi	r24, 0xC8	; 200
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	9a 8b       	std	Y+18, r25	; 0x12
    232a:	89 8b       	std	Y+17, r24	; 0x11
    232c:	89 89       	ldd	r24, Y+17	; 0x11
    232e:	9a 89       	ldd	r25, Y+18	; 0x12
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <LCD_VidScrollDisplay+0xe4>
    2334:	9a 8b       	std	Y+18, r25	; 0x12
    2336:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2338:	8b 89       	ldd	r24, Y+19	; 0x13
    233a:	9c 89       	ldd	r25, Y+20	; 0x14
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	9c 8b       	std	Y+20, r25	; 0x14
    2340:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2342:	8b 89       	ldd	r24, Y+19	; 0x13
    2344:	9c 89       	ldd	r25, Y+20	; 0x14
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	69 f7       	brne	.-38     	; 0x2324 <LCD_VidScrollDisplay+0xd8>
    234a:	14 c0       	rjmp	.+40     	; 0x2374 <LCD_VidScrollDisplay+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234c:	6d 89       	ldd	r22, Y+21	; 0x15
    234e:	7e 89       	ldd	r23, Y+22	; 0x16
    2350:	8f 89       	ldd	r24, Y+23	; 0x17
    2352:	98 8d       	ldd	r25, Y+24	; 0x18
    2354:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	9c 8b       	std	Y+20, r25	; 0x14
    235e:	8b 8b       	std	Y+19, r24	; 0x13
    2360:	8b 89       	ldd	r24, Y+19	; 0x13
    2362:	9c 89       	ldd	r25, Y+20	; 0x14
    2364:	98 8b       	std	Y+16, r25	; 0x10
    2366:	8f 87       	std	Y+15, r24	; 0x0f
    2368:	8f 85       	ldd	r24, Y+15	; 0x0f
    236a:	98 89       	ldd	r25, Y+16	; 0x10
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCD_VidScrollDisplay+0x120>
    2370:	98 8b       	std	Y+16, r25	; 0x10
    2372:	8f 87       	std	Y+15, r24	; 0x0f

void LCD_VidScrollDisplay(u8 amount ,u8 right_left, u8 delay)
{
	if(right_left == RIGHT)
	{
		for(int i=0; i<amount; i++)
    2374:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2376:	98 a1       	ldd	r25, Y+32	; 0x20
    2378:	01 96       	adiw	r24, 0x01	; 1
    237a:	98 a3       	std	Y+32, r25	; 0x20
    237c:	8f 8f       	std	Y+31, r24	; 0x1f
    237e:	89 a1       	ldd	r24, Y+33	; 0x21
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2386:	98 a1       	ldd	r25, Y+32	; 0x20
    2388:	82 17       	cp	r24, r18
    238a:	93 07       	cpc	r25, r19
    238c:	0c f4       	brge	.+2      	; 0x2390 <LCD_VidScrollDisplay+0x144>
    238e:	72 cf       	rjmp	.-284    	; 0x2274 <LCD_VidScrollDisplay+0x28>
    2390:	95 c0       	rjmp	.+298    	; 0x24bc <LCD_VidScrollDisplay+0x270>
				_delay_ms(delay);
			}

		}
	}
	else if(right_left == LEFT)
    2392:	8a a1       	ldd	r24, Y+34	; 0x22
    2394:	88 23       	and	r24, r24
    2396:	09 f0       	breq	.+2      	; 0x239a <LCD_VidScrollDisplay+0x14e>
    2398:	91 c0       	rjmp	.+290    	; 0x24bc <LCD_VidScrollDisplay+0x270>
	{
		for(int i=0; i<amount; i++)
    239a:	1e 8e       	std	Y+30, r1	; 0x1e
    239c:	1d 8e       	std	Y+29, r1	; 0x1d
    239e:	85 c0       	rjmp	.+266    	; 0x24aa <LCD_VidScrollDisplay+0x25e>
		{
			LCD_VidSendCommand(SCROLL_LEFT);
    23a0:	88 e1       	ldi	r24, 0x18	; 24
    23a2:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>

			if(delay != 0)
    23a6:	8b a1       	ldd	r24, Y+35	; 0x23
    23a8:	88 23       	and	r24, r24
    23aa:	09 f4       	brne	.+2      	; 0x23ae <LCD_VidScrollDisplay+0x162>
    23ac:	79 c0       	rjmp	.+242    	; 0x24a0 <LCD_VidScrollDisplay+0x254>
			{
				_delay_ms(delay);
    23ae:	8b a1       	ldd	r24, Y+35	; 0x23
    23b0:	88 2f       	mov	r24, r24
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	a0 e0       	ldi	r26, 0x00	; 0
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	bc 01       	movw	r22, r24
    23ba:	cd 01       	movw	r24, r26
    23bc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatunsisf>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	8b 87       	std	Y+11, r24	; 0x0b
    23c6:	9c 87       	std	Y+12, r25	; 0x0c
    23c8:	ad 87       	std	Y+13, r26	; 0x0d
    23ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	4a ef       	ldi	r20, 0xFA	; 250
    23da:	54 e4       	ldi	r21, 0x44	; 68
    23dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	8f 83       	std	Y+7, r24	; 0x07
    23e6:	98 87       	std	Y+8, r25	; 0x08
    23e8:	a9 87       	std	Y+9, r26	; 0x09
    23ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ec:	6f 81       	ldd	r22, Y+7	; 0x07
    23ee:	78 85       	ldd	r23, Y+8	; 0x08
    23f0:	89 85       	ldd	r24, Y+9	; 0x09
    23f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e8       	ldi	r20, 0x80	; 128
    23fa:	5f e3       	ldi	r21, 0x3F	; 63
    23fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2400:	88 23       	and	r24, r24
    2402:	2c f4       	brge	.+10     	; 0x240e <LCD_VidScrollDisplay+0x1c2>
		__ticks = 1;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9e 83       	std	Y+6, r25	; 0x06
    240a:	8d 83       	std	Y+5, r24	; 0x05
    240c:	3f c0       	rjmp	.+126    	; 0x248c <LCD_VidScrollDisplay+0x240>
	else if (__tmp > 65535)
    240e:	6f 81       	ldd	r22, Y+7	; 0x07
    2410:	78 85       	ldd	r23, Y+8	; 0x08
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	3f ef       	ldi	r19, 0xFF	; 255
    241a:	4f e7       	ldi	r20, 0x7F	; 127
    241c:	57 e4       	ldi	r21, 0x47	; 71
    241e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2422:	18 16       	cp	r1, r24
    2424:	4c f5       	brge	.+82     	; 0x2478 <LCD_VidScrollDisplay+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2426:	6b 85       	ldd	r22, Y+11	; 0x0b
    2428:	7c 85       	ldd	r23, Y+12	; 0x0c
    242a:	8d 85       	ldd	r24, Y+13	; 0x0d
    242c:	9e 85       	ldd	r25, Y+14	; 0x0e
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	51 e4       	ldi	r21, 0x41	; 65
    2436:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	0f c0       	rjmp	.+30     	; 0x246e <LCD_VidScrollDisplay+0x222>
    2450:	88 ec       	ldi	r24, 0xC8	; 200
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9c 83       	std	Y+4, r25	; 0x04
    2456:	8b 83       	std	Y+3, r24	; 0x03
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	9c 81       	ldd	r25, Y+4	; 0x04
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <LCD_VidScrollDisplay+0x210>
    2460:	9c 83       	std	Y+4, r25	; 0x04
    2462:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	9e 83       	std	Y+6, r25	; 0x06
    246c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246e:	8d 81       	ldd	r24, Y+5	; 0x05
    2470:	9e 81       	ldd	r25, Y+6	; 0x06
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	69 f7       	brne	.-38     	; 0x2450 <LCD_VidScrollDisplay+0x204>
    2476:	14 c0       	rjmp	.+40     	; 0x24a0 <LCD_VidScrollDisplay+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2478:	6f 81       	ldd	r22, Y+7	; 0x07
    247a:	78 85       	ldd	r23, Y+8	; 0x08
    247c:	89 85       	ldd	r24, Y+9	; 0x09
    247e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2480:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	9e 83       	std	Y+6, r25	; 0x06
    248a:	8d 83       	std	Y+5, r24	; 0x05
    248c:	8d 81       	ldd	r24, Y+5	; 0x05
    248e:	9e 81       	ldd	r25, Y+6	; 0x06
    2490:	9a 83       	std	Y+2, r25	; 0x02
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	9a 81       	ldd	r25, Y+2	; 0x02
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <LCD_VidScrollDisplay+0x24c>
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	89 83       	std	Y+1, r24	; 0x01

		}
	}
	else if(right_left == LEFT)
	{
		for(int i=0; i<amount; i++)
    24a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	9e 8f       	std	Y+30, r25	; 0x1e
    24a8:	8d 8f       	std	Y+29, r24	; 0x1d
    24aa:	89 a1       	ldd	r24, Y+33	; 0x21
    24ac:	28 2f       	mov	r18, r24
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24b4:	82 17       	cp	r24, r18
    24b6:	93 07       	cpc	r25, r19
    24b8:	0c f4       	brge	.+2      	; 0x24bc <LCD_VidScrollDisplay+0x270>
    24ba:	72 cf       	rjmp	.-284    	; 0x23a0 <LCD_VidScrollDisplay+0x154>
			{
				_delay_ms(delay);
			}
		}
	}
}
    24bc:	a3 96       	adiw	r28, 0x23	; 35
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <LCD_VidSaveCustomChar>:

void LCD_VidSaveCustomChar(const u8 byte_array[], u8 cgRAM_address)
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <LCD_VidSaveCustomChar+0x6>
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <LCD_VidSaveCustomChar+0x8>
    24d6:	0f 92       	push	r0
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	9c 83       	std	Y+4, r25	; 0x04
    24de:	8b 83       	std	Y+3, r24	; 0x03
    24e0:	6d 83       	std	Y+5, r22	; 0x05
	LCD_VidSendCommand(CGRAM_BASE+(cgRAM_address*8)); //set CGRAM address command
    24e2:	8d 81       	ldd	r24, Y+5	; 0x05
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	08 96       	adiw	r24, 0x08	; 8
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>

	//send custom character bitmap
	for(int i=0; i<8 ; i++)
    24fa:	1a 82       	std	Y+2, r1	; 0x02
    24fc:	19 82       	std	Y+1, r1	; 0x01
    24fe:	0f c0       	rjmp	.+30     	; 0x251e <LCD_VidSaveCustomChar+0x50>
	{
		LCD_VidSendChar(byte_array[i]);
    2500:	29 81       	ldd	r18, Y+1	; 0x01
    2502:	3a 81       	ldd	r19, Y+2	; 0x02
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	9c 81       	ldd	r25, Y+4	; 0x04
    2508:	fc 01       	movw	r30, r24
    250a:	e2 0f       	add	r30, r18
    250c:	f3 1f       	adc	r31, r19
    250e:	80 81       	ld	r24, Z
    2510:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_VidSendChar>
void LCD_VidSaveCustomChar(const u8 byte_array[], u8 cgRAM_address)
{
	LCD_VidSendCommand(CGRAM_BASE+(cgRAM_address*8)); //set CGRAM address command

	//send custom character bitmap
	for(int i=0; i<8 ; i++)
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	9a 81       	ldd	r25, Y+2	; 0x02
    2518:	01 96       	adiw	r24, 0x01	; 1
    251a:	9a 83       	std	Y+2, r25	; 0x02
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	9a 81       	ldd	r25, Y+2	; 0x02
    2522:	88 30       	cpi	r24, 0x08	; 8
    2524:	91 05       	cpc	r25, r1
    2526:	64 f3       	brlt	.-40     	; 0x2500 <LCD_VidSaveCustomChar+0x32>
	{
		LCD_VidSendChar(byte_array[i]);
	}

	LCD_VidSendCommand(0x80); //set reading to be from DDRAM again
    2528:	80 e8       	ldi	r24, 0x80	; 128
    252a:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>
}
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <LCD_VidSaveCustomCharArray>:

void LCD_VidSaveCustomCharArray(u8 no_chars,const u8 char_array[][8])
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	00 d0       	rcall	.+0      	; 0x2544 <LCD_VidSaveCustomCharArray+0x6>
    2544:	00 d0       	rcall	.+0      	; 0x2546 <LCD_VidSaveCustomCharArray+0x8>
    2546:	0f 92       	push	r0
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	8b 83       	std	Y+3, r24	; 0x03
    254e:	7d 83       	std	Y+5, r23	; 0x05
    2550:	6c 83       	std	Y+4, r22	; 0x04
	for(int i=0; i<no_chars ; i++)
    2552:	1a 82       	std	Y+2, r1	; 0x02
    2554:	19 82       	std	Y+1, r1	; 0x01
    2556:	15 c0       	rjmp	.+42     	; 0x2582 <LCD_VidSaveCustomCharArray+0x44>
	{
		LCD_VidSaveCustomChar(char_array[i],i);
    2558:	2c 81       	ldd	r18, Y+4	; 0x04
    255a:	3d 81       	ldd	r19, Y+5	; 0x05
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	9a 81       	ldd	r25, Y+2	; 0x02
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	88 0f       	add	r24, r24
    256a:	99 1f       	adc	r25, r25
    256c:	82 0f       	add	r24, r18
    256e:	93 1f       	adc	r25, r19
    2570:	29 81       	ldd	r18, Y+1	; 0x01
    2572:	62 2f       	mov	r22, r18
    2574:	0e 94 67 12 	call	0x24ce	; 0x24ce <LCD_VidSaveCustomChar>
	LCD_VidSendCommand(0x80); //set reading to be from DDRAM again
}

void LCD_VidSaveCustomCharArray(u8 no_chars,const u8 char_array[][8])
{
	for(int i=0; i<no_chars ; i++)
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	9a 81       	ldd	r25, Y+2	; 0x02
    257c:	01 96       	adiw	r24, 0x01	; 1
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	28 2f       	mov	r18, r24
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	9a 81       	ldd	r25, Y+2	; 0x02
    258c:	82 17       	cp	r24, r18
    258e:	93 07       	cpc	r25, r19
    2590:	1c f3       	brlt	.-58     	; 0x2558 <LCD_VidSaveCustomCharArray+0x1a>
	{
		LCD_VidSaveCustomChar(char_array[i],i);
	}
}
    2592:	0f 90       	pop	r0
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <LCD_VidPrintCustomChar>:


void LCD_VidPrintCustomChar(u8 cgRAM_address)
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	0f 92       	push	r0
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	89 83       	std	Y+1, r24	; 0x01
	LCD_VidSendChar(cgRAM_address);
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_VidSendChar>
}
    25b4:	0f 90       	pop	r0
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <LCD_VidScanLines>:

void LCD_VidScanLines() //scans LCD lines to know the position of each charachter in the given LCd
{						//its a helping function intended to be used for debugging
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	60 97       	sbiw	r28, 0x10	; 16
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	de bf       	out	0x3e, r29	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	cd bf       	out	0x3d, r28	; 61
	for(int i=0; i<80 ; i++)
    25d0:	18 8a       	std	Y+16, r1	; 0x10
    25d2:	1f 86       	std	Y+15, r1	; 0x0f
    25d4:	8c c0       	rjmp	.+280    	; 0x26ee <LCD_VidScanLines+0x132>
	{
		LCD_VidSendCommand(DISPLAY_ORG + (i) ); //set cursor position
    25d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d8:	80 58       	subi	r24, 0x80	; 128
    25da:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>
		LCD_VidPrintNum(i); //display char
    25de:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e0:	98 89       	ldd	r25, Y+16	; 0x10
    25e2:	aa 27       	eor	r26, r26
    25e4:	97 fd       	sbrc	r25, 7
    25e6:	a0 95       	com	r26
    25e8:	ba 2f       	mov	r27, r26
    25ea:	bc 01       	movw	r22, r24
    25ec:	cd 01       	movw	r24, r26
    25ee:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_VidPrintNum>
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	aa e7       	ldi	r26, 0x7A	; 122
    25f8:	b3 e4       	ldi	r27, 0x43	; 67
    25fa:	8b 87       	std	Y+11, r24	; 0x0b
    25fc:	9c 87       	std	Y+12, r25	; 0x0c
    25fe:	ad 87       	std	Y+13, r26	; 0x0d
    2600:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2602:	6b 85       	ldd	r22, Y+11	; 0x0b
    2604:	7c 85       	ldd	r23, Y+12	; 0x0c
    2606:	8d 85       	ldd	r24, Y+13	; 0x0d
    2608:	9e 85       	ldd	r25, Y+14	; 0x0e
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	4a ef       	ldi	r20, 0xFA	; 250
    2610:	54 e4       	ldi	r21, 0x44	; 68
    2612:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	8f 83       	std	Y+7, r24	; 0x07
    261c:	98 87       	std	Y+8, r25	; 0x08
    261e:	a9 87       	std	Y+9, r26	; 0x09
    2620:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	2c f4       	brge	.+10     	; 0x2644 <LCD_VidScanLines+0x88>
		__ticks = 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9e 83       	std	Y+6, r25	; 0x06
    2640:	8d 83       	std	Y+5, r24	; 0x05
    2642:	3f c0       	rjmp	.+126    	; 0x26c2 <LCD_VidScanLines+0x106>
	else if (__tmp > 65535)
    2644:	6f 81       	ldd	r22, Y+7	; 0x07
    2646:	78 85       	ldd	r23, Y+8	; 0x08
    2648:	89 85       	ldd	r24, Y+9	; 0x09
    264a:	9a 85       	ldd	r25, Y+10	; 0x0a
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	3f ef       	ldi	r19, 0xFF	; 255
    2650:	4f e7       	ldi	r20, 0x7F	; 127
    2652:	57 e4       	ldi	r21, 0x47	; 71
    2654:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2658:	18 16       	cp	r1, r24
    265a:	4c f5       	brge	.+82     	; 0x26ae <LCD_VidScanLines+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    265c:	6b 85       	ldd	r22, Y+11	; 0x0b
    265e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2660:	8d 85       	ldd	r24, Y+13	; 0x0d
    2662:	9e 85       	ldd	r25, Y+14	; 0x0e
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e2       	ldi	r20, 0x20	; 32
    266a:	51 e4       	ldi	r21, 0x41	; 65
    266c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
    2684:	0f c0       	rjmp	.+30     	; 0x26a4 <LCD_VidScanLines+0xe8>
    2686:	88 ec       	ldi	r24, 0xC8	; 200
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	9c 83       	std	Y+4, r25	; 0x04
    268c:	8b 83       	std	Y+3, r24	; 0x03
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <LCD_VidScanLines+0xd6>
    2696:	9c 83       	std	Y+4, r25	; 0x04
    2698:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269a:	8d 81       	ldd	r24, Y+5	; 0x05
    269c:	9e 81       	ldd	r25, Y+6	; 0x06
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	9e 81       	ldd	r25, Y+6	; 0x06
    26a8:	00 97       	sbiw	r24, 0x00	; 0
    26aa:	69 f7       	brne	.-38     	; 0x2686 <LCD_VidScanLines+0xca>
    26ac:	14 c0       	rjmp	.+40     	; 0x26d6 <LCD_VidScanLines+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ae:	6f 81       	ldd	r22, Y+7	; 0x07
    26b0:	78 85       	ldd	r23, Y+8	; 0x08
    26b2:	89 85       	ldd	r24, Y+9	; 0x09
    26b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	9e 83       	std	Y+6, r25	; 0x06
    26c0:	8d 83       	std	Y+5, r24	; 0x05
    26c2:	8d 81       	ldd	r24, Y+5	; 0x05
    26c4:	9e 81       	ldd	r25, Y+6	; 0x06
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	9a 81       	ldd	r25, Y+2	; 0x02
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <LCD_VidScanLines+0x112>
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		LCD_VidSendCommand(DISPLAY_ORG + (i) ); //go back
    26d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d8:	80 58       	subi	r24, 0x80	; 128
    26da:	0e 94 64 07 	call	0xec8	; 0xec8 <LCD_VidSendCommand>
		LCD_VidSendChar(' '); // display a space instead to erase the charachter
    26de:	80 e2       	ldi	r24, 0x20	; 32
    26e0:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_VidSendChar>
	LCD_VidSendChar(cgRAM_address);
}

void LCD_VidScanLines() //scans LCD lines to know the position of each charachter in the given LCd
{						//its a helping function intended to be used for debugging
	for(int i=0; i<80 ; i++)
    26e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e6:	98 89       	ldd	r25, Y+16	; 0x10
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	98 8b       	std	Y+16, r25	; 0x10
    26ec:	8f 87       	std	Y+15, r24	; 0x0f
    26ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f0:	98 89       	ldd	r25, Y+16	; 0x10
    26f2:	80 35       	cpi	r24, 0x50	; 80
    26f4:	91 05       	cpc	r25, r1
    26f6:	0c f4       	brge	.+2      	; 0x26fa <LCD_VidScanLines+0x13e>
    26f8:	6e cf       	rjmp	.-292    	; 0x25d6 <LCD_VidScanLines+0x1a>
		_delay_ms(250);
		LCD_VidSendCommand(DISPLAY_ORG + (i) ); //go back
		LCD_VidSendChar(' '); // display a space instead to erase the charachter
		//repeat until u scan all lines
	}
}
    26fa:	60 96       	adiw	r28, 0x10	; 16
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <DIO_VidSetPinDirection>:

#include "DIO_Register.h"


void DIO_VidSetPinDirection(u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8Mode )
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	27 97       	sbiw	r28, 0x07	; 7
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	6a 83       	std	Y+2, r22	; 0x02
    2724:	4b 83       	std	Y+3, r20	; 0x03
	if(LOC_u8Mode == 1)
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	81 30       	cpi	r24, 0x01	; 1
    272a:	09 f0       	breq	.+2      	; 0x272e <DIO_VidSetPinDirection+0x22>
    272c:	6f c0       	rjmp	.+222    	; 0x280c <DIO_VidSetPinDirection+0x100>
	{
		switch(LOC_u8Port)
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	3f 83       	std	Y+7, r19	; 0x07
    2736:	2e 83       	std	Y+6, r18	; 0x06
    2738:	8e 81       	ldd	r24, Y+6	; 0x06
    273a:	9f 81       	ldd	r25, Y+7	; 0x07
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	91 05       	cpc	r25, r1
    2740:	49 f1       	breq	.+82     	; 0x2794 <DIO_VidSetPinDirection+0x88>
    2742:	2e 81       	ldd	r18, Y+6	; 0x06
    2744:	3f 81       	ldd	r19, Y+7	; 0x07
    2746:	22 30       	cpi	r18, 0x02	; 2
    2748:	31 05       	cpc	r19, r1
    274a:	2c f4       	brge	.+10     	; 0x2756 <DIO_VidSetPinDirection+0x4a>
    274c:	8e 81       	ldd	r24, Y+6	; 0x06
    274e:	9f 81       	ldd	r25, Y+7	; 0x07
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	61 f0       	breq	.+24     	; 0x276c <DIO_VidSetPinDirection+0x60>
    2754:	d2 c0       	rjmp	.+420    	; 0x28fa <DIO_VidSetPinDirection+0x1ee>
    2756:	2e 81       	ldd	r18, Y+6	; 0x06
    2758:	3f 81       	ldd	r19, Y+7	; 0x07
    275a:	22 30       	cpi	r18, 0x02	; 2
    275c:	31 05       	cpc	r19, r1
    275e:	71 f1       	breq	.+92     	; 0x27bc <DIO_VidSetPinDirection+0xb0>
    2760:	8e 81       	ldd	r24, Y+6	; 0x06
    2762:	9f 81       	ldd	r25, Y+7	; 0x07
    2764:	83 30       	cpi	r24, 0x03	; 3
    2766:	91 05       	cpc	r25, r1
    2768:	e9 f1       	breq	.+122    	; 0x27e4 <DIO_VidSetPinDirection+0xd8>
    276a:	c7 c0       	rjmp	.+398    	; 0x28fa <DIO_VidSetPinDirection+0x1ee>
		{
		case 0 : SET_BIT(DDRA,LOC_u8Pin); break;
    276c:	aa e3       	ldi	r26, 0x3A	; 58
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	ea e3       	ldi	r30, 0x3A	; 58
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	48 2f       	mov	r20, r24
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	28 2f       	mov	r18, r24
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	02 2e       	mov	r0, r18
    2784:	02 c0       	rjmp	.+4      	; 0x278a <DIO_VidSetPinDirection+0x7e>
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	0a 94       	dec	r0
    278c:	e2 f7       	brpl	.-8      	; 0x2786 <DIO_VidSetPinDirection+0x7a>
    278e:	84 2b       	or	r24, r20
    2790:	8c 93       	st	X, r24
    2792:	b3 c0       	rjmp	.+358    	; 0x28fa <DIO_VidSetPinDirection+0x1ee>
		case 1 : SET_BIT(DDRB,LOC_u8Pin); break;
    2794:	a7 e3       	ldi	r26, 0x37	; 55
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	e7 e3       	ldi	r30, 0x37	; 55
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	48 2f       	mov	r20, r24
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	02 2e       	mov	r0, r18
    27ac:	02 c0       	rjmp	.+4      	; 0x27b2 <DIO_VidSetPinDirection+0xa6>
    27ae:	88 0f       	add	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	0a 94       	dec	r0
    27b4:	e2 f7       	brpl	.-8      	; 0x27ae <DIO_VidSetPinDirection+0xa2>
    27b6:	84 2b       	or	r24, r20
    27b8:	8c 93       	st	X, r24
    27ba:	9f c0       	rjmp	.+318    	; 0x28fa <DIO_VidSetPinDirection+0x1ee>
		case 2 : SET_BIT(DDRC,LOC_u8Pin); break;
    27bc:	a4 e3       	ldi	r26, 0x34	; 52
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e4 e3       	ldi	r30, 0x34	; 52
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	48 2f       	mov	r20, r24
    27c8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ca:	28 2f       	mov	r18, r24
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	02 2e       	mov	r0, r18
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <DIO_VidSetPinDirection+0xce>
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	0a 94       	dec	r0
    27dc:	e2 f7       	brpl	.-8      	; 0x27d6 <DIO_VidSetPinDirection+0xca>
    27de:	84 2b       	or	r24, r20
    27e0:	8c 93       	st	X, r24
    27e2:	8b c0       	rjmp	.+278    	; 0x28fa <DIO_VidSetPinDirection+0x1ee>
		case 3 : SET_BIT(DDRD,LOC_u8Pin); break;
    27e4:	a1 e3       	ldi	r26, 0x31	; 49
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e1 e3       	ldi	r30, 0x31	; 49
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	48 2f       	mov	r20, r24
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	28 2f       	mov	r18, r24
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	02 2e       	mov	r0, r18
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <DIO_VidSetPinDirection+0xf6>
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	0a 94       	dec	r0
    2804:	e2 f7       	brpl	.-8      	; 0x27fe <DIO_VidSetPinDirection+0xf2>
    2806:	84 2b       	or	r24, r20
    2808:	8c 93       	st	X, r24
    280a:	77 c0       	rjmp	.+238    	; 0x28fa <DIO_VidSetPinDirection+0x1ee>
		}
	}
	else if(LOC_u8Mode == 0)
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	88 23       	and	r24, r24
    2810:	09 f0       	breq	.+2      	; 0x2814 <DIO_VidSetPinDirection+0x108>
    2812:	73 c0       	rjmp	.+230    	; 0x28fa <DIO_VidSetPinDirection+0x1ee>
	{
		switch(LOC_u8Port)
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	28 2f       	mov	r18, r24
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	3d 83       	std	Y+5, r19	; 0x05
    281c:	2c 83       	std	Y+4, r18	; 0x04
    281e:	8c 81       	ldd	r24, Y+4	; 0x04
    2820:	9d 81       	ldd	r25, Y+5	; 0x05
    2822:	81 30       	cpi	r24, 0x01	; 1
    2824:	91 05       	cpc	r25, r1
    2826:	59 f1       	breq	.+86     	; 0x287e <DIO_VidSetPinDirection+0x172>
    2828:	2c 81       	ldd	r18, Y+4	; 0x04
    282a:	3d 81       	ldd	r19, Y+5	; 0x05
    282c:	22 30       	cpi	r18, 0x02	; 2
    282e:	31 05       	cpc	r19, r1
    2830:	2c f4       	brge	.+10     	; 0x283c <DIO_VidSetPinDirection+0x130>
    2832:	8c 81       	ldd	r24, Y+4	; 0x04
    2834:	9d 81       	ldd	r25, Y+5	; 0x05
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	69 f0       	breq	.+26     	; 0x2854 <DIO_VidSetPinDirection+0x148>
    283a:	5f c0       	rjmp	.+190    	; 0x28fa <DIO_VidSetPinDirection+0x1ee>
    283c:	2c 81       	ldd	r18, Y+4	; 0x04
    283e:	3d 81       	ldd	r19, Y+5	; 0x05
    2840:	22 30       	cpi	r18, 0x02	; 2
    2842:	31 05       	cpc	r19, r1
    2844:	89 f1       	breq	.+98     	; 0x28a8 <DIO_VidSetPinDirection+0x19c>
    2846:	8c 81       	ldd	r24, Y+4	; 0x04
    2848:	9d 81       	ldd	r25, Y+5	; 0x05
    284a:	83 30       	cpi	r24, 0x03	; 3
    284c:	91 05       	cpc	r25, r1
    284e:	09 f4       	brne	.+2      	; 0x2852 <DIO_VidSetPinDirection+0x146>
    2850:	40 c0       	rjmp	.+128    	; 0x28d2 <DIO_VidSetPinDirection+0x1c6>
    2852:	53 c0       	rjmp	.+166    	; 0x28fa <DIO_VidSetPinDirection+0x1ee>
		{
		case 0 : CLR_BIT(DDRA,LOC_u8Pin); break;
    2854:	aa e3       	ldi	r26, 0x3A	; 58
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	ea e3       	ldi	r30, 0x3A	; 58
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	48 2f       	mov	r20, r24
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	02 2e       	mov	r0, r18
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <DIO_VidSetPinDirection+0x166>
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	0a 94       	dec	r0
    2874:	e2 f7       	brpl	.-8      	; 0x286e <DIO_VidSetPinDirection+0x162>
    2876:	80 95       	com	r24
    2878:	84 23       	and	r24, r20
    287a:	8c 93       	st	X, r24
    287c:	3e c0       	rjmp	.+124    	; 0x28fa <DIO_VidSetPinDirection+0x1ee>
		case 1 : CLR_BIT(DDRB,LOC_u8Pin); break;
    287e:	a7 e3       	ldi	r26, 0x37	; 55
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	e7 e3       	ldi	r30, 0x37	; 55
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	48 2f       	mov	r20, r24
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	02 2e       	mov	r0, r18
    2896:	02 c0       	rjmp	.+4      	; 0x289c <DIO_VidSetPinDirection+0x190>
    2898:	88 0f       	add	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	0a 94       	dec	r0
    289e:	e2 f7       	brpl	.-8      	; 0x2898 <DIO_VidSetPinDirection+0x18c>
    28a0:	80 95       	com	r24
    28a2:	84 23       	and	r24, r20
    28a4:	8c 93       	st	X, r24
    28a6:	29 c0       	rjmp	.+82     	; 0x28fa <DIO_VidSetPinDirection+0x1ee>
		case 2 : CLR_BIT(DDRC,LOC_u8Pin); break;
    28a8:	a4 e3       	ldi	r26, 0x34	; 52
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	e4 e3       	ldi	r30, 0x34	; 52
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	48 2f       	mov	r20, r24
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	28 2f       	mov	r18, r24
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	02 2e       	mov	r0, r18
    28c0:	02 c0       	rjmp	.+4      	; 0x28c6 <DIO_VidSetPinDirection+0x1ba>
    28c2:	88 0f       	add	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	0a 94       	dec	r0
    28c8:	e2 f7       	brpl	.-8      	; 0x28c2 <DIO_VidSetPinDirection+0x1b6>
    28ca:	80 95       	com	r24
    28cc:	84 23       	and	r24, r20
    28ce:	8c 93       	st	X, r24
    28d0:	14 c0       	rjmp	.+40     	; 0x28fa <DIO_VidSetPinDirection+0x1ee>
		case 3 : CLR_BIT(DDRD,LOC_u8Pin); break;
    28d2:	a1 e3       	ldi	r26, 0x31	; 49
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	e1 e3       	ldi	r30, 0x31	; 49
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	48 2f       	mov	r20, r24
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	02 2e       	mov	r0, r18
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <DIO_VidSetPinDirection+0x1e4>
    28ec:	88 0f       	add	r24, r24
    28ee:	99 1f       	adc	r25, r25
    28f0:	0a 94       	dec	r0
    28f2:	e2 f7       	brpl	.-8      	; 0x28ec <DIO_VidSetPinDirection+0x1e0>
    28f4:	80 95       	com	r24
    28f6:	84 23       	and	r24, r20
    28f8:	8c 93       	st	X, r24

		}
	}
}
    28fa:	27 96       	adiw	r28, 0x07	; 7
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	08 95       	ret

0000290c <DIO_VidSetPinValue>:



void DIO_VidSetPinValue(u8 LOC_u8Port, u8 LOC_u8Pin, u8 LOC_u8Value )
{
    290c:	df 93       	push	r29
    290e:	cf 93       	push	r28
    2910:	cd b7       	in	r28, 0x3d	; 61
    2912:	de b7       	in	r29, 0x3e	; 62
    2914:	27 97       	sbiw	r28, 0x07	; 7
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	6a 83       	std	Y+2, r22	; 0x02
    2924:	4b 83       	std	Y+3, r20	; 0x03

	if(LOC_u8Value == 1)
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	81 30       	cpi	r24, 0x01	; 1
    292a:	09 f0       	breq	.+2      	; 0x292e <DIO_VidSetPinValue+0x22>
    292c:	6f c0       	rjmp	.+222    	; 0x2a0c <DIO_VidSetPinValue+0x100>
	{
		switch(LOC_u8Port)
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	3f 83       	std	Y+7, r19	; 0x07
    2936:	2e 83       	std	Y+6, r18	; 0x06
    2938:	8e 81       	ldd	r24, Y+6	; 0x06
    293a:	9f 81       	ldd	r25, Y+7	; 0x07
    293c:	81 30       	cpi	r24, 0x01	; 1
    293e:	91 05       	cpc	r25, r1
    2940:	49 f1       	breq	.+82     	; 0x2994 <DIO_VidSetPinValue+0x88>
    2942:	2e 81       	ldd	r18, Y+6	; 0x06
    2944:	3f 81       	ldd	r19, Y+7	; 0x07
    2946:	22 30       	cpi	r18, 0x02	; 2
    2948:	31 05       	cpc	r19, r1
    294a:	2c f4       	brge	.+10     	; 0x2956 <DIO_VidSetPinValue+0x4a>
    294c:	8e 81       	ldd	r24, Y+6	; 0x06
    294e:	9f 81       	ldd	r25, Y+7	; 0x07
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	61 f0       	breq	.+24     	; 0x296c <DIO_VidSetPinValue+0x60>
    2954:	d2 c0       	rjmp	.+420    	; 0x2afa <DIO_VidSetPinValue+0x1ee>
    2956:	2e 81       	ldd	r18, Y+6	; 0x06
    2958:	3f 81       	ldd	r19, Y+7	; 0x07
    295a:	22 30       	cpi	r18, 0x02	; 2
    295c:	31 05       	cpc	r19, r1
    295e:	71 f1       	breq	.+92     	; 0x29bc <DIO_VidSetPinValue+0xb0>
    2960:	8e 81       	ldd	r24, Y+6	; 0x06
    2962:	9f 81       	ldd	r25, Y+7	; 0x07
    2964:	83 30       	cpi	r24, 0x03	; 3
    2966:	91 05       	cpc	r25, r1
    2968:	e9 f1       	breq	.+122    	; 0x29e4 <DIO_VidSetPinValue+0xd8>
    296a:	c7 c0       	rjmp	.+398    	; 0x2afa <DIO_VidSetPinValue+0x1ee>
		{
		case 0 : SET_BIT(PORTA,LOC_u8Pin); break;
    296c:	ab e3       	ldi	r26, 0x3B	; 59
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	eb e3       	ldi	r30, 0x3B	; 59
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	48 2f       	mov	r20, r24
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	28 2f       	mov	r18, r24
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	02 2e       	mov	r0, r18
    2984:	02 c0       	rjmp	.+4      	; 0x298a <DIO_VidSetPinValue+0x7e>
    2986:	88 0f       	add	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	0a 94       	dec	r0
    298c:	e2 f7       	brpl	.-8      	; 0x2986 <DIO_VidSetPinValue+0x7a>
    298e:	84 2b       	or	r24, r20
    2990:	8c 93       	st	X, r24
    2992:	b3 c0       	rjmp	.+358    	; 0x2afa <DIO_VidSetPinValue+0x1ee>
		case 1 : SET_BIT(PORTB,LOC_u8Pin); break;
    2994:	a8 e3       	ldi	r26, 0x38	; 56
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e8 e3       	ldi	r30, 0x38	; 56
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	48 2f       	mov	r20, r24
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	28 2f       	mov	r18, r24
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	02 2e       	mov	r0, r18
    29ac:	02 c0       	rjmp	.+4      	; 0x29b2 <DIO_VidSetPinValue+0xa6>
    29ae:	88 0f       	add	r24, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	0a 94       	dec	r0
    29b4:	e2 f7       	brpl	.-8      	; 0x29ae <DIO_VidSetPinValue+0xa2>
    29b6:	84 2b       	or	r24, r20
    29b8:	8c 93       	st	X, r24
    29ba:	9f c0       	rjmp	.+318    	; 0x2afa <DIO_VidSetPinValue+0x1ee>
		case 2 : SET_BIT(PORTC,LOC_u8Pin); break;
    29bc:	a5 e3       	ldi	r26, 0x35	; 53
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e5 e3       	ldi	r30, 0x35	; 53
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	48 2f       	mov	r20, r24
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	02 2e       	mov	r0, r18
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <DIO_VidSetPinValue+0xce>
    29d6:	88 0f       	add	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	0a 94       	dec	r0
    29dc:	e2 f7       	brpl	.-8      	; 0x29d6 <DIO_VidSetPinValue+0xca>
    29de:	84 2b       	or	r24, r20
    29e0:	8c 93       	st	X, r24
    29e2:	8b c0       	rjmp	.+278    	; 0x2afa <DIO_VidSetPinValue+0x1ee>
		case 3 : SET_BIT(PORTD,LOC_u8Pin); break;
    29e4:	a2 e3       	ldi	r26, 0x32	; 50
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e2 e3       	ldi	r30, 0x32	; 50
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	48 2f       	mov	r20, r24
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	28 2f       	mov	r18, r24
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	02 2e       	mov	r0, r18
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <DIO_VidSetPinValue+0xf6>
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	0a 94       	dec	r0
    2a04:	e2 f7       	brpl	.-8      	; 0x29fe <DIO_VidSetPinValue+0xf2>
    2a06:	84 2b       	or	r24, r20
    2a08:	8c 93       	st	X, r24
    2a0a:	77 c0       	rjmp	.+238    	; 0x2afa <DIO_VidSetPinValue+0x1ee>

		}
	}
	else if(LOC_u8Value == 0)
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	88 23       	and	r24, r24
    2a10:	09 f0       	breq	.+2      	; 0x2a14 <DIO_VidSetPinValue+0x108>
    2a12:	73 c0       	rjmp	.+230    	; 0x2afa <DIO_VidSetPinValue+0x1ee>
	{
		switch(LOC_u8Port)
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	28 2f       	mov	r18, r24
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	3d 83       	std	Y+5, r19	; 0x05
    2a1c:	2c 83       	std	Y+4, r18	; 0x04
    2a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a20:	9d 81       	ldd	r25, Y+5	; 0x05
    2a22:	81 30       	cpi	r24, 0x01	; 1
    2a24:	91 05       	cpc	r25, r1
    2a26:	59 f1       	breq	.+86     	; 0x2a7e <DIO_VidSetPinValue+0x172>
    2a28:	2c 81       	ldd	r18, Y+4	; 0x04
    2a2a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a2c:	22 30       	cpi	r18, 0x02	; 2
    2a2e:	31 05       	cpc	r19, r1
    2a30:	2c f4       	brge	.+10     	; 0x2a3c <DIO_VidSetPinValue+0x130>
    2a32:	8c 81       	ldd	r24, Y+4	; 0x04
    2a34:	9d 81       	ldd	r25, Y+5	; 0x05
    2a36:	00 97       	sbiw	r24, 0x00	; 0
    2a38:	69 f0       	breq	.+26     	; 0x2a54 <DIO_VidSetPinValue+0x148>
    2a3a:	5f c0       	rjmp	.+190    	; 0x2afa <DIO_VidSetPinValue+0x1ee>
    2a3c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a3e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a40:	22 30       	cpi	r18, 0x02	; 2
    2a42:	31 05       	cpc	r19, r1
    2a44:	89 f1       	breq	.+98     	; 0x2aa8 <DIO_VidSetPinValue+0x19c>
    2a46:	8c 81       	ldd	r24, Y+4	; 0x04
    2a48:	9d 81       	ldd	r25, Y+5	; 0x05
    2a4a:	83 30       	cpi	r24, 0x03	; 3
    2a4c:	91 05       	cpc	r25, r1
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <DIO_VidSetPinValue+0x146>
    2a50:	40 c0       	rjmp	.+128    	; 0x2ad2 <DIO_VidSetPinValue+0x1c6>
    2a52:	53 c0       	rjmp	.+166    	; 0x2afa <DIO_VidSetPinValue+0x1ee>
		{
		case 0 : CLR_BIT(PORTA,LOC_u8Pin); break;
    2a54:	ab e3       	ldi	r26, 0x3B	; 59
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	eb e3       	ldi	r30, 0x3B	; 59
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	48 2f       	mov	r20, r24
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	28 2f       	mov	r18, r24
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	02 2e       	mov	r0, r18
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <DIO_VidSetPinValue+0x166>
    2a6e:	88 0f       	add	r24, r24
    2a70:	99 1f       	adc	r25, r25
    2a72:	0a 94       	dec	r0
    2a74:	e2 f7       	brpl	.-8      	; 0x2a6e <DIO_VidSetPinValue+0x162>
    2a76:	80 95       	com	r24
    2a78:	84 23       	and	r24, r20
    2a7a:	8c 93       	st	X, r24
    2a7c:	3e c0       	rjmp	.+124    	; 0x2afa <DIO_VidSetPinValue+0x1ee>
		case 1 : CLR_BIT(PORTB,LOC_u8Pin); break;
    2a7e:	a8 e3       	ldi	r26, 0x38	; 56
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e8 e3       	ldi	r30, 0x38	; 56
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	48 2f       	mov	r20, r24
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	02 2e       	mov	r0, r18
    2a96:	02 c0       	rjmp	.+4      	; 0x2a9c <DIO_VidSetPinValue+0x190>
    2a98:	88 0f       	add	r24, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	0a 94       	dec	r0
    2a9e:	e2 f7       	brpl	.-8      	; 0x2a98 <DIO_VidSetPinValue+0x18c>
    2aa0:	80 95       	com	r24
    2aa2:	84 23       	and	r24, r20
    2aa4:	8c 93       	st	X, r24
    2aa6:	29 c0       	rjmp	.+82     	; 0x2afa <DIO_VidSetPinValue+0x1ee>
		case 2 : CLR_BIT(PORTC,LOC_u8Pin); break;
    2aa8:	a5 e3       	ldi	r26, 0x35	; 53
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	e5 e3       	ldi	r30, 0x35	; 53
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	48 2f       	mov	r20, r24
    2ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab6:	28 2f       	mov	r18, r24
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	02 2e       	mov	r0, r18
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <DIO_VidSetPinValue+0x1ba>
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	0a 94       	dec	r0
    2ac8:	e2 f7       	brpl	.-8      	; 0x2ac2 <DIO_VidSetPinValue+0x1b6>
    2aca:	80 95       	com	r24
    2acc:	84 23       	and	r24, r20
    2ace:	8c 93       	st	X, r24
    2ad0:	14 c0       	rjmp	.+40     	; 0x2afa <DIO_VidSetPinValue+0x1ee>
		case 3 : CLR_BIT(PORTD,LOC_u8Pin); break;
    2ad2:	a2 e3       	ldi	r26, 0x32	; 50
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	e2 e3       	ldi	r30, 0x32	; 50
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	48 2f       	mov	r20, r24
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	02 2e       	mov	r0, r18
    2aea:	02 c0       	rjmp	.+4      	; 0x2af0 <DIO_VidSetPinValue+0x1e4>
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	0a 94       	dec	r0
    2af2:	e2 f7       	brpl	.-8      	; 0x2aec <DIO_VidSetPinValue+0x1e0>
    2af4:	80 95       	com	r24
    2af6:	84 23       	and	r24, r20
    2af8:	8c 93       	st	X, r24

		}

	}

}
    2afa:	27 96       	adiw	r28, 0x07	; 7
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <DIO_VidTogPinValue>:

void DIO_VidTogPinValue(u8 LOC_u8Port, u8 LOC_u8Pin)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	00 d0       	rcall	.+0      	; 0x2b12 <DIO_VidTogPinValue+0x6>
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <DIO_VidTogPinValue+0x8>
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	28 2f       	mov	r18, r24
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	3c 83       	std	Y+4, r19	; 0x04
    2b24:	2b 83       	std	Y+3, r18	; 0x03
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2a:	81 30       	cpi	r24, 0x01	; 1
    2b2c:	91 05       	cpc	r25, r1
    2b2e:	49 f1       	breq	.+82     	; 0x2b82 <DIO_VidTogPinValue+0x76>
    2b30:	2b 81       	ldd	r18, Y+3	; 0x03
    2b32:	3c 81       	ldd	r19, Y+4	; 0x04
    2b34:	22 30       	cpi	r18, 0x02	; 2
    2b36:	31 05       	cpc	r19, r1
    2b38:	2c f4       	brge	.+10     	; 0x2b44 <DIO_VidTogPinValue+0x38>
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	61 f0       	breq	.+24     	; 0x2b5a <DIO_VidTogPinValue+0x4e>
    2b42:	5a c0       	rjmp	.+180    	; 0x2bf8 <DIO_VidTogPinValue+0xec>
    2b44:	2b 81       	ldd	r18, Y+3	; 0x03
    2b46:	3c 81       	ldd	r19, Y+4	; 0x04
    2b48:	22 30       	cpi	r18, 0x02	; 2
    2b4a:	31 05       	cpc	r19, r1
    2b4c:	71 f1       	breq	.+92     	; 0x2baa <DIO_VidTogPinValue+0x9e>
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	9c 81       	ldd	r25, Y+4	; 0x04
    2b52:	83 30       	cpi	r24, 0x03	; 3
    2b54:	91 05       	cpc	r25, r1
    2b56:	e9 f1       	breq	.+122    	; 0x2bd2 <DIO_VidTogPinValue+0xc6>
    2b58:	4f c0       	rjmp	.+158    	; 0x2bf8 <DIO_VidTogPinValue+0xec>
	{
	case 0 : TOG_BIT(PORTA,LOC_u8Pin); break;
    2b5a:	ab e3       	ldi	r26, 0x3B	; 59
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	eb e3       	ldi	r30, 0x3B	; 59
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	48 2f       	mov	r20, r24
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	28 2f       	mov	r18, r24
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	02 2e       	mov	r0, r18
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <DIO_VidTogPinValue+0x6c>
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	0a 94       	dec	r0
    2b7a:	e2 f7       	brpl	.-8      	; 0x2b74 <DIO_VidTogPinValue+0x68>
    2b7c:	84 27       	eor	r24, r20
    2b7e:	8c 93       	st	X, r24
    2b80:	3b c0       	rjmp	.+118    	; 0x2bf8 <DIO_VidTogPinValue+0xec>
	case 1 : TOG_BIT(PORTB,LOC_u8Pin); break;
    2b82:	a8 e3       	ldi	r26, 0x38	; 56
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e8 e3       	ldi	r30, 0x38	; 56
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	48 2f       	mov	r20, r24
    2b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	02 2e       	mov	r0, r18
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <DIO_VidTogPinValue+0x94>
    2b9c:	88 0f       	add	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	0a 94       	dec	r0
    2ba2:	e2 f7       	brpl	.-8      	; 0x2b9c <DIO_VidTogPinValue+0x90>
    2ba4:	84 27       	eor	r24, r20
    2ba6:	8c 93       	st	X, r24
    2ba8:	27 c0       	rjmp	.+78     	; 0x2bf8 <DIO_VidTogPinValue+0xec>
	case 2 : TOG_BIT(PORTC,LOC_u8Pin); break;
    2baa:	a5 e3       	ldi	r26, 0x35	; 53
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e5 e3       	ldi	r30, 0x35	; 53
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	48 2f       	mov	r20, r24
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	28 2f       	mov	r18, r24
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	02 2e       	mov	r0, r18
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <DIO_VidTogPinValue+0xbc>
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	0a 94       	dec	r0
    2bca:	e2 f7       	brpl	.-8      	; 0x2bc4 <DIO_VidTogPinValue+0xb8>
    2bcc:	84 27       	eor	r24, r20
    2bce:	8c 93       	st	X, r24
    2bd0:	13 c0       	rjmp	.+38     	; 0x2bf8 <DIO_VidTogPinValue+0xec>
	case 3 : TOG_BIT(PORTD,LOC_u8Pin); break;
    2bd2:	a2 e3       	ldi	r26, 0x32	; 50
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	e2 e3       	ldi	r30, 0x32	; 50
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	48 2f       	mov	r20, r24
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	28 2f       	mov	r18, r24
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	02 2e       	mov	r0, r18
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <DIO_VidTogPinValue+0xe4>
    2bec:	88 0f       	add	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	0a 94       	dec	r0
    2bf2:	e2 f7       	brpl	.-8      	; 0x2bec <DIO_VidTogPinValue+0xe0>
    2bf4:	84 27       	eor	r24, r20
    2bf6:	8c 93       	st	X, r24

	}
}
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 LOC_u8Port, u8 LOC_u8Pin )
{
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <DIO_u8GetPinValue+0x6>
    2c0c:	00 d0       	rcall	.+0      	; 0x2c0e <DIO_u8GetPinValue+0x8>
    2c0e:	0f 92       	push	r0
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
    2c14:	8a 83       	std	Y+2, r24	; 0x02
    2c16:	6b 83       	std	Y+3, r22	; 0x03
	u8 result = 0;
    2c18:	19 82       	std	Y+1, r1	; 0x01
	switch(LOC_u8Port)
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	3d 83       	std	Y+5, r19	; 0x05
    2c22:	2c 83       	std	Y+4, r18	; 0x04
    2c24:	4c 81       	ldd	r20, Y+4	; 0x04
    2c26:	5d 81       	ldd	r21, Y+5	; 0x05
    2c28:	41 30       	cpi	r20, 0x01	; 1
    2c2a:	51 05       	cpc	r21, r1
    2c2c:	41 f1       	breq	.+80     	; 0x2c7e <DIO_u8GetPinValue+0x78>
    2c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c30:	9d 81       	ldd	r25, Y+5	; 0x05
    2c32:	82 30       	cpi	r24, 0x02	; 2
    2c34:	91 05       	cpc	r25, r1
    2c36:	34 f4       	brge	.+12     	; 0x2c44 <DIO_u8GetPinValue+0x3e>
    2c38:	2c 81       	ldd	r18, Y+4	; 0x04
    2c3a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c3c:	21 15       	cp	r18, r1
    2c3e:	31 05       	cpc	r19, r1
    2c40:	61 f0       	breq	.+24     	; 0x2c5a <DIO_u8GetPinValue+0x54>
    2c42:	52 c0       	rjmp	.+164    	; 0x2ce8 <DIO_u8GetPinValue+0xe2>
    2c44:	4c 81       	ldd	r20, Y+4	; 0x04
    2c46:	5d 81       	ldd	r21, Y+5	; 0x05
    2c48:	42 30       	cpi	r20, 0x02	; 2
    2c4a:	51 05       	cpc	r21, r1
    2c4c:	51 f1       	breq	.+84     	; 0x2ca2 <DIO_u8GetPinValue+0x9c>
    2c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c50:	9d 81       	ldd	r25, Y+5	; 0x05
    2c52:	83 30       	cpi	r24, 0x03	; 3
    2c54:	91 05       	cpc	r25, r1
    2c56:	b9 f1       	breq	.+110    	; 0x2cc6 <DIO_u8GetPinValue+0xc0>
    2c58:	47 c0       	rjmp	.+142    	; 0x2ce8 <DIO_u8GetPinValue+0xe2>
	{
	case 0: result = GET_BIT(PINA,LOC_u8Pin) ; break ;
    2c5a:	e9 e3       	ldi	r30, 0x39	; 57
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	88 2f       	mov	r24, r24
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a9 01       	movw	r20, r18
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <DIO_u8GetPinValue+0x6c>
    2c6e:	55 95       	asr	r21
    2c70:	47 95       	ror	r20
    2c72:	8a 95       	dec	r24
    2c74:	e2 f7       	brpl	.-8      	; 0x2c6e <DIO_u8GetPinValue+0x68>
    2c76:	ca 01       	movw	r24, r20
    2c78:	81 70       	andi	r24, 0x01	; 1
    2c7a:	89 83       	std	Y+1, r24	; 0x01
    2c7c:	35 c0       	rjmp	.+106    	; 0x2ce8 <DIO_u8GetPinValue+0xe2>

	case 1: result = GET_BIT(PINB,LOC_u8Pin) ; break ;
    2c7e:	e6 e3       	ldi	r30, 0x36	; 54
    2c80:	f0 e0       	ldi	r31, 0x00	; 0
    2c82:	80 81       	ld	r24, Z
    2c84:	28 2f       	mov	r18, r24
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8a:	88 2f       	mov	r24, r24
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	a9 01       	movw	r20, r18
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <DIO_u8GetPinValue+0x90>
    2c92:	55 95       	asr	r21
    2c94:	47 95       	ror	r20
    2c96:	8a 95       	dec	r24
    2c98:	e2 f7       	brpl	.-8      	; 0x2c92 <DIO_u8GetPinValue+0x8c>
    2c9a:	ca 01       	movw	r24, r20
    2c9c:	81 70       	andi	r24, 0x01	; 1
    2c9e:	89 83       	std	Y+1, r24	; 0x01
    2ca0:	23 c0       	rjmp	.+70     	; 0x2ce8 <DIO_u8GetPinValue+0xe2>

	case 2: result = GET_BIT(PINC,LOC_u8Pin) ; break ;
    2ca2:	e3 e3       	ldi	r30, 0x33	; 51
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 81       	ld	r24, Z
    2ca8:	28 2f       	mov	r18, r24
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	8b 81       	ldd	r24, Y+3	; 0x03
    2cae:	88 2f       	mov	r24, r24
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	a9 01       	movw	r20, r18
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <DIO_u8GetPinValue+0xb4>
    2cb6:	55 95       	asr	r21
    2cb8:	47 95       	ror	r20
    2cba:	8a 95       	dec	r24
    2cbc:	e2 f7       	brpl	.-8      	; 0x2cb6 <DIO_u8GetPinValue+0xb0>
    2cbe:	ca 01       	movw	r24, r20
    2cc0:	81 70       	andi	r24, 0x01	; 1
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	11 c0       	rjmp	.+34     	; 0x2ce8 <DIO_u8GetPinValue+0xe2>

	case 3: result = GET_BIT(PIND,LOC_u8Pin) ; break ;
    2cc6:	e0 e3       	ldi	r30, 0x30	; 48
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	88 2f       	mov	r24, r24
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	a9 01       	movw	r20, r18
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <DIO_u8GetPinValue+0xd8>
    2cda:	55 95       	asr	r21
    2cdc:	47 95       	ror	r20
    2cde:	8a 95       	dec	r24
    2ce0:	e2 f7       	brpl	.-8      	; 0x2cda <DIO_u8GetPinValue+0xd4>
    2ce2:	ca 01       	movw	r24, r20
    2ce4:	81 70       	andi	r24, 0x01	; 1
    2ce6:	89 83       	std	Y+1, r24	; 0x01

	}

	return result;
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <DIO_VidSetPortDirection>:



void DIO_VidSetPortDirection(u8 LOC_u8Port,  u8 LOC_u8Mode )
{
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <DIO_VidSetPortDirection+0x6>
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <DIO_VidSetPortDirection+0x8>
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	89 83       	std	Y+1, r24	; 0x01
    2d08:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	28 2f       	mov	r18, r24
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	3c 83       	std	Y+4, r19	; 0x04
    2d12:	2b 83       	std	Y+3, r18	; 0x03
    2d14:	8b 81       	ldd	r24, Y+3	; 0x03
    2d16:	9c 81       	ldd	r25, Y+4	; 0x04
    2d18:	81 30       	cpi	r24, 0x01	; 1
    2d1a:	91 05       	cpc	r25, r1
    2d1c:	d1 f0       	breq	.+52     	; 0x2d52 <DIO_VidSetPortDirection+0x58>
    2d1e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d20:	3c 81       	ldd	r19, Y+4	; 0x04
    2d22:	22 30       	cpi	r18, 0x02	; 2
    2d24:	31 05       	cpc	r19, r1
    2d26:	2c f4       	brge	.+10     	; 0x2d32 <DIO_VidSetPortDirection+0x38>
    2d28:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	61 f0       	breq	.+24     	; 0x2d48 <DIO_VidSetPortDirection+0x4e>
    2d30:	1e c0       	rjmp	.+60     	; 0x2d6e <DIO_VidSetPortDirection+0x74>
    2d32:	2b 81       	ldd	r18, Y+3	; 0x03
    2d34:	3c 81       	ldd	r19, Y+4	; 0x04
    2d36:	22 30       	cpi	r18, 0x02	; 2
    2d38:	31 05       	cpc	r19, r1
    2d3a:	81 f0       	breq	.+32     	; 0x2d5c <DIO_VidSetPortDirection+0x62>
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d40:	83 30       	cpi	r24, 0x03	; 3
    2d42:	91 05       	cpc	r25, r1
    2d44:	81 f0       	breq	.+32     	; 0x2d66 <DIO_VidSetPortDirection+0x6c>
    2d46:	13 c0       	rjmp	.+38     	; 0x2d6e <DIO_VidSetPortDirection+0x74>
			{
			case 0 : DDRA = LOC_u8Mode;  break;
    2d48:	ea e3       	ldi	r30, 0x3A	; 58
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	80 83       	st	Z, r24
    2d50:	0e c0       	rjmp	.+28     	; 0x2d6e <DIO_VidSetPortDirection+0x74>
			case 1 : DDRB = LOC_u8Mode; break;
    2d52:	e7 e3       	ldi	r30, 0x37	; 55
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	80 83       	st	Z, r24
    2d5a:	09 c0       	rjmp	.+18     	; 0x2d6e <DIO_VidSetPortDirection+0x74>
			case 2 : DDRC = LOC_u8Mode; break;
    2d5c:	e4 e3       	ldi	r30, 0x34	; 52
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	8a 81       	ldd	r24, Y+2	; 0x02
    2d62:	80 83       	st	Z, r24
    2d64:	04 c0       	rjmp	.+8      	; 0x2d6e <DIO_VidSetPortDirection+0x74>
			case 3 : DDRD = LOC_u8Mode; break;
    2d66:	e1 e3       	ldi	r30, 0x31	; 49
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	80 83       	st	Z, r24

			}

}
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <DIO_VidSetPortValue>:


void DIO_VidSetPortValue(u8 LOC_u8Port, u8 LOC_u8Value )
{
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	00 d0       	rcall	.+0      	; 0x2d82 <DIO_VidSetPortValue+0x6>
    2d82:	00 d0       	rcall	.+0      	; 0x2d84 <DIO_VidSetPortValue+0x8>
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	89 83       	std	Y+1, r24	; 0x01
    2d8a:	6a 83       	std	Y+2, r22	; 0x02
	switch(LOC_u8Port)
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	28 2f       	mov	r18, r24
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	3c 83       	std	Y+4, r19	; 0x04
    2d94:	2b 83       	std	Y+3, r18	; 0x03
    2d96:	8b 81       	ldd	r24, Y+3	; 0x03
    2d98:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9a:	81 30       	cpi	r24, 0x01	; 1
    2d9c:	91 05       	cpc	r25, r1
    2d9e:	d1 f0       	breq	.+52     	; 0x2dd4 <DIO_VidSetPortValue+0x58>
    2da0:	2b 81       	ldd	r18, Y+3	; 0x03
    2da2:	3c 81       	ldd	r19, Y+4	; 0x04
    2da4:	22 30       	cpi	r18, 0x02	; 2
    2da6:	31 05       	cpc	r19, r1
    2da8:	2c f4       	brge	.+10     	; 0x2db4 <DIO_VidSetPortValue+0x38>
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	9c 81       	ldd	r25, Y+4	; 0x04
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	61 f0       	breq	.+24     	; 0x2dca <DIO_VidSetPortValue+0x4e>
    2db2:	1e c0       	rjmp	.+60     	; 0x2df0 <DIO_VidSetPortValue+0x74>
    2db4:	2b 81       	ldd	r18, Y+3	; 0x03
    2db6:	3c 81       	ldd	r19, Y+4	; 0x04
    2db8:	22 30       	cpi	r18, 0x02	; 2
    2dba:	31 05       	cpc	r19, r1
    2dbc:	81 f0       	breq	.+32     	; 0x2dde <DIO_VidSetPortValue+0x62>
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	83 30       	cpi	r24, 0x03	; 3
    2dc4:	91 05       	cpc	r25, r1
    2dc6:	81 f0       	breq	.+32     	; 0x2de8 <DIO_VidSetPortValue+0x6c>
    2dc8:	13 c0       	rjmp	.+38     	; 0x2df0 <DIO_VidSetPortValue+0x74>
				{
				case 0 : PORTA = LOC_u8Value;  break;
    2dca:	eb e3       	ldi	r30, 0x3B	; 59
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd0:	80 83       	st	Z, r24
    2dd2:	0e c0       	rjmp	.+28     	; 0x2df0 <DIO_VidSetPortValue+0x74>
				case 1 : PORTB = LOC_u8Value; break;
    2dd4:	e8 e3       	ldi	r30, 0x38	; 56
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dda:	80 83       	st	Z, r24
    2ddc:	09 c0       	rjmp	.+18     	; 0x2df0 <DIO_VidSetPortValue+0x74>
				case 2 : PORTC = LOC_u8Value; break;
    2dde:	e5 e3       	ldi	r30, 0x35	; 53
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	8a 81       	ldd	r24, Y+2	; 0x02
    2de4:	80 83       	st	Z, r24
    2de6:	04 c0       	rjmp	.+8      	; 0x2df0 <DIO_VidSetPortValue+0x74>
				case 3 : PORTD = LOC_u8Value; break;
    2de8:	e2 e3       	ldi	r30, 0x32	; 50
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	8a 81       	ldd	r24, Y+2	; 0x02
    2dee:	80 83       	st	Z, r24

				}

}
    2df0:	0f 90       	pop	r0
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	cf 91       	pop	r28
    2dfa:	df 91       	pop	r29
    2dfc:	08 95       	ret

00002dfe <DIO_VidInsPortValue>:


void DIO_VidInsPortValue(u8 LOC_u8Port,u8 LOC_u8Value, u8 LOC_u8No_bits, u8 LOC_u8offset)
{
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
    2e06:	28 97       	sbiw	r28, 0x08	; 8
    2e08:	0f b6       	in	r0, 0x3f	; 63
    2e0a:	f8 94       	cli
    2e0c:	de bf       	out	0x3e, r29	; 62
    2e0e:	0f be       	out	0x3f, r0	; 63
    2e10:	cd bf       	out	0x3d, r28	; 61
    2e12:	8b 83       	std	Y+3, r24	; 0x03
    2e14:	6c 83       	std	Y+4, r22	; 0x04
    2e16:	4d 83       	std	Y+5, r20	; 0x05
    2e18:	2e 83       	std	Y+6, r18	; 0x06
	u8 prep = 0 ;
    2e1a:	1a 82       	std	Y+2, r1	; 0x02
	u8 shield = 0 ;
    2e1c:	19 82       	std	Y+1, r1	; 0x01

	/* 1. prepare offset value */
	prep = (LOC_u8Value<<LOC_u8offset);
    2e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e20:	28 2f       	mov	r18, r24
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	8e 81       	ldd	r24, Y+6	; 0x06
    2e26:	88 2f       	mov	r24, r24
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	a9 01       	movw	r20, r18
    2e2c:	02 c0       	rjmp	.+4      	; 0x2e32 <DIO_VidInsPortValue+0x34>
    2e2e:	44 0f       	add	r20, r20
    2e30:	55 1f       	adc	r21, r21
    2e32:	8a 95       	dec	r24
    2e34:	e2 f7       	brpl	.-8      	; 0x2e2e <DIO_VidInsPortValue+0x30>
    2e36:	ca 01       	movw	r24, r20
    2e38:	8a 83       	std	Y+2, r24	; 0x02
	/* 2. prepare shield mask */
	shield = (((1<<LOC_u8No_bits)-1)<<LOC_u8offset); //shield = (2^(No_bits)-1)<<offset ;
    2e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <DIO_VidInsPortValue+0x4c>
    2e46:	88 0f       	add	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	2a 95       	dec	r18
    2e4c:	e2 f7       	brpl	.-8      	; 0x2e46 <DIO_VidInsPortValue+0x48>
    2e4e:	9c 01       	movw	r18, r24
    2e50:	21 50       	subi	r18, 0x01	; 1
    2e52:	30 40       	sbci	r19, 0x00	; 0
    2e54:	8e 81       	ldd	r24, Y+6	; 0x06
    2e56:	88 2f       	mov	r24, r24
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	a9 01       	movw	r20, r18
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <DIO_VidInsPortValue+0x64>
    2e5e:	44 0f       	add	r20, r20
    2e60:	55 1f       	adc	r21, r21
    2e62:	8a 95       	dec	r24
    2e64:	e2 f7       	brpl	.-8      	; 0x2e5e <DIO_VidInsPortValue+0x60>
    2e66:	ca 01       	movw	r24, r20
    2e68:	89 83       	std	Y+1, r24	; 0x01

	/* 3. combine the shield and the prepared value to output to the port*/
	switch(LOC_u8Port)
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	28 2f       	mov	r18, r24
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	38 87       	std	Y+8, r19	; 0x08
    2e72:	2f 83       	std	Y+7, r18	; 0x07
    2e74:	4f 81       	ldd	r20, Y+7	; 0x07
    2e76:	58 85       	ldd	r21, Y+8	; 0x08
    2e78:	41 30       	cpi	r20, 0x01	; 1
    2e7a:	51 05       	cpc	r21, r1
    2e7c:	31 f1       	breq	.+76     	; 0x2eca <DIO_VidInsPortValue+0xcc>
    2e7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e80:	98 85       	ldd	r25, Y+8	; 0x08
    2e82:	82 30       	cpi	r24, 0x02	; 2
    2e84:	91 05       	cpc	r25, r1
    2e86:	34 f4       	brge	.+12     	; 0x2e94 <DIO_VidInsPortValue+0x96>
    2e88:	2f 81       	ldd	r18, Y+7	; 0x07
    2e8a:	38 85       	ldd	r19, Y+8	; 0x08
    2e8c:	21 15       	cp	r18, r1
    2e8e:	31 05       	cpc	r19, r1
    2e90:	61 f0       	breq	.+24     	; 0x2eaa <DIO_VidInsPortValue+0xac>
    2e92:	4a c0       	rjmp	.+148    	; 0x2f28 <DIO_VidInsPortValue+0x12a>
    2e94:	4f 81       	ldd	r20, Y+7	; 0x07
    2e96:	58 85       	ldd	r21, Y+8	; 0x08
    2e98:	42 30       	cpi	r20, 0x02	; 2
    2e9a:	51 05       	cpc	r21, r1
    2e9c:	31 f1       	breq	.+76     	; 0x2eea <DIO_VidInsPortValue+0xec>
    2e9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2ea0:	98 85       	ldd	r25, Y+8	; 0x08
    2ea2:	83 30       	cpi	r24, 0x03	; 3
    2ea4:	91 05       	cpc	r25, r1
    2ea6:	89 f1       	breq	.+98     	; 0x2f0a <DIO_VidInsPortValue+0x10c>
    2ea8:	3f c0       	rjmp	.+126    	; 0x2f28 <DIO_VidInsPortValue+0x12a>
	{
	case 0 : PORTA = (PORTA & (~shield)) | (prep & shield) ;  break;
    2eaa:	ab e3       	ldi	r26, 0x3B	; 59
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	eb e3       	ldi	r30, 0x3B	; 59
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	98 2f       	mov	r25, r24
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	80 95       	com	r24
    2eba:	29 2f       	mov	r18, r25
    2ebc:	28 23       	and	r18, r24
    2ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	89 23       	and	r24, r25
    2ec4:	82 2b       	or	r24, r18
    2ec6:	8c 93       	st	X, r24
    2ec8:	2f c0       	rjmp	.+94     	; 0x2f28 <DIO_VidInsPortValue+0x12a>
	case 1 : PORTB = (PORTB & (~shield)) | (prep & shield) ;  break;
    2eca:	a8 e3       	ldi	r26, 0x38	; 56
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	e8 e3       	ldi	r30, 0x38	; 56
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	98 2f       	mov	r25, r24
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	80 95       	com	r24
    2eda:	29 2f       	mov	r18, r25
    2edc:	28 23       	and	r18, r24
    2ede:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	89 23       	and	r24, r25
    2ee4:	82 2b       	or	r24, r18
    2ee6:	8c 93       	st	X, r24
    2ee8:	1f c0       	rjmp	.+62     	; 0x2f28 <DIO_VidInsPortValue+0x12a>
	case 2 : PORTC = (PORTC & (~shield)) | (prep & shield) ;  break;
    2eea:	a5 e3       	ldi	r26, 0x35	; 53
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	e5 e3       	ldi	r30, 0x35	; 53
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	98 2f       	mov	r25, r24
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	80 95       	com	r24
    2efa:	29 2f       	mov	r18, r25
    2efc:	28 23       	and	r18, r24
    2efe:	9a 81       	ldd	r25, Y+2	; 0x02
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	89 23       	and	r24, r25
    2f04:	82 2b       	or	r24, r18
    2f06:	8c 93       	st	X, r24
    2f08:	0f c0       	rjmp	.+30     	; 0x2f28 <DIO_VidInsPortValue+0x12a>
	case 3 : PORTD = (PORTD & (~shield)) | (prep & shield) ;  break;
    2f0a:	a2 e3       	ldi	r26, 0x32	; 50
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e2 e3       	ldi	r30, 0x32	; 50
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	98 2f       	mov	r25, r24
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	80 95       	com	r24
    2f1a:	29 2f       	mov	r18, r25
    2f1c:	28 23       	and	r18, r24
    2f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	89 23       	and	r24, r25
    2f24:	82 2b       	or	r24, r18
    2f26:	8c 93       	st	X, r24

	}
}
    2f28:	28 96       	adiw	r28, 0x08	; 8
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	08 95       	ret

00002f3a <DIO_u8GetPortValue>:


u8 DIO_u8GetPortValue(u8 LOC_u8Port)
{
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	00 d0       	rcall	.+0      	; 0x2f40 <DIO_u8GetPortValue+0x6>
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <DIO_u8GetPortValue+0x8>
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	8a 83       	std	Y+2, r24	; 0x02
	u8 result = 0;
    2f48:	19 82       	std	Y+1, r1	; 0x01
		switch(LOC_u8Port)
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	3c 83       	std	Y+4, r19	; 0x04
    2f52:	2b 83       	std	Y+3, r18	; 0x03
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	9c 81       	ldd	r25, Y+4	; 0x04
    2f58:	81 30       	cpi	r24, 0x01	; 1
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	d1 f0       	breq	.+52     	; 0x2f92 <DIO_u8GetPortValue+0x58>
    2f5e:	2b 81       	ldd	r18, Y+3	; 0x03
    2f60:	3c 81       	ldd	r19, Y+4	; 0x04
    2f62:	22 30       	cpi	r18, 0x02	; 2
    2f64:	31 05       	cpc	r19, r1
    2f66:	2c f4       	brge	.+10     	; 0x2f72 <DIO_u8GetPortValue+0x38>
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	61 f0       	breq	.+24     	; 0x2f88 <DIO_u8GetPortValue+0x4e>
    2f70:	1e c0       	rjmp	.+60     	; 0x2fae <DIO_u8GetPortValue+0x74>
    2f72:	2b 81       	ldd	r18, Y+3	; 0x03
    2f74:	3c 81       	ldd	r19, Y+4	; 0x04
    2f76:	22 30       	cpi	r18, 0x02	; 2
    2f78:	31 05       	cpc	r19, r1
    2f7a:	81 f0       	breq	.+32     	; 0x2f9c <DIO_u8GetPortValue+0x62>
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f80:	83 30       	cpi	r24, 0x03	; 3
    2f82:	91 05       	cpc	r25, r1
    2f84:	81 f0       	breq	.+32     	; 0x2fa6 <DIO_u8GetPortValue+0x6c>
    2f86:	13 c0       	rjmp	.+38     	; 0x2fae <DIO_u8GetPortValue+0x74>
		{
		case 0: result=PINA; break ;
    2f88:	e9 e3       	ldi	r30, 0x39	; 57
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	80 81       	ld	r24, Z
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	0e c0       	rjmp	.+28     	; 0x2fae <DIO_u8GetPortValue+0x74>

		case 1: result=PINB; break ;
    2f92:	e6 e3       	ldi	r30, 0x36	; 54
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	89 83       	std	Y+1, r24	; 0x01
    2f9a:	09 c0       	rjmp	.+18     	; 0x2fae <DIO_u8GetPortValue+0x74>

		case 2: result=PINC; break ;
    2f9c:	e3 e3       	ldi	r30, 0x33	; 51
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	80 81       	ld	r24, Z
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	04 c0       	rjmp	.+8      	; 0x2fae <DIO_u8GetPortValue+0x74>

		case 3: result=PIND; break ;
    2fa6:	e0 e3       	ldi	r30, 0x30	; 48
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	89 83       	std	Y+1, r24	; 0x01

		}

		return result;
    2fae:	89 81       	ldd	r24, Y+1	; 0x01

}
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	08 95       	ret

00002fbe <main>:




int main(void)
{
    2fbe:	df 93       	push	r29
    2fc0:	cf 93       	push	r28
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	ff cf       	rjmp	.-2      	; 0x2fc6 <main+0x8>

00002fc8 <__prologue_saves__>:
    2fc8:	2f 92       	push	r2
    2fca:	3f 92       	push	r3
    2fcc:	4f 92       	push	r4
    2fce:	5f 92       	push	r5
    2fd0:	6f 92       	push	r6
    2fd2:	7f 92       	push	r7
    2fd4:	8f 92       	push	r8
    2fd6:	9f 92       	push	r9
    2fd8:	af 92       	push	r10
    2fda:	bf 92       	push	r11
    2fdc:	cf 92       	push	r12
    2fde:	df 92       	push	r13
    2fe0:	ef 92       	push	r14
    2fe2:	ff 92       	push	r15
    2fe4:	0f 93       	push	r16
    2fe6:	1f 93       	push	r17
    2fe8:	cf 93       	push	r28
    2fea:	df 93       	push	r29
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	ca 1b       	sub	r28, r26
    2ff2:	db 0b       	sbc	r29, r27
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	09 94       	ijmp

00003000 <__epilogue_restores__>:
    3000:	2a 88       	ldd	r2, Y+18	; 0x12
    3002:	39 88       	ldd	r3, Y+17	; 0x11
    3004:	48 88       	ldd	r4, Y+16	; 0x10
    3006:	5f 84       	ldd	r5, Y+15	; 0x0f
    3008:	6e 84       	ldd	r6, Y+14	; 0x0e
    300a:	7d 84       	ldd	r7, Y+13	; 0x0d
    300c:	8c 84       	ldd	r8, Y+12	; 0x0c
    300e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3010:	aa 84       	ldd	r10, Y+10	; 0x0a
    3012:	b9 84       	ldd	r11, Y+9	; 0x09
    3014:	c8 84       	ldd	r12, Y+8	; 0x08
    3016:	df 80       	ldd	r13, Y+7	; 0x07
    3018:	ee 80       	ldd	r14, Y+6	; 0x06
    301a:	fd 80       	ldd	r15, Y+5	; 0x05
    301c:	0c 81       	ldd	r16, Y+4	; 0x04
    301e:	1b 81       	ldd	r17, Y+3	; 0x03
    3020:	aa 81       	ldd	r26, Y+2	; 0x02
    3022:	b9 81       	ldd	r27, Y+1	; 0x01
    3024:	ce 0f       	add	r28, r30
    3026:	d1 1d       	adc	r29, r1
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	ed 01       	movw	r28, r26
    3034:	08 95       	ret

00003036 <snprintf>:
    3036:	ae e0       	ldi	r26, 0x0E	; 14
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	e1 e2       	ldi	r30, 0x21	; 33
    303c:	f8 e1       	ldi	r31, 0x18	; 24
    303e:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__+0x1c>
    3042:	0d 89       	ldd	r16, Y+21	; 0x15
    3044:	1e 89       	ldd	r17, Y+22	; 0x16
    3046:	8f 89       	ldd	r24, Y+23	; 0x17
    3048:	98 8d       	ldd	r25, Y+24	; 0x18
    304a:	97 ff       	sbrs	r25, 7
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <snprintf+0x1c>
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	90 e8       	ldi	r25, 0x80	; 128
    3052:	01 97       	sbiw	r24, 0x01	; 1
    3054:	9e 83       	std	Y+6, r25	; 0x06
    3056:	8d 83       	std	Y+5, r24	; 0x05
    3058:	1a 83       	std	Y+2, r17	; 0x02
    305a:	09 83       	std	Y+1, r16	; 0x01
    305c:	86 e0       	ldi	r24, 0x06	; 6
    305e:	8c 83       	std	Y+4, r24	; 0x04
    3060:	9e 01       	movw	r18, r28
    3062:	25 5e       	subi	r18, 0xE5	; 229
    3064:	3f 4f       	sbci	r19, 0xFF	; 255
    3066:	ce 01       	movw	r24, r28
    3068:	01 96       	adiw	r24, 0x01	; 1
    306a:	69 8d       	ldd	r22, Y+25	; 0x19
    306c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    306e:	a9 01       	movw	r20, r18
    3070:	0e 94 4c 18 	call	0x3098	; 0x3098 <vfprintf>
    3074:	4d 81       	ldd	r20, Y+5	; 0x05
    3076:	5e 81       	ldd	r21, Y+6	; 0x06
    3078:	57 fd       	sbrc	r21, 7
    307a:	0a c0       	rjmp	.+20     	; 0x3090 <snprintf+0x5a>
    307c:	2f 81       	ldd	r18, Y+7	; 0x07
    307e:	38 85       	ldd	r19, Y+8	; 0x08
    3080:	42 17       	cp	r20, r18
    3082:	53 07       	cpc	r21, r19
    3084:	0c f4       	brge	.+2      	; 0x3088 <snprintf+0x52>
    3086:	9a 01       	movw	r18, r20
    3088:	02 0f       	add	r16, r18
    308a:	13 1f       	adc	r17, r19
    308c:	f8 01       	movw	r30, r16
    308e:	10 82       	st	Z, r1
    3090:	2e 96       	adiw	r28, 0x0e	; 14
    3092:	e4 e0       	ldi	r30, 0x04	; 4
    3094:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__+0x1c>

00003098 <vfprintf>:
    3098:	ab e0       	ldi	r26, 0x0B	; 11
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	e2 e5       	ldi	r30, 0x52	; 82
    309e:	f8 e1       	ldi	r31, 0x18	; 24
    30a0:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__>
    30a4:	3c 01       	movw	r6, r24
    30a6:	2b 01       	movw	r4, r22
    30a8:	5a 01       	movw	r10, r20
    30aa:	fc 01       	movw	r30, r24
    30ac:	17 82       	std	Z+7, r1	; 0x07
    30ae:	16 82       	std	Z+6, r1	; 0x06
    30b0:	83 81       	ldd	r24, Z+3	; 0x03
    30b2:	81 fd       	sbrc	r24, 1
    30b4:	03 c0       	rjmp	.+6      	; 0x30bc <vfprintf+0x24>
    30b6:	6f ef       	ldi	r22, 0xFF	; 255
    30b8:	7f ef       	ldi	r23, 0xFF	; 255
    30ba:	c6 c1       	rjmp	.+908    	; 0x3448 <vfprintf+0x3b0>
    30bc:	9a e0       	ldi	r25, 0x0A	; 10
    30be:	89 2e       	mov	r8, r25
    30c0:	1e 01       	movw	r2, r28
    30c2:	08 94       	sec
    30c4:	21 1c       	adc	r2, r1
    30c6:	31 1c       	adc	r3, r1
    30c8:	f3 01       	movw	r30, r6
    30ca:	23 81       	ldd	r18, Z+3	; 0x03
    30cc:	f2 01       	movw	r30, r4
    30ce:	23 fd       	sbrc	r18, 3
    30d0:	85 91       	lpm	r24, Z+
    30d2:	23 ff       	sbrs	r18, 3
    30d4:	81 91       	ld	r24, Z+
    30d6:	2f 01       	movw	r4, r30
    30d8:	88 23       	and	r24, r24
    30da:	09 f4       	brne	.+2      	; 0x30de <vfprintf+0x46>
    30dc:	b2 c1       	rjmp	.+868    	; 0x3442 <vfprintf+0x3aa>
    30de:	85 32       	cpi	r24, 0x25	; 37
    30e0:	39 f4       	brne	.+14     	; 0x30f0 <vfprintf+0x58>
    30e2:	23 fd       	sbrc	r18, 3
    30e4:	85 91       	lpm	r24, Z+
    30e6:	23 ff       	sbrs	r18, 3
    30e8:	81 91       	ld	r24, Z+
    30ea:	2f 01       	movw	r4, r30
    30ec:	85 32       	cpi	r24, 0x25	; 37
    30ee:	29 f4       	brne	.+10     	; 0x30fa <vfprintf+0x62>
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	b3 01       	movw	r22, r6
    30f4:	0e 94 3f 1a 	call	0x347e	; 0x347e <fputc>
    30f8:	e7 cf       	rjmp	.-50     	; 0x30c8 <vfprintf+0x30>
    30fa:	98 2f       	mov	r25, r24
    30fc:	ff 24       	eor	r15, r15
    30fe:	ee 24       	eor	r14, r14
    3100:	99 24       	eor	r9, r9
    3102:	ff e1       	ldi	r31, 0x1F	; 31
    3104:	ff 15       	cp	r31, r15
    3106:	d0 f0       	brcs	.+52     	; 0x313c <vfprintf+0xa4>
    3108:	9b 32       	cpi	r25, 0x2B	; 43
    310a:	69 f0       	breq	.+26     	; 0x3126 <vfprintf+0x8e>
    310c:	9c 32       	cpi	r25, 0x2C	; 44
    310e:	28 f4       	brcc	.+10     	; 0x311a <vfprintf+0x82>
    3110:	90 32       	cpi	r25, 0x20	; 32
    3112:	59 f0       	breq	.+22     	; 0x312a <vfprintf+0x92>
    3114:	93 32       	cpi	r25, 0x23	; 35
    3116:	91 f4       	brne	.+36     	; 0x313c <vfprintf+0xa4>
    3118:	0e c0       	rjmp	.+28     	; 0x3136 <vfprintf+0x9e>
    311a:	9d 32       	cpi	r25, 0x2D	; 45
    311c:	49 f0       	breq	.+18     	; 0x3130 <vfprintf+0x98>
    311e:	90 33       	cpi	r25, 0x30	; 48
    3120:	69 f4       	brne	.+26     	; 0x313c <vfprintf+0xa4>
    3122:	41 e0       	ldi	r20, 0x01	; 1
    3124:	24 c0       	rjmp	.+72     	; 0x316e <vfprintf+0xd6>
    3126:	52 e0       	ldi	r21, 0x02	; 2
    3128:	f5 2a       	or	r15, r21
    312a:	84 e0       	ldi	r24, 0x04	; 4
    312c:	f8 2a       	or	r15, r24
    312e:	28 c0       	rjmp	.+80     	; 0x3180 <vfprintf+0xe8>
    3130:	98 e0       	ldi	r25, 0x08	; 8
    3132:	f9 2a       	or	r15, r25
    3134:	25 c0       	rjmp	.+74     	; 0x3180 <vfprintf+0xe8>
    3136:	e0 e1       	ldi	r30, 0x10	; 16
    3138:	fe 2a       	or	r15, r30
    313a:	22 c0       	rjmp	.+68     	; 0x3180 <vfprintf+0xe8>
    313c:	f7 fc       	sbrc	r15, 7
    313e:	29 c0       	rjmp	.+82     	; 0x3192 <vfprintf+0xfa>
    3140:	89 2f       	mov	r24, r25
    3142:	80 53       	subi	r24, 0x30	; 48
    3144:	8a 30       	cpi	r24, 0x0A	; 10
    3146:	70 f4       	brcc	.+28     	; 0x3164 <vfprintf+0xcc>
    3148:	f6 fe       	sbrs	r15, 6
    314a:	05 c0       	rjmp	.+10     	; 0x3156 <vfprintf+0xbe>
    314c:	98 9c       	mul	r9, r8
    314e:	90 2c       	mov	r9, r0
    3150:	11 24       	eor	r1, r1
    3152:	98 0e       	add	r9, r24
    3154:	15 c0       	rjmp	.+42     	; 0x3180 <vfprintf+0xe8>
    3156:	e8 9c       	mul	r14, r8
    3158:	e0 2c       	mov	r14, r0
    315a:	11 24       	eor	r1, r1
    315c:	e8 0e       	add	r14, r24
    315e:	f0 e2       	ldi	r31, 0x20	; 32
    3160:	ff 2a       	or	r15, r31
    3162:	0e c0       	rjmp	.+28     	; 0x3180 <vfprintf+0xe8>
    3164:	9e 32       	cpi	r25, 0x2E	; 46
    3166:	29 f4       	brne	.+10     	; 0x3172 <vfprintf+0xda>
    3168:	f6 fc       	sbrc	r15, 6
    316a:	6b c1       	rjmp	.+726    	; 0x3442 <vfprintf+0x3aa>
    316c:	40 e4       	ldi	r20, 0x40	; 64
    316e:	f4 2a       	or	r15, r20
    3170:	07 c0       	rjmp	.+14     	; 0x3180 <vfprintf+0xe8>
    3172:	9c 36       	cpi	r25, 0x6C	; 108
    3174:	19 f4       	brne	.+6      	; 0x317c <vfprintf+0xe4>
    3176:	50 e8       	ldi	r21, 0x80	; 128
    3178:	f5 2a       	or	r15, r21
    317a:	02 c0       	rjmp	.+4      	; 0x3180 <vfprintf+0xe8>
    317c:	98 36       	cpi	r25, 0x68	; 104
    317e:	49 f4       	brne	.+18     	; 0x3192 <vfprintf+0xfa>
    3180:	f2 01       	movw	r30, r4
    3182:	23 fd       	sbrc	r18, 3
    3184:	95 91       	lpm	r25, Z+
    3186:	23 ff       	sbrs	r18, 3
    3188:	91 91       	ld	r25, Z+
    318a:	2f 01       	movw	r4, r30
    318c:	99 23       	and	r25, r25
    318e:	09 f0       	breq	.+2      	; 0x3192 <vfprintf+0xfa>
    3190:	b8 cf       	rjmp	.-144    	; 0x3102 <vfprintf+0x6a>
    3192:	89 2f       	mov	r24, r25
    3194:	85 54       	subi	r24, 0x45	; 69
    3196:	83 30       	cpi	r24, 0x03	; 3
    3198:	18 f0       	brcs	.+6      	; 0x31a0 <vfprintf+0x108>
    319a:	80 52       	subi	r24, 0x20	; 32
    319c:	83 30       	cpi	r24, 0x03	; 3
    319e:	38 f4       	brcc	.+14     	; 0x31ae <vfprintf+0x116>
    31a0:	44 e0       	ldi	r20, 0x04	; 4
    31a2:	50 e0       	ldi	r21, 0x00	; 0
    31a4:	a4 0e       	add	r10, r20
    31a6:	b5 1e       	adc	r11, r21
    31a8:	5f e3       	ldi	r21, 0x3F	; 63
    31aa:	59 83       	std	Y+1, r21	; 0x01
    31ac:	0f c0       	rjmp	.+30     	; 0x31cc <vfprintf+0x134>
    31ae:	93 36       	cpi	r25, 0x63	; 99
    31b0:	31 f0       	breq	.+12     	; 0x31be <vfprintf+0x126>
    31b2:	93 37       	cpi	r25, 0x73	; 115
    31b4:	79 f0       	breq	.+30     	; 0x31d4 <vfprintf+0x13c>
    31b6:	93 35       	cpi	r25, 0x53	; 83
    31b8:	09 f0       	breq	.+2      	; 0x31bc <vfprintf+0x124>
    31ba:	56 c0       	rjmp	.+172    	; 0x3268 <vfprintf+0x1d0>
    31bc:	20 c0       	rjmp	.+64     	; 0x31fe <vfprintf+0x166>
    31be:	f5 01       	movw	r30, r10
    31c0:	80 81       	ld	r24, Z
    31c2:	89 83       	std	Y+1, r24	; 0x01
    31c4:	42 e0       	ldi	r20, 0x02	; 2
    31c6:	50 e0       	ldi	r21, 0x00	; 0
    31c8:	a4 0e       	add	r10, r20
    31ca:	b5 1e       	adc	r11, r21
    31cc:	61 01       	movw	r12, r2
    31ce:	01 e0       	ldi	r16, 0x01	; 1
    31d0:	10 e0       	ldi	r17, 0x00	; 0
    31d2:	12 c0       	rjmp	.+36     	; 0x31f8 <vfprintf+0x160>
    31d4:	f5 01       	movw	r30, r10
    31d6:	c0 80       	ld	r12, Z
    31d8:	d1 80       	ldd	r13, Z+1	; 0x01
    31da:	f6 fc       	sbrc	r15, 6
    31dc:	03 c0       	rjmp	.+6      	; 0x31e4 <vfprintf+0x14c>
    31de:	6f ef       	ldi	r22, 0xFF	; 255
    31e0:	7f ef       	ldi	r23, 0xFF	; 255
    31e2:	02 c0       	rjmp	.+4      	; 0x31e8 <vfprintf+0x150>
    31e4:	69 2d       	mov	r22, r9
    31e6:	70 e0       	ldi	r23, 0x00	; 0
    31e8:	42 e0       	ldi	r20, 0x02	; 2
    31ea:	50 e0       	ldi	r21, 0x00	; 0
    31ec:	a4 0e       	add	r10, r20
    31ee:	b5 1e       	adc	r11, r21
    31f0:	c6 01       	movw	r24, r12
    31f2:	0e 94 34 1a 	call	0x3468	; 0x3468 <strnlen>
    31f6:	8c 01       	movw	r16, r24
    31f8:	5f e7       	ldi	r21, 0x7F	; 127
    31fa:	f5 22       	and	r15, r21
    31fc:	14 c0       	rjmp	.+40     	; 0x3226 <vfprintf+0x18e>
    31fe:	f5 01       	movw	r30, r10
    3200:	c0 80       	ld	r12, Z
    3202:	d1 80       	ldd	r13, Z+1	; 0x01
    3204:	f6 fc       	sbrc	r15, 6
    3206:	03 c0       	rjmp	.+6      	; 0x320e <vfprintf+0x176>
    3208:	6f ef       	ldi	r22, 0xFF	; 255
    320a:	7f ef       	ldi	r23, 0xFF	; 255
    320c:	02 c0       	rjmp	.+4      	; 0x3212 <vfprintf+0x17a>
    320e:	69 2d       	mov	r22, r9
    3210:	70 e0       	ldi	r23, 0x00	; 0
    3212:	42 e0       	ldi	r20, 0x02	; 2
    3214:	50 e0       	ldi	r21, 0x00	; 0
    3216:	a4 0e       	add	r10, r20
    3218:	b5 1e       	adc	r11, r21
    321a:	c6 01       	movw	r24, r12
    321c:	0e 94 29 1a 	call	0x3452	; 0x3452 <strnlen_P>
    3220:	8c 01       	movw	r16, r24
    3222:	50 e8       	ldi	r21, 0x80	; 128
    3224:	f5 2a       	or	r15, r21
    3226:	f3 fe       	sbrs	r15, 3
    3228:	07 c0       	rjmp	.+14     	; 0x3238 <vfprintf+0x1a0>
    322a:	1a c0       	rjmp	.+52     	; 0x3260 <vfprintf+0x1c8>
    322c:	80 e2       	ldi	r24, 0x20	; 32
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	b3 01       	movw	r22, r6
    3232:	0e 94 3f 1a 	call	0x347e	; 0x347e <fputc>
    3236:	ea 94       	dec	r14
    3238:	8e 2d       	mov	r24, r14
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	08 17       	cp	r16, r24
    323e:	19 07       	cpc	r17, r25
    3240:	a8 f3       	brcs	.-22     	; 0x322c <vfprintf+0x194>
    3242:	0e c0       	rjmp	.+28     	; 0x3260 <vfprintf+0x1c8>
    3244:	f6 01       	movw	r30, r12
    3246:	f7 fc       	sbrc	r15, 7
    3248:	85 91       	lpm	r24, Z+
    324a:	f7 fe       	sbrs	r15, 7
    324c:	81 91       	ld	r24, Z+
    324e:	6f 01       	movw	r12, r30
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	b3 01       	movw	r22, r6
    3254:	0e 94 3f 1a 	call	0x347e	; 0x347e <fputc>
    3258:	e1 10       	cpse	r14, r1
    325a:	ea 94       	dec	r14
    325c:	01 50       	subi	r16, 0x01	; 1
    325e:	10 40       	sbci	r17, 0x00	; 0
    3260:	01 15       	cp	r16, r1
    3262:	11 05       	cpc	r17, r1
    3264:	79 f7       	brne	.-34     	; 0x3244 <vfprintf+0x1ac>
    3266:	ea c0       	rjmp	.+468    	; 0x343c <vfprintf+0x3a4>
    3268:	94 36       	cpi	r25, 0x64	; 100
    326a:	11 f0       	breq	.+4      	; 0x3270 <vfprintf+0x1d8>
    326c:	99 36       	cpi	r25, 0x69	; 105
    326e:	69 f5       	brne	.+90     	; 0x32ca <vfprintf+0x232>
    3270:	f7 fe       	sbrs	r15, 7
    3272:	08 c0       	rjmp	.+16     	; 0x3284 <vfprintf+0x1ec>
    3274:	f5 01       	movw	r30, r10
    3276:	20 81       	ld	r18, Z
    3278:	31 81       	ldd	r19, Z+1	; 0x01
    327a:	42 81       	ldd	r20, Z+2	; 0x02
    327c:	53 81       	ldd	r21, Z+3	; 0x03
    327e:	84 e0       	ldi	r24, 0x04	; 4
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	0a c0       	rjmp	.+20     	; 0x3298 <vfprintf+0x200>
    3284:	f5 01       	movw	r30, r10
    3286:	80 81       	ld	r24, Z
    3288:	91 81       	ldd	r25, Z+1	; 0x01
    328a:	9c 01       	movw	r18, r24
    328c:	44 27       	eor	r20, r20
    328e:	37 fd       	sbrc	r19, 7
    3290:	40 95       	com	r20
    3292:	54 2f       	mov	r21, r20
    3294:	82 e0       	ldi	r24, 0x02	; 2
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	a8 0e       	add	r10, r24
    329a:	b9 1e       	adc	r11, r25
    329c:	9f e6       	ldi	r25, 0x6F	; 111
    329e:	f9 22       	and	r15, r25
    32a0:	57 ff       	sbrs	r21, 7
    32a2:	09 c0       	rjmp	.+18     	; 0x32b6 <vfprintf+0x21e>
    32a4:	50 95       	com	r21
    32a6:	40 95       	com	r20
    32a8:	30 95       	com	r19
    32aa:	21 95       	neg	r18
    32ac:	3f 4f       	sbci	r19, 0xFF	; 255
    32ae:	4f 4f       	sbci	r20, 0xFF	; 255
    32b0:	5f 4f       	sbci	r21, 0xFF	; 255
    32b2:	e0 e8       	ldi	r30, 0x80	; 128
    32b4:	fe 2a       	or	r15, r30
    32b6:	ca 01       	movw	r24, r20
    32b8:	b9 01       	movw	r22, r18
    32ba:	a1 01       	movw	r20, r2
    32bc:	2a e0       	ldi	r18, 0x0A	; 10
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__ultoa_invert>
    32c4:	d8 2e       	mov	r13, r24
    32c6:	d2 18       	sub	r13, r2
    32c8:	40 c0       	rjmp	.+128    	; 0x334a <vfprintf+0x2b2>
    32ca:	95 37       	cpi	r25, 0x75	; 117
    32cc:	29 f4       	brne	.+10     	; 0x32d8 <vfprintf+0x240>
    32ce:	1f 2d       	mov	r17, r15
    32d0:	1f 7e       	andi	r17, 0xEF	; 239
    32d2:	2a e0       	ldi	r18, 0x0A	; 10
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	1d c0       	rjmp	.+58     	; 0x3312 <vfprintf+0x27a>
    32d8:	1f 2d       	mov	r17, r15
    32da:	19 7f       	andi	r17, 0xF9	; 249
    32dc:	9f 36       	cpi	r25, 0x6F	; 111
    32de:	61 f0       	breq	.+24     	; 0x32f8 <vfprintf+0x260>
    32e0:	90 37       	cpi	r25, 0x70	; 112
    32e2:	20 f4       	brcc	.+8      	; 0x32ec <vfprintf+0x254>
    32e4:	98 35       	cpi	r25, 0x58	; 88
    32e6:	09 f0       	breq	.+2      	; 0x32ea <vfprintf+0x252>
    32e8:	ac c0       	rjmp	.+344    	; 0x3442 <vfprintf+0x3aa>
    32ea:	0f c0       	rjmp	.+30     	; 0x330a <vfprintf+0x272>
    32ec:	90 37       	cpi	r25, 0x70	; 112
    32ee:	39 f0       	breq	.+14     	; 0x32fe <vfprintf+0x266>
    32f0:	98 37       	cpi	r25, 0x78	; 120
    32f2:	09 f0       	breq	.+2      	; 0x32f6 <vfprintf+0x25e>
    32f4:	a6 c0       	rjmp	.+332    	; 0x3442 <vfprintf+0x3aa>
    32f6:	04 c0       	rjmp	.+8      	; 0x3300 <vfprintf+0x268>
    32f8:	28 e0       	ldi	r18, 0x08	; 8
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	0a c0       	rjmp	.+20     	; 0x3312 <vfprintf+0x27a>
    32fe:	10 61       	ori	r17, 0x10	; 16
    3300:	14 fd       	sbrc	r17, 4
    3302:	14 60       	ori	r17, 0x04	; 4
    3304:	20 e1       	ldi	r18, 0x10	; 16
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	04 c0       	rjmp	.+8      	; 0x3312 <vfprintf+0x27a>
    330a:	14 fd       	sbrc	r17, 4
    330c:	16 60       	ori	r17, 0x06	; 6
    330e:	20 e1       	ldi	r18, 0x10	; 16
    3310:	32 e0       	ldi	r19, 0x02	; 2
    3312:	17 ff       	sbrs	r17, 7
    3314:	08 c0       	rjmp	.+16     	; 0x3326 <vfprintf+0x28e>
    3316:	f5 01       	movw	r30, r10
    3318:	60 81       	ld	r22, Z
    331a:	71 81       	ldd	r23, Z+1	; 0x01
    331c:	82 81       	ldd	r24, Z+2	; 0x02
    331e:	93 81       	ldd	r25, Z+3	; 0x03
    3320:	44 e0       	ldi	r20, 0x04	; 4
    3322:	50 e0       	ldi	r21, 0x00	; 0
    3324:	08 c0       	rjmp	.+16     	; 0x3336 <vfprintf+0x29e>
    3326:	f5 01       	movw	r30, r10
    3328:	80 81       	ld	r24, Z
    332a:	91 81       	ldd	r25, Z+1	; 0x01
    332c:	bc 01       	movw	r22, r24
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	42 e0       	ldi	r20, 0x02	; 2
    3334:	50 e0       	ldi	r21, 0x00	; 0
    3336:	a4 0e       	add	r10, r20
    3338:	b5 1e       	adc	r11, r21
    333a:	a1 01       	movw	r20, r2
    333c:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__ultoa_invert>
    3340:	d8 2e       	mov	r13, r24
    3342:	d2 18       	sub	r13, r2
    3344:	8f e7       	ldi	r24, 0x7F	; 127
    3346:	f8 2e       	mov	r15, r24
    3348:	f1 22       	and	r15, r17
    334a:	f6 fe       	sbrs	r15, 6
    334c:	0b c0       	rjmp	.+22     	; 0x3364 <vfprintf+0x2cc>
    334e:	5e ef       	ldi	r21, 0xFE	; 254
    3350:	f5 22       	and	r15, r21
    3352:	d9 14       	cp	r13, r9
    3354:	38 f4       	brcc	.+14     	; 0x3364 <vfprintf+0x2cc>
    3356:	f4 fe       	sbrs	r15, 4
    3358:	07 c0       	rjmp	.+14     	; 0x3368 <vfprintf+0x2d0>
    335a:	f2 fc       	sbrc	r15, 2
    335c:	05 c0       	rjmp	.+10     	; 0x3368 <vfprintf+0x2d0>
    335e:	8f ee       	ldi	r24, 0xEF	; 239
    3360:	f8 22       	and	r15, r24
    3362:	02 c0       	rjmp	.+4      	; 0x3368 <vfprintf+0x2d0>
    3364:	1d 2d       	mov	r17, r13
    3366:	01 c0       	rjmp	.+2      	; 0x336a <vfprintf+0x2d2>
    3368:	19 2d       	mov	r17, r9
    336a:	f4 fe       	sbrs	r15, 4
    336c:	0d c0       	rjmp	.+26     	; 0x3388 <vfprintf+0x2f0>
    336e:	fe 01       	movw	r30, r28
    3370:	ed 0d       	add	r30, r13
    3372:	f1 1d       	adc	r31, r1
    3374:	80 81       	ld	r24, Z
    3376:	80 33       	cpi	r24, 0x30	; 48
    3378:	19 f4       	brne	.+6      	; 0x3380 <vfprintf+0x2e8>
    337a:	99 ee       	ldi	r25, 0xE9	; 233
    337c:	f9 22       	and	r15, r25
    337e:	08 c0       	rjmp	.+16     	; 0x3390 <vfprintf+0x2f8>
    3380:	1f 5f       	subi	r17, 0xFF	; 255
    3382:	f2 fe       	sbrs	r15, 2
    3384:	05 c0       	rjmp	.+10     	; 0x3390 <vfprintf+0x2f8>
    3386:	03 c0       	rjmp	.+6      	; 0x338e <vfprintf+0x2f6>
    3388:	8f 2d       	mov	r24, r15
    338a:	86 78       	andi	r24, 0x86	; 134
    338c:	09 f0       	breq	.+2      	; 0x3390 <vfprintf+0x2f8>
    338e:	1f 5f       	subi	r17, 0xFF	; 255
    3390:	0f 2d       	mov	r16, r15
    3392:	f3 fc       	sbrc	r15, 3
    3394:	14 c0       	rjmp	.+40     	; 0x33be <vfprintf+0x326>
    3396:	f0 fe       	sbrs	r15, 0
    3398:	0f c0       	rjmp	.+30     	; 0x33b8 <vfprintf+0x320>
    339a:	1e 15       	cp	r17, r14
    339c:	10 f0       	brcs	.+4      	; 0x33a2 <vfprintf+0x30a>
    339e:	9d 2c       	mov	r9, r13
    33a0:	0b c0       	rjmp	.+22     	; 0x33b8 <vfprintf+0x320>
    33a2:	9d 2c       	mov	r9, r13
    33a4:	9e 0c       	add	r9, r14
    33a6:	91 1a       	sub	r9, r17
    33a8:	1e 2d       	mov	r17, r14
    33aa:	06 c0       	rjmp	.+12     	; 0x33b8 <vfprintf+0x320>
    33ac:	80 e2       	ldi	r24, 0x20	; 32
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	b3 01       	movw	r22, r6
    33b2:	0e 94 3f 1a 	call	0x347e	; 0x347e <fputc>
    33b6:	1f 5f       	subi	r17, 0xFF	; 255
    33b8:	1e 15       	cp	r17, r14
    33ba:	c0 f3       	brcs	.-16     	; 0x33ac <vfprintf+0x314>
    33bc:	04 c0       	rjmp	.+8      	; 0x33c6 <vfprintf+0x32e>
    33be:	1e 15       	cp	r17, r14
    33c0:	10 f4       	brcc	.+4      	; 0x33c6 <vfprintf+0x32e>
    33c2:	e1 1a       	sub	r14, r17
    33c4:	01 c0       	rjmp	.+2      	; 0x33c8 <vfprintf+0x330>
    33c6:	ee 24       	eor	r14, r14
    33c8:	04 ff       	sbrs	r16, 4
    33ca:	0f c0       	rjmp	.+30     	; 0x33ea <vfprintf+0x352>
    33cc:	80 e3       	ldi	r24, 0x30	; 48
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	b3 01       	movw	r22, r6
    33d2:	0e 94 3f 1a 	call	0x347e	; 0x347e <fputc>
    33d6:	02 ff       	sbrs	r16, 2
    33d8:	1d c0       	rjmp	.+58     	; 0x3414 <vfprintf+0x37c>
    33da:	01 fd       	sbrc	r16, 1
    33dc:	03 c0       	rjmp	.+6      	; 0x33e4 <vfprintf+0x34c>
    33de:	88 e7       	ldi	r24, 0x78	; 120
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	0e c0       	rjmp	.+28     	; 0x3400 <vfprintf+0x368>
    33e4:	88 e5       	ldi	r24, 0x58	; 88
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	0b c0       	rjmp	.+22     	; 0x3400 <vfprintf+0x368>
    33ea:	80 2f       	mov	r24, r16
    33ec:	86 78       	andi	r24, 0x86	; 134
    33ee:	91 f0       	breq	.+36     	; 0x3414 <vfprintf+0x37c>
    33f0:	01 ff       	sbrs	r16, 1
    33f2:	02 c0       	rjmp	.+4      	; 0x33f8 <vfprintf+0x360>
    33f4:	8b e2       	ldi	r24, 0x2B	; 43
    33f6:	01 c0       	rjmp	.+2      	; 0x33fa <vfprintf+0x362>
    33f8:	80 e2       	ldi	r24, 0x20	; 32
    33fa:	f7 fc       	sbrc	r15, 7
    33fc:	8d e2       	ldi	r24, 0x2D	; 45
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	b3 01       	movw	r22, r6
    3402:	0e 94 3f 1a 	call	0x347e	; 0x347e <fputc>
    3406:	06 c0       	rjmp	.+12     	; 0x3414 <vfprintf+0x37c>
    3408:	80 e3       	ldi	r24, 0x30	; 48
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	b3 01       	movw	r22, r6
    340e:	0e 94 3f 1a 	call	0x347e	; 0x347e <fputc>
    3412:	9a 94       	dec	r9
    3414:	d9 14       	cp	r13, r9
    3416:	c0 f3       	brcs	.-16     	; 0x3408 <vfprintf+0x370>
    3418:	da 94       	dec	r13
    341a:	f1 01       	movw	r30, r2
    341c:	ed 0d       	add	r30, r13
    341e:	f1 1d       	adc	r31, r1
    3420:	80 81       	ld	r24, Z
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	b3 01       	movw	r22, r6
    3426:	0e 94 3f 1a 	call	0x347e	; 0x347e <fputc>
    342a:	dd 20       	and	r13, r13
    342c:	a9 f7       	brne	.-22     	; 0x3418 <vfprintf+0x380>
    342e:	06 c0       	rjmp	.+12     	; 0x343c <vfprintf+0x3a4>
    3430:	80 e2       	ldi	r24, 0x20	; 32
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	b3 01       	movw	r22, r6
    3436:	0e 94 3f 1a 	call	0x347e	; 0x347e <fputc>
    343a:	ea 94       	dec	r14
    343c:	ee 20       	and	r14, r14
    343e:	c1 f7       	brne	.-16     	; 0x3430 <vfprintf+0x398>
    3440:	43 ce       	rjmp	.-890    	; 0x30c8 <vfprintf+0x30>
    3442:	f3 01       	movw	r30, r6
    3444:	66 81       	ldd	r22, Z+6	; 0x06
    3446:	77 81       	ldd	r23, Z+7	; 0x07
    3448:	cb 01       	movw	r24, r22
    344a:	2b 96       	adiw	r28, 0x0b	; 11
    344c:	e2 e1       	ldi	r30, 0x12	; 18
    344e:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__epilogue_restores__>

00003452 <strnlen_P>:
    3452:	fc 01       	movw	r30, r24
    3454:	05 90       	lpm	r0, Z+
    3456:	61 50       	subi	r22, 0x01	; 1
    3458:	70 40       	sbci	r23, 0x00	; 0
    345a:	01 10       	cpse	r0, r1
    345c:	d8 f7       	brcc	.-10     	; 0x3454 <strnlen_P+0x2>
    345e:	80 95       	com	r24
    3460:	90 95       	com	r25
    3462:	8e 0f       	add	r24, r30
    3464:	9f 1f       	adc	r25, r31
    3466:	08 95       	ret

00003468 <strnlen>:
    3468:	fc 01       	movw	r30, r24
    346a:	61 50       	subi	r22, 0x01	; 1
    346c:	70 40       	sbci	r23, 0x00	; 0
    346e:	01 90       	ld	r0, Z+
    3470:	01 10       	cpse	r0, r1
    3472:	d8 f7       	brcc	.-10     	; 0x346a <strnlen+0x2>
    3474:	80 95       	com	r24
    3476:	90 95       	com	r25
    3478:	8e 0f       	add	r24, r30
    347a:	9f 1f       	adc	r25, r31
    347c:	08 95       	ret

0000347e <fputc>:
    347e:	0f 93       	push	r16
    3480:	1f 93       	push	r17
    3482:	cf 93       	push	r28
    3484:	df 93       	push	r29
    3486:	8c 01       	movw	r16, r24
    3488:	eb 01       	movw	r28, r22
    348a:	8b 81       	ldd	r24, Y+3	; 0x03
    348c:	81 ff       	sbrs	r24, 1
    348e:	1b c0       	rjmp	.+54     	; 0x34c6 <fputc+0x48>
    3490:	82 ff       	sbrs	r24, 2
    3492:	0d c0       	rjmp	.+26     	; 0x34ae <fputc+0x30>
    3494:	2e 81       	ldd	r18, Y+6	; 0x06
    3496:	3f 81       	ldd	r19, Y+7	; 0x07
    3498:	8c 81       	ldd	r24, Y+4	; 0x04
    349a:	9d 81       	ldd	r25, Y+5	; 0x05
    349c:	28 17       	cp	r18, r24
    349e:	39 07       	cpc	r19, r25
    34a0:	64 f4       	brge	.+24     	; 0x34ba <fputc+0x3c>
    34a2:	e8 81       	ld	r30, Y
    34a4:	f9 81       	ldd	r31, Y+1	; 0x01
    34a6:	01 93       	st	Z+, r16
    34a8:	f9 83       	std	Y+1, r31	; 0x01
    34aa:	e8 83       	st	Y, r30
    34ac:	06 c0       	rjmp	.+12     	; 0x34ba <fputc+0x3c>
    34ae:	e8 85       	ldd	r30, Y+8	; 0x08
    34b0:	f9 85       	ldd	r31, Y+9	; 0x09
    34b2:	80 2f       	mov	r24, r16
    34b4:	09 95       	icall
    34b6:	89 2b       	or	r24, r25
    34b8:	31 f4       	brne	.+12     	; 0x34c6 <fputc+0x48>
    34ba:	8e 81       	ldd	r24, Y+6	; 0x06
    34bc:	9f 81       	ldd	r25, Y+7	; 0x07
    34be:	01 96       	adiw	r24, 0x01	; 1
    34c0:	9f 83       	std	Y+7, r25	; 0x07
    34c2:	8e 83       	std	Y+6, r24	; 0x06
    34c4:	02 c0       	rjmp	.+4      	; 0x34ca <fputc+0x4c>
    34c6:	0f ef       	ldi	r16, 0xFF	; 255
    34c8:	1f ef       	ldi	r17, 0xFF	; 255
    34ca:	c8 01       	movw	r24, r16
    34cc:	df 91       	pop	r29
    34ce:	cf 91       	pop	r28
    34d0:	1f 91       	pop	r17
    34d2:	0f 91       	pop	r16
    34d4:	08 95       	ret

000034d6 <__ultoa_invert>:
    34d6:	fa 01       	movw	r30, r20
    34d8:	aa 27       	eor	r26, r26
    34da:	28 30       	cpi	r18, 0x08	; 8
    34dc:	51 f1       	breq	.+84     	; 0x3532 <__ultoa_invert+0x5c>
    34de:	20 31       	cpi	r18, 0x10	; 16
    34e0:	81 f1       	breq	.+96     	; 0x3542 <__ultoa_invert+0x6c>
    34e2:	e8 94       	clt
    34e4:	6f 93       	push	r22
    34e6:	6e 7f       	andi	r22, 0xFE	; 254
    34e8:	6e 5f       	subi	r22, 0xFE	; 254
    34ea:	7f 4f       	sbci	r23, 0xFF	; 255
    34ec:	8f 4f       	sbci	r24, 0xFF	; 255
    34ee:	9f 4f       	sbci	r25, 0xFF	; 255
    34f0:	af 4f       	sbci	r26, 0xFF	; 255
    34f2:	b1 e0       	ldi	r27, 0x01	; 1
    34f4:	3e d0       	rcall	.+124    	; 0x3572 <__ultoa_invert+0x9c>
    34f6:	b4 e0       	ldi	r27, 0x04	; 4
    34f8:	3c d0       	rcall	.+120    	; 0x3572 <__ultoa_invert+0x9c>
    34fa:	67 0f       	add	r22, r23
    34fc:	78 1f       	adc	r23, r24
    34fe:	89 1f       	adc	r24, r25
    3500:	9a 1f       	adc	r25, r26
    3502:	a1 1d       	adc	r26, r1
    3504:	68 0f       	add	r22, r24
    3506:	79 1f       	adc	r23, r25
    3508:	8a 1f       	adc	r24, r26
    350a:	91 1d       	adc	r25, r1
    350c:	a1 1d       	adc	r26, r1
    350e:	6a 0f       	add	r22, r26
    3510:	71 1d       	adc	r23, r1
    3512:	81 1d       	adc	r24, r1
    3514:	91 1d       	adc	r25, r1
    3516:	a1 1d       	adc	r26, r1
    3518:	20 d0       	rcall	.+64     	; 0x355a <__ultoa_invert+0x84>
    351a:	09 f4       	brne	.+2      	; 0x351e <__ultoa_invert+0x48>
    351c:	68 94       	set
    351e:	3f 91       	pop	r19
    3520:	2a e0       	ldi	r18, 0x0A	; 10
    3522:	26 9f       	mul	r18, r22
    3524:	11 24       	eor	r1, r1
    3526:	30 19       	sub	r19, r0
    3528:	30 5d       	subi	r19, 0xD0	; 208
    352a:	31 93       	st	Z+, r19
    352c:	de f6       	brtc	.-74     	; 0x34e4 <__ultoa_invert+0xe>
    352e:	cf 01       	movw	r24, r30
    3530:	08 95       	ret
    3532:	46 2f       	mov	r20, r22
    3534:	47 70       	andi	r20, 0x07	; 7
    3536:	40 5d       	subi	r20, 0xD0	; 208
    3538:	41 93       	st	Z+, r20
    353a:	b3 e0       	ldi	r27, 0x03	; 3
    353c:	0f d0       	rcall	.+30     	; 0x355c <__ultoa_invert+0x86>
    353e:	c9 f7       	brne	.-14     	; 0x3532 <__ultoa_invert+0x5c>
    3540:	f6 cf       	rjmp	.-20     	; 0x352e <__ultoa_invert+0x58>
    3542:	46 2f       	mov	r20, r22
    3544:	4f 70       	andi	r20, 0x0F	; 15
    3546:	40 5d       	subi	r20, 0xD0	; 208
    3548:	4a 33       	cpi	r20, 0x3A	; 58
    354a:	18 f0       	brcs	.+6      	; 0x3552 <__ultoa_invert+0x7c>
    354c:	49 5d       	subi	r20, 0xD9	; 217
    354e:	31 fd       	sbrc	r19, 1
    3550:	40 52       	subi	r20, 0x20	; 32
    3552:	41 93       	st	Z+, r20
    3554:	02 d0       	rcall	.+4      	; 0x355a <__ultoa_invert+0x84>
    3556:	a9 f7       	brne	.-22     	; 0x3542 <__ultoa_invert+0x6c>
    3558:	ea cf       	rjmp	.-44     	; 0x352e <__ultoa_invert+0x58>
    355a:	b4 e0       	ldi	r27, 0x04	; 4
    355c:	a6 95       	lsr	r26
    355e:	97 95       	ror	r25
    3560:	87 95       	ror	r24
    3562:	77 95       	ror	r23
    3564:	67 95       	ror	r22
    3566:	ba 95       	dec	r27
    3568:	c9 f7       	brne	.-14     	; 0x355c <__ultoa_invert+0x86>
    356a:	00 97       	sbiw	r24, 0x00	; 0
    356c:	61 05       	cpc	r22, r1
    356e:	71 05       	cpc	r23, r1
    3570:	08 95       	ret
    3572:	9b 01       	movw	r18, r22
    3574:	ac 01       	movw	r20, r24
    3576:	0a 2e       	mov	r0, r26
    3578:	06 94       	lsr	r0
    357a:	57 95       	ror	r21
    357c:	47 95       	ror	r20
    357e:	37 95       	ror	r19
    3580:	27 95       	ror	r18
    3582:	ba 95       	dec	r27
    3584:	c9 f7       	brne	.-14     	; 0x3578 <__ultoa_invert+0xa2>
    3586:	62 0f       	add	r22, r18
    3588:	73 1f       	adc	r23, r19
    358a:	84 1f       	adc	r24, r20
    358c:	95 1f       	adc	r25, r21
    358e:	a0 1d       	adc	r26, r0
    3590:	08 95       	ret

00003592 <_exit>:
    3592:	f8 94       	cli

00003594 <__stop_program>:
    3594:	ff cf       	rjmp	.-2      	; 0x3594 <__stop_program>
